// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	builder "github.com/weaveworks/eksctl/pkg/cfn/builder"

	mock "github.com/stretchr/testify/mock"
)

// NodeGroupStackManager is an autogenerated mock type for the NodeGroupStackManager type
type NodeGroupStackManager struct {
	mock.Mock
}

// CreateStack provides a mock function with given fields: ctx, stackName, resourceSet, tags, parameters, errs
func (_m *NodeGroupStackManager) CreateStack(ctx context.Context, stackName string, resourceSet builder.ResourceSetReader, tags map[string]string, parameters map[string]string, errs chan error) error {
	ret := _m.Called(ctx, stackName, resourceSet, tags, parameters, errs)

	if len(ret) == 0 {
		panic("no return value specified for CreateStack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, builder.ResourceSetReader, map[string]string, map[string]string, chan error) error); ok {
		r0 = rf(ctx, stackName, resourceSet, tags, parameters, errs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNodeGroupStackManager creates a new instance of NodeGroupStackManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeGroupStackManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeGroupStackManager {
	mock := &NodeGroupStackManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
