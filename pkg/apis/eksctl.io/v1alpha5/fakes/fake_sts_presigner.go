// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sts"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
)

type FakeSTSPresigner struct {
	PresignGetCallerIdentityStub        func(context.Context, *sts.GetCallerIdentityInput, ...func(*sts.PresignOptions)) (*v4.PresignedHTTPRequest, error)
	presignGetCallerIdentityMutex       sync.RWMutex
	presignGetCallerIdentityArgsForCall []struct {
		arg1 context.Context
		arg2 *sts.GetCallerIdentityInput
		arg3 []func(*sts.PresignOptions)
	}
	presignGetCallerIdentityReturns struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	presignGetCallerIdentityReturnsOnCall map[int]struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSTSPresigner) PresignGetCallerIdentity(arg1 context.Context, arg2 *sts.GetCallerIdentityInput, arg3 ...func(*sts.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	fake.presignGetCallerIdentityMutex.Lock()
	ret, specificReturn := fake.presignGetCallerIdentityReturnsOnCall[len(fake.presignGetCallerIdentityArgsForCall)]
	fake.presignGetCallerIdentityArgsForCall = append(fake.presignGetCallerIdentityArgsForCall, struct {
		arg1 context.Context
		arg2 *sts.GetCallerIdentityInput
		arg3 []func(*sts.PresignOptions)
	}{arg1, arg2, arg3})
	stub := fake.PresignGetCallerIdentityStub
	fakeReturns := fake.presignGetCallerIdentityReturns
	fake.recordInvocation("PresignGetCallerIdentity", []interface{}{arg1, arg2, arg3})
	fake.presignGetCallerIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSTSPresigner) PresignGetCallerIdentityCallCount() int {
	fake.presignGetCallerIdentityMutex.RLock()
	defer fake.presignGetCallerIdentityMutex.RUnlock()
	return len(fake.presignGetCallerIdentityArgsForCall)
}

func (fake *FakeSTSPresigner) PresignGetCallerIdentityCalls(stub func(context.Context, *sts.GetCallerIdentityInput, ...func(*sts.PresignOptions)) (*v4.PresignedHTTPRequest, error)) {
	fake.presignGetCallerIdentityMutex.Lock()
	defer fake.presignGetCallerIdentityMutex.Unlock()
	fake.PresignGetCallerIdentityStub = stub
}

func (fake *FakeSTSPresigner) PresignGetCallerIdentityArgsForCall(i int) (context.Context, *sts.GetCallerIdentityInput, []func(*sts.PresignOptions)) {
	fake.presignGetCallerIdentityMutex.RLock()
	defer fake.presignGetCallerIdentityMutex.RUnlock()
	argsForCall := fake.presignGetCallerIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSTSPresigner) PresignGetCallerIdentityReturns(result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignGetCallerIdentityMutex.Lock()
	defer fake.presignGetCallerIdentityMutex.Unlock()
	fake.PresignGetCallerIdentityStub = nil
	fake.presignGetCallerIdentityReturns = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeSTSPresigner) PresignGetCallerIdentityReturnsOnCall(i int, result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignGetCallerIdentityMutex.Lock()
	defer fake.presignGetCallerIdentityMutex.Unlock()
	fake.PresignGetCallerIdentityStub = nil
	if fake.presignGetCallerIdentityReturnsOnCall == nil {
		fake.presignGetCallerIdentityReturnsOnCall = make(map[int]struct {
			result1 *v4.PresignedHTTPRequest
			result2 error
		})
	}
	fake.presignGetCallerIdentityReturnsOnCall[i] = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeSTSPresigner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.presignGetCallerIdentityMutex.RLock()
	defer fake.presignGetCallerIdentityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSTSPresigner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1alpha5.STSPresigner = new(FakeSTSPresigner)
