// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (985B)
// assets/bootstrap.al2.sh (1.246kB)
// assets/bootstrap.ubuntu.sh (2.291kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x21\x68\x1f\x36\x88\x6c\xda\xbd\x15\xfc\xe0\x25\x6e\x31\x73\x9d\x12\xa7\xdb\x60\x1b\x46\x91\x2e\xe9\x11\xf9\x64\x24\x39\x6d\x57\xf2\xbf\x0f\xc5\xf1\x96\xb2\x32\xf6\x26\xdd\x77\xf7\x7d\xdf\xfd\x38\x63\xb0\x75\xd2\x6b\xee\x3a\x90\xb8\x46\xc9\xdc\xb3\xf3\xd0\x2a\xa6\xac\xe9\x38\x12\xeb\x09\x3d\x5b\x1b\xcb\xb6\xfd\x0a\x34\xf8\xc9\xe1\x93\xb5\xe2\xa7\x21\x56\x22\xf5\x4f\xec\x92\xbd\xcb\xca\xcb\xf7\x51\xf4\xad\x06\xbb\x43\x09\x3f\xa2\x33\x56\x1a\x29\x34\x6b\xc1\x0b\x25\xbc\x60\x9d\xb0\xa2\x05\x0f\xd6\x5d\xb1\x45\x7e\x53\xcc\xab\x09\xcb\xbe\xd4\xcd\x2c\xbf\xce\xee\xcb\x65\x33\xc4\xa2\x9c\x76\x68\x0d\xb5\x40\xfe\x1a\x35\xa4\x09\x78\x99\x0c\x16\x93\x91\x2b\x06\xda\x45\x67\xec\x46\x9b\x95\xd0\x4c\x90\x62\xce\x0b\x8f\xf2\x95\xc6\xb4\xbc\xaf\x97\xf9\xa2\x99\x55\xf5\x84\x55\xf3\x59\xde\x94\xd9\xc7\xbc\x1c\x3f\xcb\xac\xa8\x96\xf5\x3f\xe5\x8e\xfd\x1e\xd5\x86\x76\xc8\x10\x7f\x43\xec\x40\x59\xdc\x4d\x58\x51\xd5\xcb\xac\x9a\xe6\x4d\x31\xfb\x2f\x6e\x1d\x58\x0f\x0a\x51\xfe\x04\xb2\xf6\xc2\xfa\xf4\xe4\x99\xf4\xce\x26\x2b\xa4\xb1\x80\x7d\x8f\x18\xe3\x9c\x8c\x02\x8e\x5d\x7a\xfe\x72\x54\xde\x9f\x02\x5a\xac\x40\xbb\x11\x1c\xda\xde\x4f\x84\xee\x1e\x44\x3c\xe8\xc7\x68\x12\x24\xe7\x05\x49\xe0\xa8\xd2\xf3\x97\x13\xe3\x23\x57\x2b\x9e\x78\x67\x54\x20\xba\xcd\xbe\x36\x77\xf3\x59\x3d\x42\x16\x36\xe8\x3c\xd8\x83\x5e\xea\x6d\x0f\xa7\xc1\x47\xf4\x0f\xdc\x0b\x24\xff\xdb\xc4\x30\xee\xb1\x5c\x6a\xd3\x2b\xde\x59\xb3\x43\x05\x36\x15\x8f\x6e\x04\x0c\x85\x3a\xb0\xdc\xf6\xe4\xb1\x85\x54\x19\xb9\x05\x3b\x76\x07\xfe\xd1\xd8\x2d\xef\x74\xbf\x41\x4a\x25\xe1\x58\x47\xc8\x57\x48\x5c\xa1\x4d\x13\xd3\xf9\x44\x12\x86\xb1\x9d\xc0\xd2\xd0\x7a\xc0\xc3\x1a\x02\x4e\xe0\x63\x75\xcc\xe8\x8c\xe2\x48\x6b\x2b\x4e\x2c\x60\x2b\x36\x90\x9e\xbf\x84\x2b\xcd\x3f\xd5\x4d\x3e\x5d\x34\xd9\x74\x3a\xbf\xaf\x96\xfb\x58\x6d\x6d\x0c\xd2\xc6\x03\xfc\xfa\x88\xf7\xc7\x68\x9d\x2f\x3e\x17\xd3\xbc\x6e\x66\xf3\xdb\xac\xa8\xf6\x61\xf9\x49\x27\x7a\x07\x57\x1f\xe2\x0b\x0e\x5b\xb7\xea\x51\xab\xf8\xe2\x68\x22\xec\x38\xd8\xc4\xcd\x5f\xb7\x32\x84\xe3\x67\xd1\xea\x3f\xa3\x7a\x2b\x31\x1c\x55\xc8\x8a\x7e\x05\x00\x00\xff\xff\x30\x3f\x63\x4d\xd9\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0xbf, 0xa0, 0x4b, 0x49, 0x6d, 0x88, 0xe7, 0x32, 0x9e, 0xe6, 0xa2, 0xaa, 0x6d, 0xbd, 0xa8, 0x2, 0xb8, 0xe7, 0x4a, 0x8e, 0xcb, 0xa8, 0xa, 0x46, 0xea, 0xe0, 0x70, 0x6f, 0x65, 0x2d, 0xc8}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x61\x4f\x1a\x4d\x10\xc7\xdf\xef\xa7\x98\xe7\xbc\x18\xc9\xd3\xe5\xd4\x58\x13\x51\x9a\x50\x38\xd3\x4b\x11\x48\xc1\x56\x63\xec\x65\xd9\x1b\xca\xc6\x65\xf7\x72\x3b\xa0\x86\x5c\x3f\x7b\xb3\x78\x58\x50\xeb\x2b\x98\x99\xff\xec\xfc\xf7\x37\xb7\x3b\xff\x45\x63\x65\xa2\xb1\x70\x53\xc6\x1c\x12\x70\x0b\x58\x14\xf8\xa0\x68\x1d\xe6\x2a\xc7\x89\x50\x7a\x1d\x1b\x3b\x37\x0e\x89\xb1\xc9\xdc\x48\x52\xd6\xc0\x2f\xa4\x74\x26\x1e\xd2\xdc\x66\x6e\xaf\x06\x4b\x06\x70\x3f\x55\x1a\xa1\x40\x91\x81\x32\x8e\x84\x91\x98\xd2\x63\x8e\xe0\x35\xa7\x90\x59\x06\x00\xa0\x26\x00\x37\x37\x10\x84\xcb\x2d\x51\x19\x40\xb3\xe9\xb3\x07\x65\x00\xb7\xb7\xb0\xbb\x5b\xa9\x7c\xb3\x2f\xfe\x86\x9f\x37\xfb\xfc\xe4\xf6\xff\xd0\x97\x4f\x81\xa6\x68\x56\x07\x02\xa0\x9c\x5a\xa8\x94\x55\xaa\x40\x9a\x17\x4f\xf5\x89\x62\x00\x99\x35\x08\x67\x10\x21\xc9\x08\xef\x9c\x24\x1d\xad\xdd\xd7\x67\x22\x67\x25\x63\x3b\x70\xe9\x10\x92\x8b\xce\x70\x71\x08\x64\xfd\x0d\x61\x86\x24\x32\x41\x82\x8d\xfa\x5f\xe3\x5e\x33\x08\xf7\xe4\xbc\xd0\xc0\xb9\x53\x1a\x0d\x01\xbf\x82\xc1\xe5\x08\xf8\x17\x08\xae\xb8\xb8\x77\x1c\xe5\x21\x5f\x37\x71\xb2\x77\x68\x38\x91\xe6\x0e\xa5\x35\x99\x6b\xc0\xf1\xfe\x7e\x00\x53\xa2\xbc\x11\x45\x07\xc7\x27\xf5\xc3\x8f\x47\xf5\xea\x37\xd2\x82\xd0\x51\x24\x72\x15\xad\x3a\x6b\xc1\x0b\xdc\xd5\xb9\x15\xee\x17\x4e\xde\xb1\xd0\x80\x70\xe5\x3f\x80\xe0\xfd\xd1\xbe\x8d\xfb\xbe\x28\x3c\x08\x3c\x93\x5e\xbf\x13\xa7\xc9\xc0\x5f\x7c\xd3\x01\x68\x2b\x85\xe6\x2a\x5f\x1c\xd5\x02\x96\xf4\x86\xa3\x56\xaf\x1d\xa7\x49\xe7\x95\x70\xbd\x63\xae\xb2\x4d\xe5\xe8\x7a\x10\xff\x5b\xeb\xbf\x87\x5a\xc0\x5a\x3f\x86\xe9\x30\xfe\xf6\x3d\x69\xc7\xc3\xb4\xd3\xbf\x68\x25\xbd\x57\x3d\x0e\x8b\x85\x92\xe8\xa2\xcc\xce\x84\xf2\xc8\x18\x73\x76\x5e\x48\xdc\xda\xf5\xdd\x7c\x8c\x1a\xa9\x8e\x66\x01\x3b\x40\x53\xe5\x40\x0a\x03\x76\x81\x45\xa1\x32\x84\x8b\xd6\x55\x3a\xe8\x77\x86\xec\xaf\xc5\x6e\x72\x1e\xb7\xaf\xdb\xdd\x77\x7c\x6a\x35\x41\x2e\x1f\xa5\xf6\x6e\x57\xa8\xba\xad\xcf\x71\x77\xd8\x0c\xc2\xe5\x46\x58\x7e\x30\x36\x7b\x52\xaf\xc4\xcd\x70\xf9\x7a\x4a\xe9\x9d\x4b\x41\xf0\xe9\x4d\xe3\x2b\xe0\x2b\xfb\x67\x67\x71\xff\xfc\x79\x31\xd5\xa0\x64\x50\x6e\xad\x61\x63\x42\xd2\x29\x5f\x70\xdf\x28\xfa\xb8\x7c\x13\x74\xb8\x7c\x23\x5b\xb2\x35\xa8\x66\xb8\x5c\xff\x6d\xf0\x8a\x4f\xf5\x9e\xfc\xa3\xdd\x1e\x10\xd4\xca\x2d\x3c\xdb\x74\x98\xbf\x0f\x73\x8f\x8e\x70\x26\x49\x43\x26\x70\x66\x0d\x2f\x50\x5b\x91\x6d\xe4\xd1\x88\xb1\x46\xa8\x88\x6c\x14\x1c\x89\x82\x9e\xf3\x7f\x02\x00\x00\xff\xff\x6d\x49\xb4\xd1\xde\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0xb, 0x12, 0xec, 0x9f, 0xc4, 0x34, 0x62, 0x3, 0xdd, 0x85, 0x9f, 0xc6, 0x71, 0xab, 0x8b, 0xfb, 0x4c, 0x46, 0x31, 0x3f, 0x8c, 0x45, 0x1b, 0xbd, 0xdc, 0x6d, 0x38, 0xee, 0xaa, 0xe5, 0xf1}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x61\x6f\x1a\x39\x13\xfe\xee\x5f\x31\xef\x06\xf5\x0d\xba\x78\xb7\xc9\xf5\x2a\x35\x2d\xa7\xe3\x02\xbd\x43\x4d\x21\x2a\xe4\xae\x55\x94\x43\xc6\x1e\xb2\x16\xc6\x5e\xd9\xb3\xd0\x28\xe2\x7e\xfb\xc9\xcb\x6e\x02\xb4\xcd\x27\xd6\x9e\x67\xc6\xcf\xcc\x3c\x33\x1c\xfd\x2f\x9b\x69\x9b\xcd\x44\xc8\x19\x0b\x48\xc0\x1d\xa0\xf7\xf8\x55\x53\x73\x2c\x74\x81\x73\xa1\x4d\x73\xb6\xae\xb4\x01\x89\xb1\x79\x69\x25\x69\x67\xe1\x0e\x69\xba\x14\x5f\xa7\x85\x53\xe1\xb8\x0d\x0f\x0c\x60\x9d\x6b\x83\xe0\x51\x28\xd0\x36\x90\xb0\x12\xa7\x74\x5f\x20\x44\xcc\x5b\x50\x8e\x01\x00\xe8\x39\xc0\xcd\x0d\x24\xad\x87\x3d\xd0\x26\x81\x4e\x27\xde\x9e\x6e\x12\xb8\xbd\x85\x17\x2f\x6a\x54\x74\x8e\xc6\x7f\xe1\x9f\x9b\x97\xfc\xcd\xed\x4f\xad\x68\x7e\x0b\x94\xa3\xad\x02\x02\xa0\xcc\x1d\xd4\xc8\xb7\xf5\x9d\x47\x2a\xfd\x16\x30\xd7\x0c\x40\x39\x8b\xf0\x0e\x32\x24\x99\xe1\x22\x48\x32\x59\x43\x3f\x5d\x8a\x82\x6d\x18\x3b\x82\xeb\x80\x30\xf8\xd8\x1b\xaf\xce\x80\x5c\x4c\x11\x96\x48\x42\x09\x12\x6c\x32\xfa\xd0\x1f\x76\x92\xd6\xb1\x2c\xbd\x01\xce\x83\x36\x68\x09\xf8\x67\xb8\xba\x9e\x00\xff\x13\x92\xcf\x5c\xac\x03\x47\x79\xc6\x1b\x27\x4e\x6e\x81\x96\x13\x19\x1e\x50\x3a\xab\xc2\x39\xbc\x7e\xf9\x32\x81\x9c\xa8\x38\xcf\xb2\xd3\xd7\x6f\xd2\xb3\x5f\x5e\xa5\xf5\x6f\x66\x04\x61\xa0\x4c\x14\x3a\xab\x3c\xdb\xc9\x41\xbd\xeb\xb8\x75\xbd\x0f\x98\x3c\x43\xe1\x1c\x5a\x15\xff\x04\x92\xe7\x9f\x8e\x6e\x3c\xfa\x65\xad\xd3\x24\xd6\x64\x38\xea\xf5\xa7\x83\xab\x98\xf8\x2e\x03\x30\x4e\x0a\xc3\x75\xb1\x7a\xd5\x4e\xd8\x60\x38\x9e\x74\x87\x17\xfd\xe9\xa0\xf7\x0d\xb0\x69\x32\xd7\x6a\x17\x39\xf9\x72\xd5\xff\x31\x36\x0a\xa2\x9d\xb0\xee\xdf\xe3\xe9\xb8\xff\xe9\xaf\xc1\x45\x7f\x3c\xed\x8d\x3e\x76\x07\xc3\x6f\x7c\x02\xfa\x95\x96\x18\x32\xe5\x96\x42\xc7\x92\xb1\xe0\x4a\x2f\x71\xaf\xd5\x8b\x72\x86\x06\x29\x45\xbb\x82\x23\xa0\x5c\x07\x90\xc2\x82\x5b\xa1\xf7\x5a\x21\x7c\xec\x7e\x9e\x5e\x8d\x7a\x63\xc6\x9e\x28\x5e\x0e\xde\xf7\x2f\xbe\x5c\x5c\x3e\xc3\xd3\xe8\x39\x72\x79\x2f\x4d\x64\x5b\x95\xea\xb2\xfb\x7b\xff\x72\xdc\x49\x5a\x0f\x3b\xc7\xcd\x89\x75\x6a\x8b\xae\xc0\x9d\xd6\xc3\xb7\xaf\x6c\x12\xc6\xa4\x20\xf8\xf5\xbb\xc4\xab\x7a\x57\xf4\xdf\xbd\xeb\x8f\xde\x3f\xf6\xa5\x7e\x67\x70\xb5\xd9\xeb\xc2\xce\x03\x83\xde\xe6\xa0\xec\x3b\xc6\x78\xde\xb0\x26\xfb\x4e\xeb\xa1\xf9\x3c\xe7\x75\xce\xf5\x8c\xc4\x49\xdc\xf7\x4a\xda\x9b\xbd\x94\xf7\x33\x66\x91\x24\x0b\x56\x14\x20\x8c\x16\x01\xea\x44\x38\x2e\x42\x5a\x7f\x37\x77\x87\x30\x49\xe6\x11\x26\xc9\x34\x77\x5b\x58\x20\x57\xec\x06\x63\xe1\x3e\x10\x2e\x23\xce\x63\x40\xe2\x71\x6d\xa1\x62\xec\x98\x01\x1c\xc1\x64\xd4\x1b\x9d\xc7\x5d\x11\x10\x42\xee\x4a\xa3\x60\x86\x60\x9c\x5b\xa0\x02\x41\x80\x2b\xf4\xf7\x40\x7a\x89\x4d\x50\x08\x24\x3c\x05\x28\x8b\x93\x2a\xc2\x3a\xd7\x32\x07\x1d\x60\x9d\x0b\x82\x35\x82\x72\xa0\x2d\x74\x2f\xcf\xe0\xf8\xd1\x36\x13\x01\x15\x38\x0b\x85\x11\xda\xc2\x96\x93\xda\x06\x10\x56\xc1\x12\x85\xa5\xb8\x53\x66\x71\x1b\x7a\x12\x33\x83\xf1\xb8\x74\x81\x1a\x34\x28\x1d\xc8\xbb\xd0\x3e\x81\x59\x49\xa0\xe9\xff\xa1\xf2\xb7\x8e\x40\x1a\x14\x1e\x72\xb7\x8e\x4e\xc6\x09\x55\xa7\x34\xf7\x6e\xf9\x44\x3c\xd6\x67\xad\x29\x77\x25\x41\x2e\x56\xda\xde\x55\x01\xc8\x81\x2c\x03\xb9\xa5\x0e\x18\xfd\xb6\x40\x4d\x01\xcd\x9c\x01\x3c\x33\x2e\x8f\xaa\x7b\x1e\xf6\x43\x40\x33\x31\x15\x82\x01\xcc\x8d\xb8\x0b\x9d\xe3\x6a\x2b\x27\xd5\x4c\xe8\x62\x47\xc2\xc9\xd6\xb0\x14\x5f\x79\xd4\xdc\x8e\x1c\x1b\xd3\x76\x8e\xc4\x0c\x4d\x38\x10\xdc\x89\x30\x45\x2e\xd2\xed\xc3\xa9\x76\xd9\xce\xe2\x39\x18\x87\x3a\x56\xe1\x14\xd7\x76\xee\x05\x97\xce\x92\xd0\x16\x3d\xd7\x4b\x71\x17\xc7\x33\x6e\x9e\xfe\x87\xf1\xb4\x7f\xf1\x69\xda\xbd\xb8\x18\x5d\x0f\x27\x9b\x54\x2d\x7c\x8a\xd2\xa7\x5b\x73\xaf\xff\xbe\x7b\x7d\x39\x99\x7e\xea\xff\x31\x18\x0d\x37\xf5\xed\xc1\xba\xda\xc4\x4a\x64\x85\x28\x03\x9e\xff\x9c\x9e\x46\xc1\xce\x4a\x6d\x54\x7a\x5a\x93\x90\xc6\x95\x8a\x17\xde\xad\xb4\x42\xdf\x11\xeb\xd0\x18\xac\xe6\x33\x6d\xb9\xd2\xbe\x93\xb9\x82\x32\x69\x75\xfc\xdb\xde\x31\x4b\x67\xe7\x5b\x7b\x2c\x79\xb4\x5b\xa4\x54\x35\x88\xc7\xa4\x7c\x69\xa3\xc0\x3b\xca\xc9\x05\xfa\xa6\x92\x48\x6b\xe7\x17\xbc\x30\xe5\x9d\xb6\x1d\x69\x75\x6d\xf0\x78\xa7\x03\xa1\xe7\xb1\xd6\x1d\xf2\x25\x1e\x1a\xa2\xc4\x78\x8c\x4d\x8f\x4d\x98\x74\x07\xc3\xc9\x63\x97\xaa\x81\x75\x76\xae\xef\x3a\x87\x72\xd9\x5e\xa7\xf7\x62\x69\x9e\x78\x7e\x0f\x18\x75\xd5\xa0\xda\x51\x3b\xdb\xe9\x7f\xda\x1a\xb1\x96\x71\x2b\x55\x9a\xba\xf9\xed\x76\x93\xb0\x36\x6b\x76\x84\xf0\x7b\x38\xf6\x5f\x00\x00\x00\xff\xff\x57\xd1\x6e\x6e\xf3\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xc5, 0x2b, 0x94, 0xf9, 0xde, 0x80, 0xf4, 0xe1, 0x2e, 0x13, 0xf0, 0x26, 0x37, 0xbb, 0x1d, 0xf5, 0xc0, 0x4f, 0x92, 0xc8, 0x6f, 0xf7, 0xf4, 0x86, 0x5c, 0x61, 0xd0, 0x1, 0xc4, 0x8f, 0x7c}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
