// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xd1\x6a\xdb\x4a\x10\x7d\xd7\x57\x2c\x24\x0f\xf7\x82\x57\xe2\xe6\x5e\xee\x43\x40\x0f\xaa\xad\x04\x53\x55\x0e\x91\x43\x0b\x6d\x11\xe3\xdd\xb1\x33\x78\x35\x2b\x76\x57\x76\xd2\xe0\x7f\x2f\xb2\xac\xd6\xa1\xa1\xf4\x4d\xbb\x67\xe6\x9c\x33\xb3\x47\x17\x02\xb7\x5e\x05\x23\x7d\x8b\x8a\xd6\xa4\x84\x7f\xf6\x01\x1b\x2d\xb4\xb3\xad\x24\x16\x1d\x53\x10\x6b\xeb\xc4\xb6\x5b\xa1\xc1\x30\x39\x1e\xb2\x06\xbe\x59\x16\x05\x71\xf7\x24\xae\xc4\x5f\x59\x71\xf5\x77\x14\x7d\xae\xd0\xed\x48\xe1\xd7\xe8\x42\x14\x56\x81\x11\x0d\x06\xd0\x10\x40\xb4\xe0\xa0\xc1\x80\xce\x5f\x8b\xfb\xfc\x76\xbe\x28\x27\x22\xfb\x58\xd5\xb3\xfc\x26\x7b\x28\x96\xf5\x70\x17\xe5\xbc\x23\x67\xb9\x41\x0e\x37\x64\x30\x4d\x30\xa8\x64\xb0\x98\x8c\x5c\x31\xf2\x2e\xba\x10\xb7\xc6\xae\xc0\x08\x60\x2d\x7c\x80\x40\xea\x95\xc6\xb4\x78\xa8\x96\xf9\x7d\x3d\x2b\xab\x89\x28\x17\xb3\xbc\x2e\xb2\x77\x79\x31\x1e\x96\xd9\xbc\x5c\x56\xbf\x95\x3b\xcd\x7b\x52\x1b\xc6\x61\xcb\xf2\x0d\xb1\x23\xe5\xfc\x6e\x22\xe6\x65\xb5\xcc\xca\x69\x5e\xcf\x67\x7f\xc4\x6d\x7a\xd6\xa3\x42\x94\x3f\xa1\xaa\x02\xb8\x90\x9e\x7d\x26\x9d\x77\xc9\x8a\x78\x6c\x10\x5f\x22\x21\xa4\x64\xab\x51\x52\x9b\x5e\xbe\x9c\x94\x0f\xe7\x80\x81\x15\x1a\x3f\x82\xc3\xd8\x87\x09\x98\xf6\x11\xe2\x41\x3f\x26\x9b\x10\xfb\x00\xac\x50\x92\x4e\x2f\x5f\xce\x8c\x8f\x5c\x0d\x3c\xc9\xd6\xea\x9e\xe8\x43\xf6\xa9\xbe\x5b\xcc\xaa\x11\x72\xb8\x21\x1f\xd0\x1d\xf5\xd2\xe0\x3a\x3c\xbf\xdc\x53\x78\x94\x01\x88\xc3\x0f\x13\xc3\xba\xc7\x76\x30\xc6\xee\x65\xeb\x68\x47\x06\x37\xa8\x07\x86\x01\x53\xc6\x76\x5a\xb6\xce\xee\x48\xa3\x4b\x61\xef\x47\xc0\x72\xcf\x89\x4e\xba\x8e\x03\x35\x98\x6a\xab\xb6\xe8\xc6\xc9\x31\xec\xad\xdb\xca\xd6\x74\x1b\xe2\x54\x31\x8d\x7d\x4c\x72\x45\x2c\x35\xb9\x34\xb1\x6d\x48\x14\x53\xbf\xd2\x33\x58\x59\x5e\x0f\x78\xff\x44\x3d\xce\x18\x62\x7d\xaa\x68\xad\x96\xc4\x6b\x07\x67\x16\xa8\x81\x0d\xa6\x97\x2f\x7d\x82\xf3\xf7\x55\x9d\x4f\xef\xeb\x6c\x3a\x5d\x3c\x94\xcb\x43\xac\xb7\x2e\x46\xe5\xe2\x01\x7e\x1d\xf0\x43\x0c\xc7\x3f\x07\xf6\x3e\x56\xb6\xe9\xf3\x90\xb4\xd0\x79\x94\xd0\xe8\xff\xff\xbb\xfe\x37\xfe\xe7\x24\xdb\xbf\x78\x6f\x8c\x36\xbf\x24\x67\xb8\x8e\x9f\xa1\x31\x3f\x97\xf3\x56\x61\x1f\xb1\xbe\x2a\xfa\x1e\x00\x00\xff\xff\x5c\x3b\x51\x59\xe7\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 999, mode: os.FileMode(420), modTime: time.Unix(1566733901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x7f\x6f\xda\x46\x18\xfe\xff\x3e\xc5\x53\xd7\x6a\x82\x56\xc7\x6d\xd4\x4d\x6a\x12\x26\xb1\x84\x4c\x96\x18\xa0\xc2\xd6\x75\x09\x73\x0f\xfb\x25\x9c\x7a\xdc\x79\xbe\xd7\x24\x34\x63\x9f\x7d\x32\x60\x62\xb7\x89\x34\x55\xfb\x0b\xee\x7d\x9f\x7b\xfc\xfe\x7c\xee\xf9\xb3\x70\xaa\x4c\x38\x95\x6e\x2e\x84\x23\x46\x60\x41\x79\x4e\x77\x8a\xab\x63\xa6\x32\x9a\x49\xa5\xab\xb3\xb1\x85\x71\xc4\x42\xcc\x0a\x93\xb0\xb2\x06\x37\xc4\xf1\x42\xde\xc5\x99\x4d\xdd\x61\x0b\xf7\x02\xb8\x9d\x2b\x4d\xc8\x49\xa6\x50\xc6\xb1\x34\x09\xc5\xbc\xca\x08\x25\xe6\x14\xa9\x15\x00\xa0\x66\xc0\xd5\x15\x3c\xff\xbe\x01\x5a\x7b\x68\xb7\x4b\xeb\xeb\xb5\x87\xc9\x04\x2f\x5e\xec\x50\xe5\xe5\xd2\xf9\x0f\xfe\xbc\x7a\x15\xbc\x9d\x7c\xe7\x97\xee\x53\xf0\x9c\xcc\x86\x10\xa0\x64\x6e\xb1\x43\xee\x4c\x39\x71\x91\x6f\xfd\x33\x25\x80\xd4\x1a\xc2\x19\x42\xe2\x24\xa4\x4f\x2e\x61\x1d\x56\xd1\x1f\x2d\x64\x26\xd6\x42\x74\xcf\x8f\xe3\xce\x6f\x9d\xa8\x17\xff\x31\xe8\x77\xdb\xfe\x61\x52\xe4\x1a\x81\xc3\x9c\x39\x3b\x09\xc3\xd7\x3f\xbc\x3d\x3a\xfe\xfe\xcd\xd1\xee\x37\xd4\x92\xc9\x71\xb8\x20\x96\x41\x2a\x59\x86\x99\x96\x09\x2d\xc8\x70\x28\x97\x52\x69\x39\x55\x5a\xf1\x2a\xf8\x6c\x0d\xb5\x44\xe7\xfd\x28\xbe\xe8\x5e\x76\x7e\xed\x8d\xe3\x77\xdd\x9f\xa3\x41\xbf\xed\x7d\xdc\x04\x7e\xed\xf9\xcd\x4f\x5f\x7b\xf8\x1b\x8e\x52\x1c\xb8\xf0\x4a\x06\x9f\x27\x7e\x18\x1e\x7c\xf4\x44\x7f\x70\xd1\x8d\xa3\x61\xdb\xab\x42\x0b\x9c\xd2\x64\xf8\x3f\x07\xa8\x6d\x22\x75\xa0\xb2\xe5\x9b\x96\x27\xa2\xfe\x68\xdc\xe9\x9f\x77\xe3\xe8\xe2\xdb\x19\xab\x16\x06\x2a\xad\x53\x8e\x3f\x0c\xbb\xff\x03\x69\x39\x17\x2d\x4f\x08\x67\x8b\x3c\xa1\x46\xf3\x3e\x15\x53\xd2\xc4\x47\x64\x96\x78\x0e\x9e\x2b\x87\x44\x1a\xd8\x25\xe5\xb9\x4a\x09\xbf\x74\x7e\x8f\x87\x83\x8b\x91\x10\x61\x38\x1e\x5c\x0c\x4e\x10\xa5\x24\xb5\x5e\x6d\xb1\x2e\xc9\x55\xc6\x70\x73\x5b\xe8\x14\xc6\x32\x12\xa9\x35\x5e\x20\xa5\x8c\x4c\xea\x60\x4d\x39\x60\xe8\xbc\x1f\xa1\x33\x8c\x0e\x9c\x08\xc3\xb9\xbd\xa5\x25\xe5\x50\x0c\xe5\x36\x5e\x6b\xf4\x0a\xb7\x72\x05\xc9\x9b\xf3\xc2\x96\xdd\x07\x5b\xd8\x29\x4b\xb5\xa5\xa8\xb2\xe9\xa9\x19\x25\xab\x44\x13\x96\x52\x17\x84\xc3\x51\x66\x39\xb4\x26\x48\x69\x21\x4d\xda\xda\x07\x3a\x2e\x03\x94\xce\x15\x0b\x72\x0d\x06\x48\x5d\x2e\xd7\x0a\x73\xe9\x20\x91\x5b\x4d\x61\x92\x53\x4a\x86\x95\xd4\x0e\x87\xd2\x95\xc1\xed\x92\xba\x9d\x93\x41\x62\x8d\xa1\x84\x95\xb9\x69\x89\x87\xf6\xf4\xa2\xcb\xee\xf9\x87\xf3\xde\xa6\x47\xf2\xd6\x81\x92\x63\xa4\x54\x16\x65\x4a\x41\xf5\x39\x87\x20\xc8\xe9\xa6\x5c\x76\xff\xeb\xe9\x45\x10\xd4\x9a\xef\xe0\xdf\xd7\x06\x6a\x8d\x6b\x11\x04\x7f\x15\x94\xaf\x70\xf0\x8e\x1c\xe5\x4b\x59\xaa\x86\xbb\x7a\x35\x39\x8a\x2a\xfe\xfa\x61\x5f\x9d\x03\x04\x81\x2d\x38\x2b\x18\x4c\x77\xdc\xf2\x84\x9a\xa1\x14\x82\xaf\xa3\xdf\x2a\x86\xcb\x2c\x7b\xd8\x0a\x06\x3c\x7f\x34\x1c\x8c\xe3\xcd\xa6\xf4\x3a\x3f\x75\x7b\x23\x0f\xcf\xda\xf0\x3c\x60\xb2\x97\x8c\x1d\x61\x03\xd4\xde\x80\x26\xa7\x0f\xaa\x52\x73\xb7\x3d\xff\xfe\x4b\xde\xb5\x27\x00\xd2\x8e\x1e\x45\xd7\x81\x2f\x9f\xb8\x3c\x53\x62\xa6\xc4\x37\xa7\x37\xee\x44\xfd\xf1\x3e\xbd\xc7\xb3\xab\x30\x4f\x64\xb7\x75\x37\xb3\xdb\xda\x1e\xcb\xee\x01\x5d\x07\xbe\x7c\xe2\xf2\x2e\xbb\x44\x32\x7e\x7c\x74\x73\x37\x62\xb4\xd9\xdf\xb3\xb3\xee\xe0\x72\xaf\x6e\x3b\xfa\x68\xb8\x6e\x48\x54\x73\xbe\xbe\x90\x9a\x9a\xb3\x3c\xaf\x45\xb5\xfe\x6d\xff\xbe\xfa\x7b\x12\xf8\x87\xf5\x47\xab\x7c\x5b\x9a\xb7\xbc\xd6\x5a\xd4\xfb\xd8\x6c\xa3\xa8\x17\xa1\x59\x03\x51\xc6\x2f\xdc\xca\x31\x2d\x12\xd6\x48\x25\x2d\xac\x09\x72\xd2\x56\xa6\x35\x3b\x19\x39\xd5\x84\x5d\x05\x6a\x0e\xc7\x32\xe7\xbd\xfd\xdf\x00\x00\x00\xff\xff\x51\xef\x7a\xb1\xa0\x07\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 1952, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x6f\x6f\xdb\xb6\x13\x7e\xcf\x4f\x71\x55\x8d\x26\xc6\x2f\x94\xda\xfc\xba\x02\x4d\xaa\x61\x5e\xe2\x0e\xc6\xbc\x38\x68\xdc\x6d\x5d\xea\xb9\xb4\x74\xb6\x89\x50\xa4\x46\x9e\xec\xa4\x99\xf7\xd9\x07\xea\x8f\x23\x67\x49\x31\x14\x7b\x65\x91\xcf\x73\xc7\xbb\xe3\x73\x47\x3f\x7d\x12\xcd\xa4\x8e\x66\xc2\x2d\x19\x73\x48\xc0\x0d\xa0\xb5\x78\x2d\xa9\x59\xe6\x32\xc7\xb9\x90\xaa\x59\x6b\x53\x68\x87\xc4\xd8\xbc\xd0\x09\x49\xa3\x61\x81\x34\xcd\xc4\xf5\x34\x37\xa9\xdb\xef\xc2\x2d\x03\x58\x2f\xa5\x42\xb0\x28\x52\x90\xda\x91\xd0\x09\x4e\xe9\x26\x47\xf0\x9c\x63\x48\x0d\x03\x00\x90\x73\x80\xcb\x4b\x08\x3a\xb7\x3b\xa4\x4d\x00\x71\xec\x77\x5f\x6c\x02\x98\x4c\xe0\xd9\xb3\x9a\xe5\x8d\x3d\xf8\x17\xfc\x7e\xf9\x9c\xbf\x9e\xfc\xaf\xe3\xe1\x63\xa0\x25\xea\xd2\x21\x00\x26\x4b\x03\x35\xf3\xb8\xde\xb3\x48\x85\xad\x08\x73\xc9\x00\x52\xa3\x11\xde\x40\x84\x94\x44\x78\xe5\x12\x52\x51\x13\x7e\x98\x89\x9c\x6d\x18\xeb\x9f\x1c\x4e\x7b\x3f\xf7\x06\xc3\xe9\x6f\xa3\xb3\x7e\xdc\xd9\x4f\x0a\xab\x80\x3b\x58\x12\xe5\x47\x51\xf4\xe2\xd5\xeb\xf0\xf0\x9b\x97\x61\xfd\x1b\x29\x41\xe8\x28\xca\x90\x04\x4f\x05\x89\x28\x57\x22\xc1\x0c\x35\x45\x62\x25\xa4\x12\x33\xa9\x24\xdd\xf0\xcf\x46\x63\x97\xf5\x7e\xb9\x98\x9e\xf6\xdf\xf6\xde\x0f\xc7\xd3\x77\xfd\x1f\x06\xa3\xb3\x38\xf8\x54\x46\xfe\x31\xe8\xec\x1e\xfd\x31\x80\x3f\xc1\x61\x0a\x7b\x2e\xba\x14\xfc\xf3\xa4\x13\x45\x7b\x9f\x02\x76\x36\x3a\xed\x4f\x07\xe7\x71\xd0\x84\xc6\x9d\x54\xa8\xe9\x5f\x07\xa8\x4c\x22\x14\x97\xf9\xea\x65\x37\x60\x83\xb3\x8b\x71\xef\xec\xa4\x3f\x1d\x9c\x7e\xbd\xc7\xe6\x0e\xb9\x4c\xdb\x2e\xc7\x1f\xce\xfb\xff\x81\x53\x2f\x8c\x6e\xc0\x98\x33\x85\x4d\x70\xe7\xf2\xae\x8a\x19\x2a\xa4\x10\xf5\x0a\x9e\x02\x2d\xa5\x83\x44\x68\x30\x2b\xb4\x56\xa6\x08\x3f\xf5\x7e\x9d\x9e\x8f\x4e\x2f\xd8\x5d\x50\xc3\xc1\xdb\xfe\xc9\x87\x93\xa1\xbf\x5a\xb1\x76\x80\xc9\x21\xa4\xe8\x12\x2b\x67\xc8\x9b\x33\x1d\x70\xde\x4a\xca\x01\x74\x6e\x5b\x95\xda\x00\x70\xfe\x47\x81\xf6\x06\xf6\xde\xa1\x43\xbb\x12\xbe\x1d\xdc\xe5\xf3\x49\x38\x68\x5c\xb4\x17\x43\x39\xc7\xe4\x26\x51\xb8\x07\x9c\x9b\x82\xf2\x82\x80\xf0\x9a\xba\x4c\xce\xc1\x0b\xfc\x9f\xe1\x55\x9d\xe0\x72\x43\x01\x54\x8d\x00\x41\xe7\xe2\x7c\x34\x9e\x96\x02\x18\xf6\xbe\xef\x0f\x2f\x02\x78\x12\x43\x10\x00\x4c\xb6\xad\x50\x3b\xdc\x21\xc5\x25\x69\x72\x7c\xd7\x2d\x2d\x38\x0e\x3a\xb7\xf7\xfd\x6e\x02\x06\x80\xca\xe1\x83\xec\x36\xf1\xe0\x11\xe3\xb9\x64\x73\xc9\xbe\x3a\xbd\x71\x6f\x70\x36\xde\xa6\xf7\x70\x76\x0d\xe7\x91\xec\x2a\x78\x37\xbb\x6a\xef\xa1\xec\xee\xd8\x6d\xe2\xc1\x23\xc6\x75\x76\x89\x20\xf8\xf6\x41\x41\x96\x3d\x56\xca\xf2\xcd\x9b\xfe\xe8\xed\xb6\x69\x6b\xf7\x83\xf3\xcd\x4e\xe7\xed\xaa\xeb\x5e\x07\xb5\x40\xbf\xde\xb0\x46\xd5\x71\xe7\xb6\xf9\x3c\xe2\x9d\xfd\xf6\x30\xf6\x33\x73\xd7\x2a\xe8\x6e\x58\xfb\x1e\x77\xaf\x91\xb5\x8b\xb0\x5b\x03\xe6\xe3\x67\x4e\x8b\x1c\x84\x92\xc2\x41\x9d\x23\xc7\x2b\x17\xd6\xdf\xcd\xde\x7d\x5a\x42\x6a\x4b\x4b\x48\x35\x7b\x15\xcd\x91\xc9\xdb\xce\x98\xbb\x71\x84\x99\xe7\x59\x74\x48\xdc\xbf\x3d\x98\x32\xb6\xcf\x00\x9e\xc2\x78\x74\x3a\x3a\xf2\x3a\x70\x08\x6e\x69\x0a\x95\xc2\x0c\x41\x19\x73\x85\x29\x08\x02\x5c\xf9\x7e\x24\x99\x61\xe3\x14\x1c\x09\x4b\x0e\x8a\xfc\xa0\xf4\xb0\x5e\xca\x64\x09\xd2\xc1\x7a\x29\x08\xd6\x08\xa9\x01\xa9\xa1\x37\x3c\x84\xfd\x2d\x36\x13\x7e\xe6\x1a\x0d\xb9\x12\x52\x43\x15\x53\x5a\x39\x10\x3a\x85\x0c\x85\x26\x20\xe3\x0f\xcf\x8d\x25\x31\x53\xe8\x97\x99\x71\xd4\xb0\x21\x95\x8e\xac\x71\xdd\x03\x98\x15\x04\x92\xf6\x5c\x69\xaf\x0d\x41\xa2\x50\x58\x58\x9a\xb5\x37\x52\x46\xa4\x75\x4a\x73\x6b\xb2\xbb\xc0\x7d\x7d\xd6\x92\x96\xa6\x20\x58\x8a\x95\xd4\x8b\xd2\x01\x19\x48\x0a\x47\x26\x93\x0e\xbd\x5d\x45\x94\xe4\x50\xcd\x19\xc0\x17\x26\xe4\x56\x90\x5f\xa6\x3d\x4a\xf0\x73\xd9\x8f\xe5\x92\xe1\x3b\x40\x89\x85\x8b\xf7\xcb\x0e\x0a\xb4\x49\x91\xcb\xbc\xa5\xee\xa0\x02\x32\x71\xcd\xbd\x1c\x5b\x4a\x6d\xa0\xd2\x46\x89\x19\x2a\x77\x4f\x8b\x07\x42\xe5\x4b\x11\x56\x07\x87\xd2\xb4\x9f\x97\x7b\x9d\x52\xfb\x12\x4a\x99\x35\xcf\xad\x5c\x49\x85\x0b\x4c\x63\xb2\x05\xd6\x58\x6e\x52\x2e\xf5\xdc\x0a\x9e\x18\x4d\x42\x6a\xb4\x5c\x66\x62\x81\x71\xe7\xd6\xbf\xc6\xfd\x1f\x2f\xa6\xfd\x93\x77\xd3\xde\xc9\xc9\xe8\xfd\xd9\x78\x13\xa6\x57\x36\xc4\xc4\x86\x15\xbc\xfb\x58\x6f\x42\x91\x89\xcf\x46\x8b\xb5\x0b\x13\x93\xf9\xe2\x44\xb9\x28\x1c\x72\x91\xa5\xaf\x5e\x1e\xfd\x3f\x7c\x51\x1f\x9b\x28\x53\xa4\x3c\xb7\x66\x25\x53\xb4\xb1\x58\xbb\x06\xd0\x92\xcf\xa4\xe6\xa9\xb4\x71\x64\x72\x8a\x12\x2d\xfd\x3f\xb1\x16\x9c\x18\x3d\xaf\x70\x7f\x01\x1e\xd7\x48\x61\xda\x30\xb6\x69\xd8\x42\x7b\xb9\xc7\xa9\x49\xae\xd0\x36\x75\x45\x5a\x1b\x7b\xc5\x73\x55\x2c\xa4\x8e\x13\x2d\x6b\xc0\xe2\x42\x3a\x42\xcb\x7d\xe5\xdb\x15\xda\x02\x5e\x70\xdc\xfb\x26\x77\x6f\x06\xd4\xcc\xb2\x7d\x8d\x9e\xcb\x45\x7c\x5f\x3c\xd5\x76\x78\x23\x32\x75\x17\xe7\x43\x44\xaf\xb2\x86\xd5\xf5\x4a\xaa\x66\xc1\xdd\x0c\xf1\xa3\xc0\x8f\xaf\x52\x61\x97\xdf\x4d\x36\x01\xeb\xb2\x66\x62\x08\xbb\xc3\x63\x7f\x07\x00\x00\xff\xff\x6a\x48\x0f\xc0\xc6\x0a\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2758, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

