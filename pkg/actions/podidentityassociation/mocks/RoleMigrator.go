// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	podidentityassociation "github.com/weaveworks/eksctl/pkg/actions/podidentityassociation"

	tasks "github.com/weaveworks/eksctl/pkg/utils/tasks"
)

// RoleMigrator is an autogenerated mock type for the RoleMigrator type
type RoleMigrator struct {
	mock.Mock
}

// UpdateTrustPolicyForOwnedRoleTask provides a mock function with given fields: ctx, roleName, serviceAccountName, stack, removeOIDCProviderTrustRelationship
func (_m *RoleMigrator) UpdateTrustPolicyForOwnedRoleTask(ctx context.Context, roleName string, serviceAccountName string, stack podidentityassociation.IRSAv1StackSummary, removeOIDCProviderTrustRelationship bool) tasks.Task {
	ret := _m.Called(ctx, roleName, serviceAccountName, stack, removeOIDCProviderTrustRelationship)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustPolicyForOwnedRoleTask")
	}

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, podidentityassociation.IRSAv1StackSummary, bool) tasks.Task); ok {
		r0 = rf(ctx, roleName, serviceAccountName, stack, removeOIDCProviderTrustRelationship)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.Task)
		}
	}

	return r0
}

// UpdateTrustPolicyForUnownedRoleTask provides a mock function with given fields: ctx, roleName, removeOIDCProviderTrustRelationship
func (_m *RoleMigrator) UpdateTrustPolicyForUnownedRoleTask(ctx context.Context, roleName string, removeOIDCProviderTrustRelationship bool) tasks.Task {
	ret := _m.Called(ctx, roleName, removeOIDCProviderTrustRelationship)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustPolicyForUnownedRoleTask")
	}

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) tasks.Task); ok {
		r0 = rf(ctx, roleName, removeOIDCProviderTrustRelationship)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.Task)
		}
	}

	return r0
}

// NewRoleMigrator creates a new instance of RoleMigrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleMigrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleMigrator {
	mock := &RoleMigrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
