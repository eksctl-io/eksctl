// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/eksctl/pkg/outposts"
)

type FakeOutpostInstance struct {
	GetInstanceTypeStub        func() string
	getInstanceTypeMutex       sync.RWMutex
	getInstanceTypeArgsForCall []struct {
	}
	getInstanceTypeReturns struct {
		result1 string
	}
	getInstanceTypeReturnsOnCall map[int]struct {
		result1 string
	}
	SetInstanceTypeStub        func(string)
	setInstanceTypeMutex       sync.RWMutex
	setInstanceTypeArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOutpostInstance) GetInstanceType() string {
	fake.getInstanceTypeMutex.Lock()
	ret, specificReturn := fake.getInstanceTypeReturnsOnCall[len(fake.getInstanceTypeArgsForCall)]
	fake.getInstanceTypeArgsForCall = append(fake.getInstanceTypeArgsForCall, struct {
	}{})
	stub := fake.GetInstanceTypeStub
	fakeReturns := fake.getInstanceTypeReturns
	fake.recordInvocation("GetInstanceType", []interface{}{})
	fake.getInstanceTypeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOutpostInstance) GetInstanceTypeCallCount() int {
	fake.getInstanceTypeMutex.RLock()
	defer fake.getInstanceTypeMutex.RUnlock()
	return len(fake.getInstanceTypeArgsForCall)
}

func (fake *FakeOutpostInstance) GetInstanceTypeCalls(stub func() string) {
	fake.getInstanceTypeMutex.Lock()
	defer fake.getInstanceTypeMutex.Unlock()
	fake.GetInstanceTypeStub = stub
}

func (fake *FakeOutpostInstance) GetInstanceTypeReturns(result1 string) {
	fake.getInstanceTypeMutex.Lock()
	defer fake.getInstanceTypeMutex.Unlock()
	fake.GetInstanceTypeStub = nil
	fake.getInstanceTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeOutpostInstance) GetInstanceTypeReturnsOnCall(i int, result1 string) {
	fake.getInstanceTypeMutex.Lock()
	defer fake.getInstanceTypeMutex.Unlock()
	fake.GetInstanceTypeStub = nil
	if fake.getInstanceTypeReturnsOnCall == nil {
		fake.getInstanceTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getInstanceTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeOutpostInstance) SetInstanceType(arg1 string) {
	fake.setInstanceTypeMutex.Lock()
	fake.setInstanceTypeArgsForCall = append(fake.setInstanceTypeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetInstanceTypeStub
	fake.recordInvocation("SetInstanceType", []interface{}{arg1})
	fake.setInstanceTypeMutex.Unlock()
	if stub != nil {
		fake.SetInstanceTypeStub(arg1)
	}
}

func (fake *FakeOutpostInstance) SetInstanceTypeCallCount() int {
	fake.setInstanceTypeMutex.RLock()
	defer fake.setInstanceTypeMutex.RUnlock()
	return len(fake.setInstanceTypeArgsForCall)
}

func (fake *FakeOutpostInstance) SetInstanceTypeCalls(stub func(string)) {
	fake.setInstanceTypeMutex.Lock()
	defer fake.setInstanceTypeMutex.Unlock()
	fake.SetInstanceTypeStub = stub
}

func (fake *FakeOutpostInstance) SetInstanceTypeArgsForCall(i int) string {
	fake.setInstanceTypeMutex.RLock()
	defer fake.setInstanceTypeMutex.RUnlock()
	argsForCall := fake.setInstanceTypeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOutpostInstance) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInstanceTypeMutex.RLock()
	defer fake.getInstanceTypeMutex.RUnlock()
	fake.setInstanceTypeMutex.RLock()
	defer fake.setInstanceTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOutpostInstance) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ outposts.OutpostInstance = new(FakeOutpostInstance)
