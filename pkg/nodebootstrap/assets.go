// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (982B)
// assets/bootstrap.al2.sh (1.2kB)
// assets/bootstrap.ubuntu.sh (2.022kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdf\x6f\xd3\x30\x10\x7e\xcf\x5f\x61\x69\x7d\x00\xa9\x4e\xc4\x78\x9b\x94\x87\x90\x66\x23\x22\x4b\xa7\xa6\x03\x24\x40\x91\x6b\x5f\xbb\x53\x9d\x73\xe4\x38\xdd\x46\xd5\xff\x1d\xb9\x69\xa0\x13\x13\xe2\xcd\xbe\xef\xee\xfb\xbe\xfb\x71\xc1\x60\xdb\x49\xa7\x79\xd7\x82\xc4\x35\x4a\xd6\x3d\x77\x0e\x1a\xc5\x94\x35\x2d\x47\x62\x3d\xa1\x63\x6b\x63\xd9\xb6\x5f\x81\x06\x37\x3d\x7e\x92\x46\xfc\x34\xc4\x0a\xa4\xfe\x89\x5d\xb2\x37\x49\x71\xf9\x36\x08\xbe\x55\x60\x77\x28\xe1\x47\x70\xc1\x0a\x23\x85\x66\x0d\x38\xa1\x84\x13\xac\x15\x56\x34\xe0\xc0\x76\x57\x6c\x91\xdd\xe4\xf3\x72\xca\x92\x2f\x55\x3d\xcb\xae\x93\xfb\x62\x59\x0f\xb1\x20\xa3\x1d\x5a\x43\x0d\x90\xbb\x46\x0d\x71\x04\x4e\x46\x83\xc5\x68\xe4\x0a\x81\x76\xc1\x05\xbb\xd1\x66\x25\x34\x13\xa4\x58\xe7\x84\x43\xf9\x42\x23\x2d\xee\xab\x65\xb6\xa8\x67\x65\x35\x65\xe5\x7c\x96\xd5\x45\xf2\x21\x2b\xc6\xcf\x32\xc9\xcb\x65\xf5\x4f\xb9\x53\xbf\x27\xb5\xa1\x1d\x32\xc4\x5f\x11\x3b\x52\xe6\x77\x53\x96\x97\xd5\x32\x29\xd3\xac\xce\x67\xff\xc5\xad\x3d\xeb\x51\x21\xc8\x9e\x40\x56\x4e\x58\x17\x9f\x3d\xa3\xbe\xb3\xd1\x0a\x69\x2c\x60\xdf\x03\xc6\x38\x27\xa3\x80\x63\x1b\x4f\xf6\x27\xe5\xc3\x39\xa0\xc5\x0a\x74\x37\x82\x43\xdb\x87\xa9\xd0\xed\x83\x08\x07\xfd\x10\x4d\x84\xd4\x39\x41\x12\x38\xaa\x78\xb2\x3f\x33\x3e\x72\x35\xe2\x89\xb7\x46\x79\xa2\xdb\xe4\x6b\x7d\x37\x9f\x55\x23\x64\x61\x83\x9d\x03\x7b\xd4\x8b\x9d\xed\xe1\x3c\xf8\x88\xee\x81\x3b\x81\xe4\x7e\x9b\x18\xc6\x3d\x96\x4b\x6d\x7a\xc5\x5b\x6b\x76\xa8\xc0\xc6\xe2\xb1\x1b\x01\x43\xbe\x0e\x2c\xb7\x3d\x39\x6c\x20\x56\x46\x6e\xc1\x8e\xdd\x81\x7b\x34\x76\xcb\x5b\xdd\x6f\x90\x62\x49\x38\xd6\x11\xf2\x15\x12\x57\x68\xe3\xc8\xb4\x2e\x92\x84\x7e\x6c\x67\xb0\x34\xb4\x1e\x70\xbf\x06\x8f\x13\xb8\x50\x9d\x32\x5a\xa3\x38\xd2\xda\x8a\x33\x0b\xd8\x88\x0d\xc4\x93\xbd\xbf\xd2\xec\x53\x55\x67\xe9\xa2\x4e\xd2\x74\x7e\x5f\x2e\x0f\xa1\xda\xda\x10\xa4\x0d\x07\xf8\xe5\x11\x1f\x4e\xd1\x2a\x5b\x7c\xce\xd3\xac\xaa\x67\xf3\xdb\x24\x2f\x0f\x7e\xf9\x51\x2b\xfa\x0e\xf8\x64\x9f\x2c\xd2\x8f\x87\xab\xf7\xe1\xbb\x93\x03\xbf\x60\xef\x11\x37\x7f\x1d\xca\x10\x0e\x9f\x45\xa3\xff\xcc\xe9\xb5\x44\x7f\x51\x3e\x2b\xf8\x15\x00\x00\xff\xff\x5b\x08\x1a\xba\xd6\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x99, 0xdb, 0x6d, 0x46, 0x69, 0x8a, 0xf5, 0x84, 0xe3, 0x6a, 0xe7, 0xca, 0x7b, 0x3f, 0xc5, 0xd3, 0xea, 0xd8, 0xe2, 0xc2, 0xf2, 0x9, 0x14, 0x55, 0x10, 0x30, 0x2e, 0xca, 0x69, 0x53, 0x21}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x6f\xe2\x3a\x10\x7d\xf7\xaf\x98\x9b\x46\x2d\xe8\x2a\xe4\xb6\xe2\xa2\xdb\x0f\x2a\x21\xe0\xaa\x3c\x14\xaa\x52\xed\x87\x2a\x36\x32\xce\x64\x63\xd5\xb1\x23\x7b\xc2\xb6\x8a\xb2\xbf\x7d\x15\x1a\xaa\xb0\xcb\xbe\x54\xfb\x14\xcf\x9c\x39\x67\x9c\x99\xe3\xa3\xbf\xc2\xb5\xd4\xe1\x9a\xbb\x94\x31\x87\x04\x81\x01\xb4\x16\x9f\x25\xed\xc2\x5c\xe6\x98\x70\xa9\x76\xb1\x36\x85\x76\x48\x8c\x25\x85\x16\x24\x8d\x86\xaf\x48\x51\xc6\x9f\xa3\xdc\xc4\xae\xd3\x85\x92\x01\x7c\x4b\xa5\x42\xb0\xc8\x63\x90\xda\x11\xd7\x02\x23\x7a\xc9\x11\xea\x9a\x4b\x88\x0d\x03\x00\x90\x09\xc0\xe3\x23\x78\x7e\xb9\x57\x54\x79\x30\x1c\xd6\xd9\xd3\xca\x83\xd5\x0a\x8e\x8f\x9b\xaa\x9a\x5c\x83\xdf\xe1\xcb\xe3\x3f\xc1\xf9\xea\x6f\xbf\x86\x2f\x81\x52\xd4\x5b\x41\x00\x14\xa9\x81\xa6\xb2\x49\x59\xa4\xc2\xbe\xe2\x89\x64\x00\xb1\xd1\x08\x57\x10\x22\x89\x10\x9f\x9c\x20\x15\xee\x6e\xdf\xcb\x78\xce\x2a\xc6\xe6\x8b\xc9\x34\x9a\xdd\x0d\x3d\xbf\x23\x0a\xab\x20\x08\x9c\x54\xa8\x09\x52\xa2\xfc\x22\x0c\x4f\x07\xe7\xbd\xb3\x7f\xfb\xbd\xe6\x1b\x2a\x4e\xe8\x28\xcc\x90\x78\x10\x73\xe2\xa1\x32\x82\xab\x40\xe6\x9b\x7e\xd7\x63\xb3\xf9\xf2\x61\x34\x1f\x4f\xa3\xd9\xe4\xfd\x8a\xbb\x09\x05\x32\x6e\x4b\x3e\x7c\xbe\x9b\xfe\x01\xd1\x7a\xec\x5d\x8f\xdd\x8e\xc6\x37\xb3\xf9\x74\xe8\x77\x0a\xcd\x33\x84\x20\xeb\xb2\xd1\xc7\x65\xb4\x9c\xde\x7f\x98\x8d\xa7\xcb\x68\xb2\xb8\x1d\xcd\xe6\xef\x6f\xe8\xd0\x6e\xa4\x40\x17\xc6\x26\xe3\x52\x77\x3d\xc6\x64\x02\xf5\x72\x9b\xd6\xaf\xab\x7f\xfe\x6f\x10\x0d\xfa\x1e\xac\x5a\xbb\x1d\xdd\x8f\x6f\x86\x1e\xcf\xe2\x41\xdf\x63\xa8\x0e\xd1\x38\xb7\x22\xfd\x0d\xcf\x66\xaf\x3c\x87\xbf\xaa\xbd\x19\xc7\x5b\x22\x41\x8c\x09\x2f\x14\x41\x2d\x26\x09\x05\x15\x16\x81\x0c\x9c\xf8\x35\xe9\xc4\x83\xeb\xe3\x33\x96\x48\xc6\x9c\x29\xac\xc0\x3d\x23\x3d\x15\x6b\x54\x48\x3d\xd4\x1b\x38\x02\x4a\xa5\x03\xc1\x35\x98\x0d\x5a\x2b\x63\x84\xdb\xd1\xa7\xe8\x6e\x31\x59\x32\x26\x38\xc1\xf5\x41\xee\xd6\x3b\x5b\x85\xab\xab\xe9\xe2\xff\x37\x33\xfa\x65\x73\xaa\xf6\x1c\xe5\x97\xad\xa8\xfa\xc9\x19\x2d\xb0\x8e\xab\x83\xdb\xf4\xcb\x03\xd9\x8a\xed\xee\x3a\xf4\xcb\xdd\xf1\x22\xf0\x3b\xed\xd7\x5e\x3f\xca\xfd\x06\x5e\xb7\x62\xdb\xd9\xfa\x65\xfd\xa9\x58\xfd\x07\xcc\xbd\x38\xc2\x4c\x90\x82\x98\x63\x66\x74\x60\x51\x19\x1e\xb7\xf2\xa8\xf9\x5a\x21\x34\x33\x68\x01\x8e\xb8\xa5\xb7\xfc\x8f\x00\x00\x00\xff\xff\x18\xaa\xe1\x83\xb0\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xad, 0x5d, 0xd8, 0xcb, 0x57, 0x86, 0xff, 0xb1, 0xae, 0x2f, 0xdc, 0x4a, 0x43, 0xaf, 0xb7, 0xb2, 0xa3, 0x97, 0xd9, 0xc5, 0xc0, 0xc6, 0xbe, 0xe6, 0x83, 0x41, 0xf5, 0xf2, 0xec, 0x65, 0x33}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xef\x6f\xe2\x46\x10\xfd\xbe\x7f\xc5\x94\x43\x57\x50\xcf\x76\x73\x4d\x4f\xba\x24\xae\x4a\x03\x57\xa1\xe6\x20\x0a\x5c\x7f\x28\x4a\xd1\xb2\x3b\xe0\x15\xeb\x5d\x6b\x77\x0c\x89\x90\xfb\xb7\x57\x0b\x36\x21\xe8\x7a\x1f\x4e\xfd\x84\x77\xde\x9b\xe7\xf1\xec\x9b\xe1\xd5\x37\xc9\x5c\x99\x64\xce\x7d\xc6\x98\x47\x82\xc8\x02\x3a\x87\x8f\x8a\x9a\x63\xa1\x0a\x5c\x70\xa5\x9b\xb3\xb1\xa5\xf1\x48\x8c\x2d\x4a\x23\x48\x59\x03\x4b\xa4\x59\xce\x1f\x67\x85\x95\xbe\xd3\x85\x2d\x03\xd8\x64\x4a\x23\x38\xe4\x12\x94\xf1\xc4\x8d\xc0\x19\x3d\x15\x08\x81\x73\x09\xd2\x32\x00\x00\xb5\x00\xb8\xbf\x87\x56\x7b\xfb\x82\x54\xb5\x20\x4d\x43\xf4\xac\x6a\xc1\xc3\x03\xbc\x7e\x5d\xb3\x42\x72\x00\xff\x81\xbf\xef\xbf\x8f\xde\x3f\x7c\xd7\x0e\xf0\x25\x50\x86\x66\x27\x08\x80\x22\xb3\x50\x33\x2f\xeb\x98\x43\x2a\xdd\x9e\xb0\x50\x0c\x40\x5a\x83\x70\x05\x09\x92\x48\x70\xe5\x05\xe9\xa4\x29\x3f\xce\x79\xc1\x2a\xc6\x46\xe3\xfe\x60\x36\xbc\x4d\x5b\xed\x8e\x28\x9d\x86\x28\xf2\x4a\xa3\x21\xc8\x88\x8a\x8b\x24\x39\x7b\xf7\x3e\x7e\xfb\xe3\x79\x5c\xff\x26\x9a\x13\x7a\x4a\x72\x24\x1e\x49\x4e\x3c\xd1\x56\x70\x1d\xa9\x62\x7d\xde\x6d\xb1\xe1\x68\x32\xed\x8d\xae\x07\xb3\x61\xff\xeb\x15\x9b\x16\x45\x4a\x1e\x4b\x4e\xff\xba\x1d\xfc\x0f\xa2\xa1\xef\xdd\x16\xeb\xfd\x31\x99\x4d\x06\x77\xbf\x0f\xaf\x07\x93\x59\x7f\xfc\xb1\x37\x1c\x7d\xbd\xb8\x47\xb7\x56\x02\x7d\x22\x6d\xce\x95\xe9\xb6\x18\xf3\xb6\x74\x02\x5f\xb4\x7e\x55\xce\x51\x23\xc5\x68\xd6\xf0\x0a\x28\x53\x1e\x04\x37\x60\xd7\xe8\x9c\x92\x08\x1f\x7b\x7f\xce\x6e\xc7\xfd\x09\x63\x82\x13\xfc\xf4\xd9\xdc\x5d\xb7\x77\x0a\x57\x57\x83\xf1\x87\xc3\xf5\xb5\xb7\xf5\x53\xf5\xe2\x0e\xda\xdb\xa3\x53\x75\xd2\xcb\x23\x30\x9c\x2b\xd6\x14\x90\xb6\xb7\xcd\xe3\x45\xd4\xee\x1c\xbb\x3e\x98\xf3\x65\x56\xab\x5b\xb1\x50\x09\xf3\x86\x17\xc0\xb5\xe2\x1e\xea\x6a\x23\x5c\xf9\xb8\x7e\x6e\x62\xa7\x34\x41\xfa\x40\x13\xa4\x9b\xd8\x9e\xe6\xc9\x16\xc7\x62\xcc\x3f\x79\xc2\x3c\xf0\x1c\x7a\xa4\x28\x8c\x2b\x4a\xc6\x3a\x0c\xe0\x15\x4c\xc7\xfd\xf1\x45\x98\x11\x8f\xe0\x33\x5b\x6a\x09\x73\x04\x6d\xed\x0a\x25\x70\x02\x5c\xa3\x7b\x02\x52\x39\x36\xa2\xe0\x89\x3b\xf2\x50\x16\x6f\x76\x0a\x9b\x4c\x89\x0c\x94\x87\x4d\xc6\x09\x36\x08\xd2\x82\x32\xd0\xbb\x79\x0b\x9d\x03\x36\xe7\x1e\x25\x58\x03\x85\xe6\xca\xc0\xbe\x26\xb9\x17\xe0\x46\x42\x8e\xdc\x10\x90\x0d\x2f\x2f\xac\x23\x3e\xd7\x18\x8e\xb9\xf5\xd4\xb0\x41\x2a\x4f\xce\xfa\xee\x1b\x98\x97\x04\x8a\xbe\xf5\xbb\x7c\x63\x09\x84\x46\xee\x20\xb3\x9b\x90\xa4\x2d\x97\xf5\x27\x2d\x9c\xcd\x9f\x0b\x0f\xfd\xd9\x28\xca\x6c\x49\x90\xf1\xb5\x32\xcb\x9d\x00\x59\x10\xa5\x27\x9b\x2b\x8f\x21\x6f\x4f\x54\xe4\x51\x2f\x18\xc0\x17\x6c\x79\xb0\xd6\x97\x69\xff\x49\x08\xe3\x10\xa6\x61\xc7\x60\x00\x0b\xcd\x97\x3e\xed\xec\xb6\x51\xcb\x58\x89\x91\x2a\x8e\x7c\xda\xda\x03\x39\x7f\x8c\x82\xb1\x8e\x3c\xd7\x40\xbb\x1c\xcd\xe7\xa8\x7d\x93\x77\xd3\xfb\x65\x70\x33\xa9\xde\x70\x5d\x64\x3c\xde\xbf\x38\x56\xf6\x78\x65\x9c\x78\xbe\xd6\x2a\xac\x8c\x94\x59\x38\x1e\x09\x6b\x88\x2b\x83\x2e\x52\x39\x5f\x62\xda\xde\x86\x55\x30\xf8\x6d\x32\x1b\x5c\xdf\xcd\x7a\xd7\xd7\xe3\x4f\xa3\x69\x15\xcb\x95\x8b\x51\xb8\x78\x0f\xf7\x07\x1f\x7a\x9f\x6e\xa6\xb3\xbb\xc1\xaf\xc3\xf1\xa8\xaa\xa3\x27\xfb\xa3\x0a\x9d\x48\x0a\x5e\x7a\x8c\x78\x2e\xdf\x9d\x5f\xfc\x10\x9f\xd5\xef\x17\xda\x96\x32\x2a\x9c\x5d\x2b\x89\x2e\xe5\x1b\xdf\x00\x46\x45\x73\x65\x22\xa9\x5c\x9a\xd8\x82\x12\x61\x54\xf8\xa7\x3a\x82\x85\x35\x8b\x3d\x1e\xba\x1d\x70\x83\x14\xcb\x86\x71\xf8\x1e\x57\x9a\xe0\xed\x54\x5a\xb1\x42\xd7\x34\x11\x69\x63\xdd\x2a\x2a\x74\xb9\x54\x26\x15\x46\xd5\x80\xc3\xa5\xf2\x84\x2e\x0a\x6d\x4e\xc9\x95\x78\x0a\x04\x77\x45\x41\x9b\x0e\xfd\x9f\xf6\x86\xa3\xe9\xe1\x82\x76\xb3\x6a\xcd\x42\x2d\xd3\x53\xa7\xec\xc3\xf1\x13\xcf\xf5\x73\x9d\x9f\x23\x06\x4b\x35\xac\x6e\xb0\xcd\x7e\xf0\x9f\x17\x46\x98\xfb\xb0\x75\x76\x76\xba\xff\xf9\xa1\x6a\xb1\x2e\x6b\xd6\x03\x77\x2f\x78\xec\xdf\x00\x00\x00\xff\xff\xd8\xea\x02\x37\xe6\x07\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x32, 0xe5, 0x6b, 0xba, 0xaf, 0x62, 0x53, 0x86, 0xf7, 0x69, 0x69, 0x6a, 0x2f, 0x2c, 0x18, 0xb2, 0xe2, 0x2b, 0xbd, 0xc5, 0x85, 0x74, 0xe7, 0x50, 0x2f, 0xa9, 0xc, 0x6a, 0xb4, 0xa0, 0x1}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
