version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  prepare-ssh-keys:
    description: Prepare SSH keys to be mounted with the right permissions for Git
    steps:
      - run:
          name: Prepare SSH keys to be mounted with the right permissions for Git
          command: |
            if [ ! -z "$SSH_KEY_NAME" ]; then
              sudo cp -r $HOME/.ssh $HOME/project/
              printf "Host github.com\n  IdentityFile /root/.ssh/$SSH_KEY_NAME\n" | sudo tee $HOME/project/.ssh/config
              sudo chmod -R 600 $HOME/project/.ssh
              sudo chown -R root:root $HOME/project/.ssh
            else
              echo "No SSH key found. Skipping..."
            fi
  docker-run:
    # enabling docker executor will require to use large resource class, which
    # implies extra cost - we don't really have to do that, we can just run the
    # image this way
    description: Run docker command
    parameters:
      cmd:
        type: string
      timeout:
        type: string
        default: 30m
    steps:
      - run:
          name: docker run << parameters.cmd >>
          command: |
            docker run \
              --env=JUNIT_REPORT_DIR=/src/test-results \
              --env=GOPRIVATE \
              --volume=$(pwd):/src \
              --volume=$HOME/.cache/go-build/:/root/.cache/go-build \
              --volume=$HOME/go/pkg/mod/:/go/pkg/mod \
              --volume=$HOME/project/.ssh:/root/.ssh \
              weaveworks/eksctl-build:$(cat .docker/image_tag) << parameters.cmd >>
          no_output_timeout: << parameters.timeout >>
  docker-pull-build-image:
    description: Docker pull image
    steps:
      - run: docker pull "weaveworks/eksctl-build:$(cat .docker/image_tag)"
  restore-cache:
    description: Restore cache
    steps:
      - restore_cache:
          keys:
            - go-cache-{{ checksum "go.sum" }}
            - go-cache-
  save-cache:
    description: Save cache
    steps:
      - run:
          name: Prepare cache to be saved
          command: |
            sudo chown -R circleci.circleci $HOME/.cache/go-build/
            sudo chown -R circleci.circleci $HOME/go/pkg/mod/
      - save_cache:
          key: go-cache-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.cache/go-build/"
            - "/home/circleci/go/pkg/mod/"
  notify-slack:
    description: Notify failures via Slack
    parameters:
      fail_only:
        type: boolean
        default: true
    steps:
      - run: exit 0
      - slack/status:
          fail_only: << parameters.fail_only >>
          mentions: 'team-aws'
          only_for_branches: master

jobs:
  test-and-build:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      GOPRIVATE: github.com/weaveworks/aws-sdk-go-private
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "81:df:39:29:89:d6:34:ed:2e:4e:70:71:f1:f3:f6:0c"
      - prepare-ssh-keys
      - restore-cache
      - docker-pull-build-image
      - run: mkdir test-results
      - docker-run:
          cmd: go mod download
      - docker-run:
          cmd: make check-all-generated-files-up-to-date
      - docker-run:
          cmd: make test build
      - docker-run:
          cmd: make build-integration-test
      - docker-run:
          cmd: make -f Makefile.docker check-build-image-manifest-up-to-date
      - run: mkdir bin; mv eksctl "bin/eksctl-$(./eksctl version)"
      - save-cache
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./test-results
      - store_artifacts:
          path: ./bin
      - notify-slack
  build-all-distros:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      GOPRIVATE: github.com/weaveworks/aws-sdk-go-private
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "81:df:39:29:89:d6:34:ed:2e:4e:70:71:f1:f3:f6:0c"
      - prepare-ssh-keys
      - restore-cache
      - docker-pull-build-image
      - docker-run:
          cmd: make build-all
      - store_artifacts:
          path: dist/
      - notify-slack
  release-candidate:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - restore-cache
      - docker-pull-build-image
      - docker-run:
          cmd: go mod download
      - run:
          name: Create release candidate binaries for all plaforms and upload to GitHub
          command: |
            docker run \
              --env=GITHUB_TOKEN \
              --env=CIRCLE_TAG \
              --env=CIRCLE_PROJECT_USERNAME \
              --env=CIRCLE_PROJECT_REPONAME \
              --env=GOPRIVATE \
              --volume=$(pwd):/src \
              --volume=$HOME/.cache/go-build/:/root/.cache/go-build \
              --volume=$HOME/go/pkg/mod/:/go/pkg/mod \
              weaveworks/eksctl-build:$(cat .docker/image_tag) ./do-release-candidate.sh
          no_output_timeout: 21m
      - store_artifacts:
          path: dist/
      - notify-slack:
          fail_only: false
  release:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - restore-cache
      - docker-pull-build-image
      - docker-run:
          cmd: go mod download
      - run:
          name: Create release binaries for all plaforms and upload to GitHub
          command: |
            docker run \
              --env=GITHUB_TOKEN \
              --env=CIRCLE_TAG \
              --env=CIRCLE_PROJECT_USERNAME \
              --env=CIRCLE_PROJECT_REPONAME \
              --env=GOPRIVATE \
              --volume=$(pwd):/src \
              --volume=$HOME/.cache/go-build/:/root/.cache/go-build \
              --volume=$HOME/go/pkg/mod/:/go/pkg/mod \
              weaveworks/eksctl-build:$(cat .docker/image_tag) ./do-release.sh
          no_output_timeout: 21m
      - store_artifacts:
          path: dist/
      - notify-slack:
          fail_only: false
  integration-tests:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      BUILD_IMAGE: weaveworks/eksctl-build:242d3cf855385c4cb174cd0fadf6dc7ac4f76a55
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "82:cb:ed:40:f3:27:05:e6:16:9d:68:25:40:7d:83:07"
            - "81:df:39:29:89:d6:34:ed:2e:4e:70:71:f1:f3:f6:0c"
      - prepare-ssh-keys
      - restore-cache
      - docker-pull-build-image
      - run: mkdir test-results
      - run:
          name: Run integration tests
          command: |
            docker run --init \
                --env=JUNIT_REPORT_DIR=/src/test-results \
                --env=AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                --env=AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                --volume=$(pwd):/src \
                --volume=$HOME/project/.ssh:/root/.ssh \
                weaveworks/eksctl-build:$(cat .docker/image_tag) make integration-test TEST_V=1 SSH_KEY_PATH="/root/.ssh/${SSH_KEY_NAME}"
          no_output_timeout: 35m
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./test-results
      - notify-slack:
          fail_only: false

workflows:
  version: 2
  any-commit:
    jobs:
      - test-and-build:
          filters:
            tags:
              ignore: /.*/
  # Uncomment this to create binaries for all distros in a PR
#  build-all:
#    jobs:
#      - build-all-distros: # Build locally with gorelease
#          filters:
#            tags:
#              ignore: /.*/
  release:
    jobs:
      - test-and-build:
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^latest_release$/
      - release-candidate:
          requires: [test-and-build]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+/
      - release:
          requires: [test-and-build]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
  scheduled-integration-tests:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - integration-tests
  nightly-build:
    triggers:
      - schedule:
          cron: "0 9 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-all-distros
