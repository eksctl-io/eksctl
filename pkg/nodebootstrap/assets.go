// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (985B)
// assets/bootstrap.al2.sh (1.246kB)
// assets/bootstrap.ubuntu.sh (2.235kB)
// assets/docker-daemon.json (231B)
// assets/install-ssm.al2.sh (159B)
// assets/kubelet.yaml (463B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x21\x68\x1f\x36\x88\x6c\xd6\xbe\x15\xfc\xe0\x25\x6e\x31\x73\x9d\x12\xa7\xdb\x60\x1b\x46\x91\x2e\xe9\x11\xf9\x64\x24\x39\x6d\x57\xf2\xbf\x0f\xc5\xf1\x96\xb2\x32\xf6\x26\xdd\x77\xf7\x7d\xdf\xfd\x38\x63\xb0\x75\xd2\x6b\xee\x3a\x90\xb8\x46\xc9\xdc\xb3\xf3\xd0\x2a\xa6\xac\xe9\x38\x12\xeb\x09\x3d\x5b\x1b\xcb\xb6\xfd\x0a\x34\xf8\xc9\xe1\x93\xb5\xe2\xa7\x21\x56\x22\xf5\x4f\xec\x82\xbd\xcb\xca\x8b\xf7\x51\xf4\xad\x06\xbb\x43\x09\x3f\xa2\x33\x56\x1a\x29\x34\x6b\xc1\x0b\x25\xbc\x60\x9d\xb0\xa2\x05\x0f\xd6\x5d\xb1\x45\x7e\x53\xcc\xab\x09\xcb\xbe\xd4\xcd\x2c\xbf\xce\xee\xcb\x65\x33\xc4\xa2\x9c\x76\x68\x0d\xb5\x40\xfe\x1a\x35\xa4\x09\x78\x99\x0c\x16\x93\x91\x2b\x06\xda\x45\x67\xec\x46\x9b\x95\xd0\x4c\x90\x62\xce\x0b\x8f\xf2\x95\xc6\xb4\xbc\xaf\x97\xf9\xa2\x99\x55\xf5\x84\x55\xf3\x59\xde\x94\xd9\xc7\xbc\x1c\x3f\xcb\xac\xa8\x96\xf5\x3f\xe5\x8e\xfd\x1e\xd5\x86\x76\xc8\x10\x7f\x43\xec\x40\x59\xdc\x4d\x58\x51\xd5\xcb\xac\x9a\xe6\x4d\x31\xfb\x2f\x6e\x1d\x58\x0f\x0a\x51\xfe\x04\xb2\xf6\xc2\xfa\xf4\xe4\x99\xf4\xce\x26\x2b\xa4\xb1\x80\x7d\x8f\x18\xe3\x9c\x8c\x02\x8e\x5d\x7a\xfe\x72\x54\xde\x9f\x02\x5a\xac\x40\xbb\x11\x1c\xda\xde\x4f\x84\xee\x1e\x44\x3c\xe8\xc7\x68\x12\x24\xe7\x05\x49\xe0\xa8\xd2\xf3\x97\x13\xe3\x23\x57\x2b\x9e\x78\x67\x54\x20\xba\xcd\xbe\x36\x77\xf3\x59\x3d\x42\x16\x36\xe8\x3c\xd8\x83\x5e\xea\x6d\x0f\xa7\xc1\x47\xf4\x0f\xdc\x0b\x24\xff\xdb\xc4\x30\xee\xb1\x5c\x6a\xd3\x2b\xde\x59\xb3\x43\x05\x36\x15\x8f\x6e\x04\x0c\x85\x3a\xb0\xdc\xf6\xe4\xb1\x85\x54\x19\xb9\x05\x3b\x76\x07\xfe\xd1\xd8\x2d\xef\x74\xbf\x41\x4a\x25\xe1\x58\x47\xc8\x57\x48\x5c\xa1\x4d\x13\xd3\xf9\x44\x12\x86\xb1\x9d\xc0\xd2\xd0\x7a\xc0\xc3\x1a\x02\x4e\xe0\x63\x75\xcc\xe8\x8c\xe2\x48\x6b\x2b\x4e\x2c\x60\x2b\x36\x90\x9e\xbf\x84\x2b\xcd\x3f\xd5\x4d\x3e\x5d\x34\xd9\x74\x3a\xbf\xaf\x96\xfb\x58\x6d\x6d\x0c\xd2\xc6\x03\xfc\xfa\x88\xf7\xc7\x68\x9d\x2f\x3e\x17\xd3\xbc\x6e\x66\xf3\xdb\xac\xa8\xf6\x61\xf9\x49\x27\x7a\x07\x57\x97\xf1\x25\x87\xad\x5b\xf5\xa8\x55\xfc\xe1\x68\x22\xec\x38\xd8\xc4\xcd\x5f\xb7\x32\x84\xe3\x67\xd1\xea\x3f\xa3\x7a\x2b\x31\x1c\x55\xc8\x8a\x7e\x05\x00\x00\xff\xff\xf5\x22\x1f\x28\xd9\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0x64, 0xd8, 0xe8, 0x9f, 0xcb, 0x4, 0x93, 0x50, 0x42, 0xd2, 0xfc, 0x4, 0x53, 0x80, 0x20, 0x81, 0x46, 0x73, 0xde, 0x6e, 0x97, 0xac, 0xeb, 0x73, 0x10, 0xb0, 0xf5, 0x67, 0x33, 0x2e, 0x52}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x61\x4f\x1a\x4d\x10\xc7\xdf\xef\xa7\x98\xe7\xbc\x18\xc9\xd3\xe5\xd4\x58\x13\x51\x9a\x50\x38\xd3\x4b\x11\x48\xc1\x56\x63\xec\x65\xd9\x1b\xca\xc6\x65\xf7\x72\x3b\xa0\x86\x5c\x3f\x7b\xb3\x78\x58\x50\xeb\x2b\x98\x99\xff\xec\xfc\xf7\x37\xb7\x3b\xff\x45\x63\x65\xa2\xb1\x70\x53\xc6\x1c\x12\x70\x0b\x58\x14\xf8\xa0\x68\x1d\xe6\x2a\xc7\x89\x50\x7a\x1d\x1b\x3b\x37\x0e\x89\xb1\xc9\xdc\x48\x52\xd6\xc0\x2f\xa4\x74\x26\x1e\xd2\xdc\x66\x6e\xaf\x06\x4b\x06\x70\x3f\x55\x1a\xa1\x40\x91\x81\x32\x8e\x84\x91\x98\xd2\x63\x8e\xe0\x35\xa7\x90\x59\x06\x00\xa0\x26\x00\x37\x37\x10\x84\xcb\x2d\x51\x19\x40\xb3\xe9\xb3\x07\x65\x00\xb7\xb7\xb0\xbb\x5b\xa9\x7c\xb3\x2f\xfe\x86\x9f\x37\xfb\xfc\xe4\xf6\xff\xd0\x97\x4f\x81\xa6\x68\x56\x07\x02\xa0\x9c\x5a\xa8\x94\x55\xaa\x40\x9a\x17\x4f\xf5\x89\x62\x00\x99\x35\x08\x67\x10\x21\xc9\x08\xef\x9c\x24\x1d\xad\xdd\xd7\x67\x22\x67\x25\x63\x3b\x70\xe9\x10\x92\x8b\xce\x70\x71\x08\x64\xfd\x0d\x61\x86\x24\x32\x41\x82\x8d\xfa\x5f\xe3\x5e\x33\x08\xf7\xe4\xbc\xd0\xc0\xb9\x53\x1a\x0d\x01\xbf\x82\xc1\xe5\x08\xf8\x17\x08\xae\xb8\xb8\x77\x1c\xe5\x21\x5f\x37\x71\xb2\x77\x68\x38\x91\xe6\x0e\xa5\x35\x99\x6b\xc0\xf1\xfe\x7e\x00\x53\xa2\xbc\x11\x45\x07\xc7\x27\xf5\xc3\x8f\x47\xf5\xea\x37\xd2\x82\xd0\x51\x24\x72\x15\xad\x3a\x6b\xc1\x0b\xdc\xd5\xb9\x15\xee\x17\x4e\xde\xb1\xd0\x80\x70\xe5\x3f\x80\xe0\xfd\xd1\xbe\x8d\xfb\xbe\x28\x3c\x08\x3c\x93\x5e\xbf\x13\xa7\xc9\xc0\x5f\x7c\xd3\x01\x68\x2b\x85\xe6\x2a\x5f\x1c\xd5\x02\x96\xf4\x86\xa3\x56\xaf\x1d\xa7\x49\xe7\x95\x70\xbd\x63\xae\xb2\x4d\xe5\xe8\x7a\x10\xff\x5b\xeb\xbf\x87\x5a\xc0\x5a\x3f\x86\xe9\x30\xfe\xf6\x3d\x69\xc7\xc3\xb4\xd3\xbf\x68\x25\xbd\x57\x3d\x0e\x8b\x85\x92\xe8\xa2\xcc\xce\x84\xf2\xc8\x18\x73\x76\x5e\x48\xdc\xda\xf5\xdd\x7c\x8c\x1a\xa9\x8e\x66\x01\x3b\x40\x53\xe5\x40\x0a\x03\x76\x81\x45\xa1\x32\x84\x8b\xd6\x55\x3a\xe8\x77\x86\xec\xaf\xc5\x6e\x72\x1e\xb7\xaf\xdb\xdd\x77\x7c\x6a\x35\x41\x2e\x1f\xa5\xf6\x6e\x57\xa8\xba\xad\xcf\x71\x77\xd8\x0c\xc2\xe5\x46\x58\x7e\x30\x36\x7b\x52\xaf\xc4\xcd\x70\xf9\x7a\x4a\xe9\x9d\x4b\x41\xf0\xe9\x4d\xe3\x2b\xe0\x2b\xfb\x67\x67\x71\xff\xfc\x79\x31\xd5\xa0\x64\x50\x6e\xad\x61\x63\x42\xd2\x29\x5f\x70\xdf\x28\xfa\xb8\x7c\x13\x74\xb8\x7c\x23\x5b\xb2\x35\xa8\x66\xb8\x5c\xff\x6d\xf0\x8a\x4f\xf5\x9e\xfc\xa3\xdd\x1e\x10\xd4\xca\x2d\x3c\xdb\x74\x98\xbf\x0f\x73\x8f\x8e\x70\x26\x49\x43\x26\x70\x66\x0d\x2f\x50\x5b\x91\x6d\xe4\xd1\x88\xb1\x46\xa8\x88\x6c\x14\x1c\x89\x82\x9e\xf3\x7f\x02\x00\x00\xff\xff\x6d\x49\xb4\xd1\xde\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0xb, 0x12, 0xec, 0x9f, 0xc4, 0x34, 0x62, 0x3, 0xdd, 0x85, 0x9f, 0xc6, 0x71, 0xab, 0x8b, 0xfb, 0x4c, 0x46, 0x31, 0x3f, 0x8c, 0x45, 0x1b, 0xbd, 0xdc, 0x6d, 0x38, 0xee, 0xaa, 0xe5, 0xf1}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\xf1\x6f\x1a\xb9\x12\xfe\xdd\x7f\xc5\xbc\x0d\xea\x0b\x7a\xf1\x6e\x93\xf6\x55\x6a\x5a\x4e\xc7\x25\xf4\x0e\x35\x85\xa8\x90\xbb\x56\x51\x0e\x19\x7b\x60\x2d\x8c\xbd\xb2\x67\xa1\x51\xc4\xfd\xed\x27\x2f\xbb\x84\xd0\x36\x3f\xb1\xf6\xf7\xcd\xf8\xf3\xf8\x9b\xe1\xe8\x3f\xd9\x54\xdb\x6c\x2a\x42\xce\x58\x40\x02\xee\x00\xbd\xc7\x6f\x9a\x9a\x65\xa1\x0b\x9c\x09\x6d\x9a\xb5\x75\xa5\x0d\x48\x8c\xcd\x4a\x2b\x49\x3b\x0b\x73\xa4\xc9\x52\x7c\x9b\x14\x4e\x85\xe3\x36\x3c\x30\x80\x75\xae\x0d\x82\x47\xa1\x40\xdb\x40\xc2\x4a\x9c\xd0\x7d\x81\x10\x39\xef\x40\x39\x06\x00\xa0\x67\x00\xb7\xb7\x90\xb4\x1e\x9e\x90\x36\x09\x74\x3a\x71\xf7\x74\x93\xc0\xdd\x1d\xbc\x78\x51\xb3\x62\x70\x04\xff\x81\xbf\x6f\x5f\xf2\xb7\x77\xff\x6b\x45\xf8\x1d\x50\x8e\xb6\x4a\x08\x80\x32\x77\x50\x33\xdf\xd5\x7b\x1e\xa9\xf4\x5b\xc2\x4c\x33\x00\xe5\x2c\xc2\x7b\xc8\x90\x64\x86\x8b\x20\xc9\x64\x8d\xfc\x74\x29\x0a\xb6\x61\xec\x08\x6e\x02\x42\xff\xd3\xe5\x68\x75\x06\xe4\xe2\x15\x61\x89\x24\x94\x20\xc1\xc6\xc3\x8f\xbd\x41\x27\x69\x1d\xcb\xd2\x1b\xe0\x3c\x68\x83\x96\x80\x7f\x81\xeb\x9b\x31\xf0\x3f\x20\xf9\xc2\xc5\x3a\x70\x94\x67\xbc\x09\xe2\xe4\x16\x68\x39\x91\xe1\x01\xa5\xb3\x2a\x9c\xc3\x9b\x97\x2f\x13\xc8\x89\x8a\xf3\x2c\x3b\x7d\xf3\x36\x3d\xfb\xff\xeb\xb4\xfe\xcd\x8c\x20\x0c\x94\x89\x42\x67\x55\x64\x3b\x39\xa8\x77\x9d\xb7\xae\xf7\x81\x92\x67\x24\x9c\x43\xab\xd2\x9f\x40\xf2\xfc\xd1\x31\x8c\xc7\xb8\xac\x75\x9a\xc4\x9a\x0c\x86\x97\xbd\x49\xff\x3a\x5e\x7c\x5f\x01\x18\x27\x85\xe1\xba\x58\xbd\x6e\x27\xac\x3f\x18\x8d\xbb\x83\x8b\xde\xa4\x7f\xf9\x1d\xb1\x79\x64\xae\xd5\x3e\x73\xfc\xf5\xba\xf7\x73\x6e\x34\x44\x3b\x61\xdd\xbf\x46\x93\x51\xef\xf3\x9f\xfd\x8b\xde\x68\x72\x39\xfc\xd4\xed\x0f\xbe\x8b\x09\xe8\x57\x5a\x62\xc8\x94\x5b\x0a\x1d\x4b\xc6\x82\x2b\xbd\xc4\x27\x4f\xbd\x28\xa7\x68\x90\x52\xb4\x2b\x38\x02\xca\x75\x00\x29\x2c\xb8\x15\x7a\xaf\x15\xc2\xa7\xee\x97\xc9\xf5\xf0\x72\xc4\xd8\xa3\xc4\xab\xfe\x87\xde\xc5\xd7\x8b\xab\x67\x74\x1a\x3d\x43\x2e\xef\xa5\x89\x6a\x99\x14\x04\xbf\xfc\xf0\xd8\xaa\x5a\xd5\xe1\xef\xdf\xf7\x86\x1f\x76\x55\x6d\x3d\xd4\x5f\x9b\x27\x35\x6c\x3d\xec\xad\x36\x07\x45\xdb\x03\xe3\x7a\xc3\x1a\xed\x9d\xd6\x43\xf3\x79\xce\x6b\xc5\xb5\xc3\x63\x1f\x3d\x8d\x4a\xda\x1b\x16\x95\xb0\x60\x45\x01\xc2\x68\x11\xa0\x56\xcb\x71\x11\xd2\xfa\xbb\xd9\x3b\xa4\x49\x32\x3b\x9a\x24\xd3\xec\x6d\x69\x81\x5c\xb1\x9f\x8c\x85\xfb\x40\xb8\x8c\x3c\x8f\x01\x89\xc7\xc9\x82\x8a\xb1\x63\x06\x70\x04\xe3\xe1\xe5\xf0\x3c\xb6\x73\x40\x08\xb9\x2b\x8d\x82\x29\x82\x71\x6e\x81\x0a\x04\x01\xae\xd0\xdf\x03\xe9\x25\x36\x49\x21\x90\xf0\x14\xa0\x2c\x4e\xaa\x0c\xeb\x5c\xcb\x1c\x74\x80\x75\x2e\x08\xd6\x08\xca\x81\xb6\xd0\xbd\x3a\x83\xe3\x1d\x36\x15\x01\x15\x38\x0b\x85\x11\xda\xc2\x56\x93\xda\x26\x10\x56\xc1\x12\x85\xa5\xd8\xf6\xd3\x38\xb0\x3c\x89\xa9\xc1\xb8\x5c\xba\x40\x0d\x1b\x94\x0e\xe4\x5d\x68\x9f\xc0\xb4\x24\xd0\xf4\xdf\x50\xc5\x5b\x47\x20\x0d\x0a\x0f\xb9\x5b\xc7\x20\xe3\x84\xaa\xaf\x34\xf3\x6e\xf9\x28\x3c\xd6\x67\xad\x29\x77\x25\x41\x2e\x56\xda\xce\xab\x04\xe4\x40\x96\x81\xdc\x52\x07\x8c\x71\x5b\xa2\xa6\x80\x66\xc6\x00\x9e\x71\xf4\xce\x5a\xcf\xd3\x7e\x4a\x68\x4c\x5d\x31\x18\xc0\xcc\x88\x79\xe8\x1c\x57\x83\x33\xb1\x4e\x21\xd7\xc5\x9e\x4f\x93\x2d\xb0\x14\xdf\x78\x34\xd6\x9e\xe7\x1a\xa8\x8a\x31\x62\x8a\x26\x34\x71\x57\xdd\xdf\x7a\x57\xa3\xcd\x89\x30\x45\x2e\xd2\xed\xc1\xa9\x76\xd9\xde\x6c\x38\xf0\xfc\xc9\x36\x8b\x9e\x61\xd5\x5d\xfb\xe8\xae\x2d\x9b\x03\x0b\xa7\xb8\xb6\x33\x2f\xb8\x74\x96\x84\xb6\xe8\xb9\x5e\x8a\x79\x8c\x8a\x13\xa4\xf7\x71\x34\xe9\x5d\x7c\x9e\x74\x2f\x2e\x86\x37\x83\xf1\x26\x55\x0b\x9f\xa2\xf4\xe9\x16\xbe\xec\x7d\xe8\xde\x5c\x8d\x27\x9f\x7b\xbf\xf7\x87\x83\x4d\xbd\x7b\x30\x76\x36\xb1\x5c\x59\x21\xca\x80\xe7\xaf\xd2\x57\xd1\xd5\xd3\x52\x1b\x95\x9e\xd6\x22\xa4\x71\xa5\xe2\x85\x77\x2b\xad\xd0\x77\xc4\x3a\x34\x80\xd5\x7c\xaa\x2d\x57\xda\x77\x32\x57\x50\x26\xad\x8e\x7f\xbf\x7b\xb0\x74\x76\xb6\xc5\xe3\xbb\x44\xdc\x22\xa5\xaa\x61\xec\x2e\xe5\x4b\x1b\xbb\xa0\xa3\x9c\x5c\xa0\x6f\xca\x8d\xb4\x76\x7e\xc1\x0b\x53\xce\xb5\xed\x48\xab\x6b\xc0\xe3\x5c\x07\x42\xcf\x63\x29\x3b\xe4\x4b\x3c\x04\xa2\x0f\x79\xcc\x4d\xbb\x97\x1a\x77\xfb\x83\xf1\xee\x29\xab\xae\x76\x76\xa6\xe7\x9d\x43\x4f\x6d\xb7\xd3\x7b\xb1\x34\x8f\x3a\x7f\x44\x8c\xe6\x6b\x58\xed\x68\xb0\xed\x88\x78\x1c\x2d\xb1\x96\x71\x3e\x55\xc6\xbb\xfd\xf5\x6e\x93\xb0\x36\x6b\x06\x89\xf0\x4f\x78\xec\xdf\x00\x00\x00\xff\xff\x62\x53\xe3\x71\xbb\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x41, 0x34, 0x55, 0x14, 0x23, 0x2, 0x4b, 0x49, 0xae, 0x21, 0xc1, 0xf9, 0x27, 0x58, 0x50, 0xf1, 0x8e, 0x1f, 0xa2, 0x58, 0x4e, 0x73, 0x3, 0xbf, 0x8c, 0xc3, 0xa5, 0x95, 0x7, 0xa6, 0x1}}
	return a, nil
}

var _dockerDaemonJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xc1\x8e\x83\x30\x0c\x44\xef\xf9\x0a\xcb\xe7\xcd\x0a\xae\x48\xfb\x25\xab\x1e\x68\xe2\xa2\x54\x60\x23\x27\x50\x5a\xc4\xbf\x57\x0e\x5c\xdf\xcc\xbc\xd9\x1d\x00\xde\x35\xc5\x81\xb0\x03\x64\x61\xc2\x1f\x63\xb4\x51\xf0\x32\x97\x8c\x1d\xfc\x3b\x00\x00\xe4\xbe\xa4\x95\x7e\xc3\xa0\xb2\xcc\x51\xd3\x4a\xfa\x97\xdf\xb9\xd0\x14\xd1\x01\xdc\xea\x6e\x94\xc1\x9f\x99\xf9\x9e\x59\xd8\x3f\xd2\x78\x49\x2d\xbc\x9c\xfb\xe9\x9c\xfa\xcd\xe7\xf4\xa9\xe7\x6d\x33\xd5\xda\x85\xeb\xac\x62\xb3\x1f\xa7\x20\xad\xe4\x95\x72\x11\xb5\xac\xe8\x42\x95\x5b\x3f\x08\x87\x45\x95\xb8\xf8\x28\x2f\x1e\xa5\x8f\x76\xd4\x36\xee\x70\xdf\x00\x00\x00\xff\xff\x52\x1b\x81\x4a\xe7\x00\x00\x00")

func dockerDaemonJsonBytes() ([]byte, error) {
	return bindataRead(
		_dockerDaemonJson,
		"docker-daemon.json",
	)
}

func dockerDaemonJson() (*asset, error) {
	bytes, err := dockerDaemonJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker-daemon.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x63, 0x97, 0x89, 0xb4, 0x10, 0x1b, 0x52, 0x26, 0x73, 0x3e, 0x1a, 0x64, 0x4, 0x95, 0xea, 0x69, 0xd3, 0xce, 0x27, 0x38, 0x67, 0x6, 0xca, 0xcc, 0xc6, 0xdb, 0xac, 0xdf, 0x4f, 0x4e, 0x43}}
	return a, nil
}

var _installSsmAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xca\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4f\x11\x71\x5d\xe6\x4c\xa9\x44\x0d\xa4\xe9\xd0\xff\x07\xac\xa7\x77\x35\x2b\x61\x96\x0f\xde\xfd\xb6\x35\xcf\xad\x29\xde\xa5\xc0\x28\x75\x88\xcd\x69\x1f\xe7\xc9\xdd\x77\x7b\xaa\xc7\xe9\x1c\x47\xc2\x58\xca\x3a\xba\x78\x82\x1a\x21\x75\x89\x76\xfd\x8e\xac\x40\xaf\xfa\xb2\x64\xc1\x02\xad\x3f\x18\x62\xa9\x2d\xec\x6a\x80\x3a\xf9\x1f\x7e\x01\x00\x00\xff\xff\x93\x2c\xf6\x43\x9f\x00\x00\x00")

func installSsmAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_installSsmAl2Sh,
		"install-ssm.al2.sh",
	)
}

func installSsmAl2Sh() (*asset, error) {
	bytes, err := installSsmAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install-ssm.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xf9, 0xf8, 0x5e, 0xb9, 0xcf, 0xfb, 0x94, 0xb4, 0x85, 0xa3, 0x62, 0xf0, 0x3b, 0x88, 0x44, 0xe3, 0x84, 0xfa, 0x85, 0x39, 0xdb, 0xed, 0xa2, 0x6a, 0x1, 0x7b, 0xe5, 0x49, 0x21, 0xef, 0x3d}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\x7d\x82\x24\xfd\x7f\x55\x02\xdf\x4a\x2b\x38\xd0\x13\x2d\x70\xde\x38\x9b\xd6\x8a\xe3\xad\xd6\xeb\x42\x79\x7a\x54\x27\x20\x55\x42\x3e\xad\x66\x76\xe7\xd3\x78\xf0\xb1\xb3\xf0\x9c\x5b\x0a\xa4\x6b\x8e\xbd\x3f\x64\x41\xf5\x1c\x0d\x9e\xfc\x1b\x49\xf2\x1c\x2d\x0c\x93\xa1\x72\xc5\x51\x0d\x77\xa9\xf2\x5c\x9f\x17\x2d\x29\x2e\x8c\xc1\xae\x13\x4a\xc9\x42\x53\x95\x67\x5c\xc8\x49\x49\x36\x3c\xa2\x8f\x16\xe6\xb1\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x12\x64\x0d\x00\x46\x8e\x97\x91\x73\xba\x0e\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\x49\x75\xe8\x8e\xb4\xdf\x6f\x2d\xfc\x1b\x9b\x74\xbb\xa0\x92\xaf\xfe\xcf\x65\x73\x3f\x9b\x83\xa7\xa8\xeb\xd5\xa3\x0f\x64\xa1\x26\x75\x35\x0d\xc9\x69\xa8\x1d\x56\x4e\x74\xa2\x61\xf1\x5f\xbf\x30\x23\x77\x64\xe1\x7d\x8a\xfc\x33\x7c\x35\xaf\x50\x57\x30\x96\x3f\x18\x45\x7c\x8d\x78\x2b\xff\x6f\x92\x31\x89\xe4\x4c\xb2\xdf\xee\x1e\x98\x35\xa9\xe0\x69\x86\x35\xee\x20\x9c\x4f\x1b\xf1\x67\x12\x0b\xe9\x92\x94\xc6\xce\x98\x9e\x50\xb3\xd0\x13\x2a\x95\x56\x5e\x58\x51\x69\xfe\xa9\x5d\xb9\xb6\x26\x51\xdf\x5f\x6b\xa4\xf9\xd8\x77\x00\x00\x00\xff\xff\x6e\x3f\x92\xcd\xcf\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x68, 0x78, 0x6f, 0x55, 0xaf, 0x4c, 0x83, 0x73, 0xb3, 0x75, 0x6d, 0xa3, 0x7b, 0x97, 0x7a, 0xbe, 0x32, 0x3e, 0xdd, 0xfe, 0x2c, 0xa, 0xaf, 0x8f, 0x89, 0x9c, 0x6b, 0x22, 0xc, 0xc2, 0x79}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"docker-daemon.json":  dockerDaemonJson,
	"install-ssm.al2.sh":  installSsmAl2Sh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": {_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": {bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": {bootstrapUbuntuSh, map[string]*bintree{}},
	"docker-daemon.json": {dockerDaemonJson, map[string]*bintree{}},
	"install-ssm.al2.sh": {installSsmAl2Sh, map[string]*bintree{}},
	"kubelet.yaml": {kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
