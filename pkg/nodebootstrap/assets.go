// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (985B)
// assets/bootstrap.al2.sh (1.225kB)
// assets/bootstrap.ubuntu.sh (2.264kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x21\x68\x1f\x36\x88\x6c\xda\xbd\x15\xfc\xe0\x25\x6e\x31\x73\x9d\x12\xa7\xdb\x60\x1b\x46\x91\x2e\xe9\x11\xf9\x64\x24\x39\x6d\x57\xf2\xbf\x0f\xc5\xf1\x96\xb2\x32\xf6\x26\xdd\x77\xf7\x7d\xdf\xfd\x38\x63\xb0\x75\xd2\x6b\xee\x3a\x90\xb8\x46\xc9\xdc\xb3\xf3\xd0\x2a\xa6\xac\xe9\x38\x12\xeb\x09\x3d\x5b\x1b\xcb\xb6\xfd\x0a\x34\xf8\xc9\xe1\x93\xb5\xe2\xa7\x21\x56\x22\xf5\x4f\xec\x92\xbd\xcb\xca\xcb\xf7\x51\xf4\xad\x06\xbb\x43\x09\x3f\xa2\x33\x56\x1a\x29\x34\x6b\xc1\x0b\x25\xbc\x60\x9d\xb0\xa2\x05\x0f\xd6\x5d\xb1\x45\x7e\x53\xcc\xab\x09\xcb\xbe\xd4\xcd\x2c\xbf\xce\xee\xcb\x65\x33\xc4\xa2\x9c\x76\x68\x0d\xb5\x40\xfe\x1a\x35\xa4\x09\x78\x99\x0c\x16\x93\x91\x2b\x06\xda\x45\x67\xec\x46\x9b\x95\xd0\x4c\x90\x62\xce\x0b\x8f\xf2\x95\xc6\xb4\xbc\xaf\x97\xf9\xa2\x99\x55\xf5\x84\x55\xf3\x59\xde\x94\xd9\xc7\xbc\x1c\x3f\xcb\xac\xa8\x96\xf5\x3f\xe5\x8e\xfd\x1e\xd5\x86\x76\xc8\x10\x7f\x43\xec\x40\x59\xdc\x4d\x58\x51\xd5\xcb\xac\x9a\xe6\x4d\x31\xfb\x2f\x6e\x1d\x58\x0f\x0a\x51\xfe\x04\xb2\xf6\xc2\xfa\xf4\xe4\x99\xf4\xce\x26\x2b\xa4\xb1\x80\x7d\x8f\x18\xe3\x9c\x8c\x02\x8e\x5d\x7a\xfe\x72\x54\xde\x9f\x02\x5a\xac\x40\xbb\x11\x1c\xda\xde\x4f\x84\xee\x1e\x44\x3c\xe8\xc7\x68\x12\x24\xe7\x05\x49\xe0\xa8\xd2\xf3\x97\x13\xe3\x23\x57\x2b\x9e\x78\x67\x54\x20\xba\xcd\xbe\x36\x77\xf3\x59\x3d\x42\x16\x36\xe8\x3c\xd8\x83\x5e\xea\x6d\x0f\xa7\xc1\x47\xf4\x0f\xdc\x0b\x24\xff\xdb\xc4\x30\xee\xb1\x5c\x6a\xd3\x2b\xde\x59\xb3\x43\x05\x36\x15\x8f\x6e\x04\x0c\x85\x3a\xb0\xdc\xf6\xe4\xb1\x85\x54\x19\xb9\x05\x3b\x76\x07\xfe\xd1\xd8\x2d\xef\x74\xbf\x41\x4a\x25\xe1\x58\x47\xc8\x57\x48\x5c\xa1\x4d\x13\xd3\xf9\x44\x12\x86\xb1\x9d\xc0\xd2\xd0\x7a\xc0\xc3\x1a\x02\x4e\xe0\x63\x75\xcc\xe8\x8c\xe2\x48\x6b\x2b\x4e\x2c\x60\x2b\x36\x90\x9e\xbf\x84\x2b\xcd\x3f\xd5\x4d\x3e\x5d\x34\xd9\x74\x3a\xbf\xaf\x96\xfb\x58\x6d\x6d\x0c\xd2\xc6\x03\xfc\xfa\x88\xf7\xc7\x68\x9d\x2f\x3e\x17\xd3\xbc\x6e\x66\xf3\xdb\xac\xa8\xf6\x61\xf9\x49\x27\x7a\x07\x57\x1f\xe2\x0b\x0e\x5b\xb7\xea\x51\xab\xf8\xe2\x68\x22\xec\x38\xd8\xc4\xcd\x5f\xb7\x32\x84\xe3\x67\xd1\xea\x3f\xa3\x7a\x2b\x31\x1c\x55\xc8\x8a\x7e\x05\x00\x00\xff\xff\x30\x3f\x63\x4d\xd9\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0xbf, 0xa0, 0x4b, 0x49, 0x6d, 0x88, 0xe7, 0x32, 0x9e, 0xe6, 0xa2, 0xaa, 0x6d, 0xbd, 0xa8, 0x2, 0xb8, 0xe7, 0x4a, 0x8e, 0xcb, 0xa8, 0xa, 0x46, 0xea, 0xe0, 0x70, 0x6f, 0x65, 0x2d, 0xc8}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x71\x4f\xdb\x3e\x10\xfd\xdf\x9f\xe2\x7e\x21\x42\x54\xbf\xb9\x01\xc4\x90\x28\x74\x52\xd7\x06\x2d\x5a\x69\xab\xb5\x6c\x20\xc4\x22\xd7\xb9\xae\x16\xae\x1d\xc5\xd7\x02\xaa\xb2\xcf\x3e\xb9\xa4\xac\x05\xc6\x5f\xc9\xdd\xbd\xe7\x7b\xf7\xce\xde\xf9\x2f\x1a\x2b\x13\x8d\x85\x9b\x32\xe6\x90\x80\x5b\xc0\xa2\xc0\x07\x45\xeb\x30\x57\x39\x4e\x84\xd2\xeb\xd8\xd8\xb9\x71\x48\x8c\x4d\xe6\x46\x92\xb2\x06\x7e\x21\xa5\x33\xf1\x90\xe6\x36\x73\x7b\x35\x58\x32\x80\xfb\xa9\xd2\x08\x05\x8a\x0c\x94\x71\x24\x8c\xc4\x94\x1e\x73\x04\x8f\x39\x85\xcc\x32\x00\x00\x35\x01\xb8\xb9\x81\x20\x5c\x6e\x81\xca\x00\x9a\x4d\x9f\x3d\x28\x03\xb8\xbd\x85\xdd\xdd\x0a\xe5\xc9\xbe\xf8\x1b\x7e\xde\xec\xf3\x93\xdb\xff\x43\x5f\x3e\x05\x9a\xa2\x59\x1d\x08\x80\x72\x6a\xa1\x42\x56\xa9\x02\x69\x5e\x3c\xd5\x27\x8a\x01\x64\xd6\x20\x9c\x41\x84\x24\x23\xbc\x73\x92\x74\xb4\x56\x5f\x9f\x89\x9c\x95\x8c\xed\xc0\xa5\x43\x48\x2e\x3a\xc3\xc5\x21\x90\xf5\x13\xc2\x0c\x49\x64\x82\x04\x1b\xf5\xbf\xc6\xbd\x66\x10\xee\xc9\x79\xa1\x81\x73\xa7\x34\x1a\x02\x7e\x05\x83\xcb\x11\xf0\x2f\x10\x5c\x71\x71\xef\x38\xca\x43\xbe\x26\x71\xb2\x77\x68\x38\x91\xe6\x0e\xa5\x35\x99\x6b\xc0\xf1\xfe\x7e\x00\x53\xa2\xbc\x11\x45\x07\xc7\x27\xf5\xc3\x8f\x47\xf5\xea\x1b\x69\x41\xe8\x28\x12\xb9\x8a\x56\xcc\x5a\xf0\xc2\xee\xea\xdc\xca\xee\x17\x4a\xde\x91\xd0\x80\x70\xa5\x3f\x80\xe0\xfd\xd6\x9e\xc6\x3d\x2f\x0a\x0f\x02\xef\x49\xaf\xdf\x89\xd3\x64\xe0\x07\xdf\x54\x00\xda\x4a\xa1\xb9\xca\x17\x47\xb5\x80\x25\xbd\xe1\xa8\xd5\x6b\xc7\x69\xd2\x79\x05\x5c\xef\x98\xab\x6c\x13\x39\xba\x1e\xc4\xff\xc6\xfa\xfb\x50\x0b\x58\xeb\xc7\x30\x1d\xc6\xdf\xbe\x27\xed\x78\x98\x76\xfa\x17\xad\xa4\xf7\x8a\xe3\xb0\x58\x28\x89\x2e\xca\xec\x4c\x28\x6f\x19\x63\xce\xce\x0b\x89\x5b\xbb\xbe\x9b\x8f\x51\x23\xd5\xd1\x2c\x60\x07\x68\xaa\x1c\x48\x61\xc0\x2e\xb0\x28\x54\x86\x70\xd1\xba\x4a\x07\xfd\xce\x90\xfd\x95\xd8\x4d\xce\xe3\xf6\x75\xbb\xfb\x8e\x4e\xad\x26\xc8\xe5\xa3\xd4\x5e\xed\xca\xaa\x6e\xeb\x73\xdc\x1d\x36\x83\x70\xb9\x11\x96\x1f\x8c\xcd\x9e\xd0\x2b\x70\x33\x5c\xbe\xee\x52\x06\xac\xba\xba\x4c\x0a\x82\x4f\x6f\xca\x5f\xd9\xbe\x1a\xe2\xec\x2c\xee\x9f\x3f\xaf\xa7\x6a\x97\x0c\xca\xad\x65\x6c\xf4\x49\x3a\xe5\x0b\xf7\x37\x8a\x3e\x2e\xdf\xb4\x3b\x5c\xbe\x91\x2d\xd9\xda\xae\x66\xb8\x5c\xff\x36\x78\xe5\x52\xf5\xaa\xfc\xd3\xdd\x6e\x10\xd4\x4a\xe6\x45\x33\xf7\xe8\x08\x67\x92\x34\x64\x02\x67\xd6\xf0\x02\xb5\x15\xd9\x46\x1e\x8d\x18\x6b\x84\x6a\xec\x8d\x82\x23\x51\xd0\x73\xfe\x4f\x00\x00\x00\xff\xff\x20\x43\x39\x87\xc9\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x2f, 0xd, 0x33, 0x57, 0x91, 0xaf, 0x87, 0x20, 0x4c, 0xb, 0x97, 0x73, 0x60, 0x1a, 0x7b, 0xa3, 0x8b, 0x23, 0x78, 0xbc, 0x73, 0x83, 0x57, 0x89, 0x8a, 0x81, 0xe6, 0xfb, 0x93, 0xb, 0x98}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x71\x6f\x1a\xb9\x13\xfd\xdf\x9f\x62\x7e\x1b\xd4\x5f\xd0\xd5\xbb\x4d\xae\x57\xa9\x69\xf7\x74\x1c\xd0\x3b\xd4\x14\xa2\x42\xee\x5a\x45\x39\x64\xd6\x03\x6b\x61\xec\x95\x3d\x0b\x8d\x22\xee\xb3\x9f\xbc\xec\x12\x42\xda\xfc\xc5\xda\xf3\x66\xfc\xfc\xfc\x66\x38\xf9\x5f\x32\x53\x26\x99\x09\x9f\x33\xe6\x91\x80\x5b\x40\xe7\xf0\x9b\xa2\x66\x59\xa8\x02\xe7\x42\xe9\x66\x6d\x6c\x69\x3c\x12\x63\xf3\xd2\x64\xa4\xac\x81\x05\xd2\x74\x25\xbe\x4d\x0b\x2b\xfd\x69\x1b\xee\x19\xc0\x26\x57\x1a\xc1\xa1\x90\xa0\x8c\x27\x61\x32\x9c\xd2\x5d\x81\x10\x30\xef\x40\x5a\x06\x00\xa0\xe6\x00\x37\x37\x10\xb5\xee\x1f\x81\xb6\x11\xa4\x69\xd8\x3d\xdb\x46\x70\x7b\x0b\x2f\x5e\xd4\xa8\x90\x1c\x82\xff\xc2\x3f\x37\xaf\xf8\xdb\xdb\x9f\x5a\x21\xfc\x0e\x28\x47\x53\x15\x04\xc0\x2c\xb7\x50\x23\xdf\xd5\x7b\x0e\xa9\x74\x3b\xc0\x5c\x31\x00\x69\x0d\xc2\x7b\x48\x90\xb2\x04\x97\x3e\x23\x9d\x34\xf4\xe3\x95\x28\xd8\x96\xb1\x13\xb8\xf6\x08\x83\x4f\xbd\xf1\xfa\x1c\xc8\x86\x2b\xc2\x0a\x49\x48\x41\x82\x4d\x46\x1f\xfb\xc3\x34\x6a\x9d\x66\xa5\xd3\xc0\xb9\x57\x1a\x0d\x01\xff\x02\x57\xd7\x13\xe0\x7f\x42\xf4\x85\x8b\x8d\xe7\x98\x9d\xf3\x26\x89\x93\x5d\xa2\xe1\x44\x9a\x7b\xcc\xac\x91\xfe\x02\xde\xbc\x7a\x15\x41\x4e\x54\x5c\x24\xc9\xd9\x9b\xb7\xf1\xf9\x2f\xaf\xe3\xfa\x37\xd1\x82\xd0\x53\x22\x0a\x95\x54\x99\xed\xe8\x48\xef\xba\x6e\xad\xf7\x11\x93\x67\x28\x5c\x40\xab\xe2\x1f\x41\xf4\xfc\xd1\x21\x8d\x87\xbc\xa4\x75\x16\x05\x4d\x86\xa3\x5e\x7f\x3a\xb8\x0a\x17\x3f\x64\x00\xda\x66\x42\x73\x55\xac\x5f\xb7\x23\x36\x18\x8e\x27\x9d\x61\xb7\x3f\x1d\xf4\x9e\x00\x9b\x47\xe6\x4a\x1e\x22\x27\x5f\xaf\xfa\x3f\xc6\x06\x43\xb4\x23\xd6\xf9\x7b\x3c\x1d\xf7\x3f\xff\x35\xe8\xf6\xc7\xd3\xde\xe8\x53\x67\x30\x7c\x92\xe3\xd1\xad\x55\x86\x3e\x91\x76\x25\x54\x90\x8c\x79\x5b\xba\x0c\x1f\x3d\xf5\xb2\x9c\xa1\x46\x8a\xd1\xac\xe1\x04\x28\x57\x1e\x32\x61\xc0\xae\xd1\x39\x25\x11\x3e\x75\xbe\x4c\xaf\x46\xbd\x31\x63\x0f\x14\x2f\x07\x1f\xfa\xdd\xaf\xdd\xcb\x67\x78\x6a\x35\x47\x9e\xdd\x65\x3a\xb0\xad\xa4\xba\xec\xfc\xde\xbf\x1c\xa7\x51\xeb\xfe\x60\xb9\x7d\x69\xac\xdc\xa1\x2b\x70\xda\xba\x7f\x7a\xca\x36\x62\x2c\x13\x04\xbf\x7e\x97\x78\xa5\x77\x45\xff\xfd\xfb\xfe\xe8\xc3\xfe\x5d\xea\x73\x06\x57\xdb\x47\xaf\x70\x70\xc0\xa0\xb7\x3d\x92\xfd\x20\x18\xd6\x5b\xd6\xdc\x3e\x6d\xdd\x37\x9f\x17\xbc\xbe\x73\xdd\x23\xa1\x13\x1f\x67\x45\xed\x2d\x0b\x4c\x98\x37\xa2\x00\xa1\x95\xf0\x50\xb3\xe5\xb8\xf4\x71\xfd\xdd\xec\x1d\xc3\x32\xd2\x7b\x58\x46\xba\xd9\xdb\xc1\x3c\xd9\xe2\xb0\x18\xf3\x77\x9e\x70\x15\x70\x0e\x3d\x12\x0f\xb3\x09\x25\x63\xa7\x0c\xe0\x04\x26\xa3\xde\xe8\x22\x0c\x04\x8f\xe0\x73\x5b\x6a\x09\x33\x04\x6d\xed\x12\x25\x08\x02\x5c\xa3\xbb\x03\x52\x2b\x6c\x8a\x82\x27\xe1\xc8\x43\x59\xbc\xac\x2a\x6c\x72\x95\xe5\xa0\x3c\x6c\x72\x41\xb0\x41\x90\x16\x94\x81\xce\xe5\x39\x9c\xee\x63\x33\xe1\x51\x82\x35\x50\x68\xa1\x0c\xec\x38\xc9\x5d\x01\x61\x24\xac\x50\x18\x0a\x83\x63\x16\x46\x9e\x23\x31\xd3\x18\x96\x2b\xeb\xa9\x41\x83\x54\x9e\x9c\xf5\xed\x97\x30\x2b\x09\x14\xfd\xdf\x57\xf9\xc6\x12\x64\x1a\x85\x83\xdc\x6e\x42\x92\xb6\x42\xd6\x57\x9a\x3b\xbb\x7a\x20\x1e\xf4\xd9\x28\xca\x6d\x49\x90\x8b\xb5\x32\x8b\xaa\x00\x59\xc8\x4a\x4f\x76\xa5\x3c\x86\xbc\x1d\x50\x91\x47\x3d\x67\x00\xcf\xf4\xc4\xde\x5a\xcf\xc3\x7e\x08\x68\xda\xa2\x42\x30\x80\xb9\x16\x0b\x9f\x9e\x56\xa3\x37\xaa\x8c\xaf\x8a\x03\x9f\x46\xbb\xc0\x4a\x7c\xe3\xc1\x58\x07\x9e\x6b\x42\xbb\x66\x11\x33\xd4\x3e\x3d\xea\x23\xa1\x8b\x5c\xc4\xbb\x83\x63\x65\x93\x83\xe9\x72\xe4\xf9\xba\x56\x61\x25\x57\x66\xee\x04\xcf\xac\x21\xa1\x0c\x3a\xae\x56\x62\x11\x7a\x30\x8c\x97\xfe\xc7\xf1\xb4\xdf\xfd\x3c\xed\x74\xbb\xa3\xeb\xe1\x64\x1b\xcb\xa5\x8b\x31\x73\xf1\x2e\xdc\xeb\x7f\xe8\x5c\x5f\x4e\xa6\x9f\xfb\x7f\x0c\x46\xc3\x6d\xbd\x7b\x34\x93\xb6\x41\x89\xa4\x10\xa5\xc7\x8b\x9f\xe3\xb3\x60\xd8\x59\xa9\xb4\x8c\xcf\x6a\x12\x99\xb6\xa5\xe4\x85\xb3\x6b\x25\xd1\xa5\x62\xe3\x9b\x80\x51\x7c\xa6\x0c\x97\xca\xa5\x89\x2d\x28\xc9\x8c\x0a\xff\xcd\x07\xe1\xcc\x9a\xf9\x2e\x1e\x24\x0f\x71\x83\x14\xcb\x06\xb1\xbf\x94\x2b\x4d\x30\x78\x2a\x6d\xb6\x44\xd7\x28\x89\xb4\xb1\x6e\xc9\x0b\x5d\x2e\x94\x49\x33\xa3\xea\x80\xc3\x85\xf2\x84\x8e\x07\xad\x53\x72\x25\x1e\x07\x82\xc5\x78\xa8\x4d\xfb\x47\x98\x74\x06\xc3\xc9\xfe\x95\xaa\x86\xb5\x66\xae\x16\xe9\xb1\x5d\x76\xdb\xf1\x9d\x58\xe9\x07\x9e\xdf\x03\x06\x5f\x35\xa8\x76\xf0\xce\xae\xfb\x1f\xa6\x46\xd0\x32\x8c\x9e\xca\x53\x37\xbf\xdd\x6e\x23\xd6\x66\xcd\x8c\x10\xee\x11\x8e\xfd\x17\x00\x00\xff\xff\xe8\x0e\x93\x0f\xd8\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0x69, 0x81, 0xa6, 0x1, 0x1d, 0xd7, 0x41, 0xd9, 0x4e, 0xe2, 0xa0, 0x38, 0x44, 0x3d, 0xf3, 0x10, 0x85, 0x61, 0x5b, 0x10, 0x9e, 0x1c, 0x4b, 0x2e, 0x2a, 0x11, 0x2b, 0x23, 0xa1, 0xfc, 0x41}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
