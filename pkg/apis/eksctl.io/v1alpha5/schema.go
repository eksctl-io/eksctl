// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (35.855kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5d\x7b\x6f\xdb\xb8\xb2\xff\xbf\x9f\x82\xf0\x1e\xe0\x6c\x81\x38\x3e\xf7\x02\xf7\x81\x62\x6f\x00\x37\xe9\x76\x7d\xdb\x24\x46\xbd\x77\x0f\xee\xa6\x05\x96\x96\xc6\x36\x37\x12\xa9\x43\x52\x49\xdd\x6d\xbf\xfb\x01\xa9\x87\xf5\x20\x25\x52\x96\xbb\xe9\xf9\xab\x8d\x25\x0e\x87\x33\x3f\x0e\x87\xc3\xe1\xe8\x8f\x67\x08\x4d\xfe\xc2\x61\x33\x79\x81\x26\xdf\xcd\x42\xd8\x10\x4a\x24\x61\x54\xcc\x2e\xa3\x54\x48\xe0\x97\x8c\x6e\xc8\x76\x72\xa6\x5e\x94\xfb\x04\xd4\x8b\x6c\xfd\x3b\x04\x32\xfb\xed\x2f\x22\xd8\x41\x8c\xd5\xcf\x3b\x29\x93\x17\xb3\xd9\xef\x82\xd1\x69\xf6\xeb\x94\xf1\xed\x2c\xe4\x78\x23\xa7\x7f\xfb\xaf\x59\xf6\xdb\x77\x59\xbb\x4a\x57\x93\x17\x48\xf1\x81\xd0\xa4\xe8\x33\x62\x69\xf8\x77\x2c\x83\x5d\xf9\x08\xa1\x49\xc2\x59\x02\x5c\x12\x10\x95\x5f\x11\x9a\x04\x59\xa3\xb7\x6c\xbb\x25\x74\x5b\x7b\xd6\x3b\xb8\xb2\xa3\xa2\x75\xd9\xf4\x4b\xfe\xbf\x2f\x67\x87\xfe\x61\x03\x9c\x43\x78\xcb\x43\xe0\x93\x17\xe8\xce\xca\x43\xfe\xe0\x43\xd9\x16\x87\xa1\xee\x19\x47\xcb\xea\x28\x36\x38\x12\x50\xbe\x14\x82\x08\x38\x49\xd4\x7b\x8a\xe3\x80\x51\x89\x09\x15\x28\xd0\x2a\x40\x09\xe6\x38\x06\x09\x5c\x20\x0e\x11\x96\x10\x22\xc9\x50\x45\x56\x25\xa1\x8f\x53\x42\x25\x44\x11\xf9\x7d\xba\x93\x71\x34\x3d\x96\xf0\xb3\x8a\x20\xda\x3a\x6a\x0b\xde\xaa\x2a\xa0\x78\x1d\xc1\xcf\xfb\xa4\xf1\x00\xa1\x09\x91\x10\x37\x7f\xac\x40\x4e\x48\xae\xfa\x38\xab\x3f\x0d\x61\x83\xd3\x48\xaa\x17\x26\x95\x27\x5f\xaa\xaf\x95\x24\x30\xe7\x78\x3f\x54\xc1\x55\xce\xc7\xd4\x2e\xf0\x6e\x2d\xe4\xc0\x42\x51\x2e\x64\x4f\x1d\xfb\x92\x37\x6a\x3a\xb3\x00\x15\xf5\x72\xf8\x47\x4a\x38\x84\x75\x11\xc5\x20\x71\x88\x25\x6e\xcb\xc7\x06\x07\x9c\x90\x5f\x80\x8b\x8c\xe5\x3f\x4c\x3a\x33\xa8\xbd\xa6\xf4\xda\x03\xf8\x88\xe3\x24\xd2\x9d\xdc\xd5\x71\x02\xf7\x22\x90\xd1\x39\x61\xb3\x87\x7f\xc3\x51\xb2\xc3\xff\x51\x85\xcb\x87\x67\x06\xe0\x4c\xf0\x03\x26\x11\x5e\x93\x88\xc8\xfd\xaf\x8c\x3e\x05\xc4\x9e\x55\x0d\x8e\xc1\x44\x22\x0f\x83\x67\x26\xbb\xc1\x7c\x8b\x25\x2c\x39\xdb\x90\xc8\x79\xc8\xe6\x2e\x7f\xac\xd1\x3a\x6a\xb4\x5b\x22\xdd\x86\xf9\x9a\x48\x33\x05\x82\x63\x2f\x41\x2d\xe6\xd7\x66\x42\xf7\x84\x86\x27\x46\x6b\x7d\xde\xf5\x02\x35\xc6\x14\x6f\x21\xbc\x61\x21\xbc\xe6\x2c\x4d\x8e\xd3\xda\x75\x83\x9a\xab\xde\x1a\x83\xae\x19\xa3\x15\x00\xba\x53\x14\xb7\x9a\x3f\x94\x0a\xbc\x85\x0f\xdf\xcf\xf4\xbf\x33\xcd\x3f\xa1\xdb\x29\x2d\xdf\x78\x8e\x30\x0d\xd1\x5d\x3e\x32\x74\x78\x50\x36\x82\x7b\x31\xcd\x1f\xeb\x76\x62\xf6\xbc\xce\x42\x8f\x7d\x54\x2c\xfd\x80\xd1\x8e\xc3\xe6\x7f\xde\x4f\xec\x9c\xbc\x9f\x5c\x34\x19\xff\x61\x86\x2f\x34\x7f\xad\xf6\x6d\xa6\xde\x4f\x2e\xda\x83\x50\x04\xcc\xe0\x2a\x4d\xa8\x0f\x54\xaf\xe1\x60\x73\xeb\xe4\xe8\x38\x90\x18\x15\x0b\x3f\x32\x8e\x08\xdd\x30\x1e\x63\xf5\x93\x16\x64\x31\x15\x90\x50\x40\x31\x68\xdb\x04\x11\x2f\x75\xf7\xf6\xea\x88\x05\x17\x25\x0a\x08\x38\x48\xf1\x8a\x06\x7c\x5f\x30\xe0\xa0\xcd\x55\xab\x99\x99\xba\xc4\x32\x6d\xe9\xb3\x13\x20\xab\xac\x89\x91\xdc\x43\x12\x78\xd1\xfa\x65\x79\x39\xd4\x85\xd2\x96\xf3\xcc\xb8\xfa\x9b\xa6\x40\xc3\x78\x37\x78\x36\xa3\xbc\xd3\x2a\x76\x2c\x73\x9d\xcb\xbe\x79\xd5\xed\x54\x78\x5b\x5f\x8d\xc5\x6c\x14\x17\x12\x23\x41\x14\x82\x73\x17\xef\x4c\x39\x74\x6b\x40\x1c\x92\x08\x07\x10\xa2\x47\x22\x77\x28\xd7\x1b\x9a\x2f\x17\xce\xce\xa3\x37\x61\x93\xdb\xf8\x8a\x86\x09\x23\x54\x0a\x97\x8d\x41\xc2\xc9\x03\x96\x30\x0f\x02\x10\x2d\x70\x17\xc6\x65\xcd\x58\x04\xd8\x32\x2f\x92\x74\x1d\x91\xc0\x97\x80\x17\x80\xeb\x4c\xda\xfa\x1e\x45\xb5\x3b\x16\x85\xa2\xf4\xce\x71\x42\x90\x00\xfe\x00\x1c\x41\x2e\x55\x84\x75\x6f\x55\xa3\xe6\xac\xde\x41\xc4\x4d\x2a\x56\x4e\x92\x83\x72\x8b\xd9\xc6\xc2\x57\x1f\x21\x48\x15\xb9\x77\x2c\x82\xf9\xbb\x9b\x1e\x47\xaa\xd3\x45\x6d\x50\x5b\x02\x8f\x89\x50\xd6\x44\xbc\x64\x29\x0d\x31\xdf\x0f\xa1\xae\x24\x41\x02\xa5\x63\x96\xd6\xb1\x8b\xbc\xd7\xcd\x83\x94\x56\x35\xaa\x47\xb9\xc2\x39\x83\x47\x08\xb0\x42\x61\x24\xa1\x29\x7b\x70\xbb\xb8\xba\x3c\xd1\xbc\x6b\x0c\xd9\x7d\x28\xfd\xa8\x69\xd0\xf3\xc0\x96\x69\xf8\x1d\x38\x1a\xd1\x2a\xe0\x28\x42\x8b\xf9\x35\xc2\x52\x72\xb2\x4e\x25\x08\xc4\x36\x08\x17\x13\xda\xd3\x0c\xf4\x51\xb3\xcc\xfb\x06\xa2\x1d\xac\x00\xa6\x94\x49\x5c\x0f\xf8\x75\xcb\xe2\x74\x1b\xeb\x4a\x00\xd3\x44\xe0\x8f\x2f\x66\x9c\x63\x29\x71\xb0\x5b\xb2\x88\x04\xad\x79\x62\x36\x01\x0b\x1a\x11\x0a\x57\x2c\x48\x63\xa0\xad\x0e\x4d\xea\x40\x89\x26\x8f\xc2\xbc\x8d\x5a\x7b\xb3\x7e\xd5\xff\xe4\x8e\x08\x94\x63\x4b\x59\x69\x2d\x7c\x1f\x47\x78\x78\x2f\xbd\x12\x99\xbf\xbb\x79\x5a\x31\x92\x08\xaf\x21\xfa\x66\xc1\x46\x71\x0c\x43\x03\x0d\x56\x82\x22\xc1\xc1\xb8\x54\x13\xef\x25\xc4\x8f\xfe\x80\xfd\x4e\xcb\x3c\x75\x6d\x80\x24\xde\x7e\x5b\x10\xf1\x5a\x3a\x35\x88\x8c\x18\x68\xcf\x93\x33\xb3\xad\xee\x9a\xed\x36\xdb\xd8\x83\x8f\xce\xed\x91\x56\xc8\x98\xcb\x25\x45\x04\xc7\xb9\x35\xcb\x8d\x19\x2a\x76\x99\x3a\x10\x90\xed\x72\x52\x3e\xc4\x8b\xf6\xa5\xee\xb4\x9c\xae\x9a\x98\xb7\x2e\xaa\xdc\xd3\x0d\xf4\x02\x4f\x41\x7c\x44\x65\x64\xea\x56\x1e\x46\x4b\x6a\x9e\x82\xef\xa2\x64\x12\xb2\x8e\x92\xf5\x9e\x61\x34\xe7\x0b\x87\x6d\x25\x12\xd3\x7f\xa2\x31\xba\xd1\xce\x19\x18\x93\xe4\x37\x67\xf1\xaa\xa1\x9f\xe3\x8e\x8b\x46\xb2\xa2\xb9\x52\x0c\x7c\x9d\xc4\x8e\x95\xe7\xb5\x5b\xa0\xc0\x71\x54\x6e\xdd\x87\x6c\xfe\x9d\x88\x99\x26\xd0\xcd\xfc\x67\x17\x8b\xa4\xf6\x4f\x8f\xd8\x7d\x1b\xe9\xa5\x88\x82\xf8\x88\x16\xe9\x66\xfe\x33\xca\xc9\xd6\x4d\x35\x62\x49\x7d\x01\x74\xb3\x4b\xfd\xf4\x4c\xc2\x75\xb7\xf8\x98\x8f\x6b\x0d\x02\xd5\xc9\x86\x04\x58\xc2\x3c\x95\x3b\xc6\x89\xdc\x5f\x19\x8e\x20\xdc\x3c\xf9\x63\xdc\xf5\x22\xfa\x34\xb6\xfb\x18\xdc\xdf\x8c\x62\x95\xbd\x90\x5a\x0e\xc6\x45\xd4\x67\x75\xf5\x1a\xd9\x1f\x0d\xf2\x88\x03\x0e\xa7\x8c\x46\xfb\x51\x22\x08\x0e\xe4\x8c\x80\x4f\xd7\x14\xbc\x62\xc3\xc3\x96\x2c\xcb\x89\x16\xc8\x47\xc6\xef\x4f\xb6\x4c\x65\x01\xe1\x27\xcf\xb1\x17\xa2\x0b\x35\xb4\x87\x39\xa2\x35\xce\x3b\xd1\x8e\x73\x46\x1d\x89\x1c\x29\x7e\x66\xb8\x83\x90\x09\x8e\xbf\x2c\x2f\x9d\x8c\x6f\x2a\xd9\x3c\x8a\x98\x9a\xc2\x8b\xe5\xc3\x7f\x0e\x3a\xa9\x08\x48\xc8\xdd\xf6\xb3\x5b\x22\x77\xe9\xfa\x3c\x60\xf1\xe7\x47\xc0\x0f\xa0\x10\x20\x3e\x67\xc9\x2c\x9f\x93\xfb\xed\xe7\x54\x92\x48\x7c\x26\x09\x05\x79\xbe\x58\xde\x80\x25\x4a\x13\xd8\x4f\x64\x3a\x7a\x6f\x9d\xe3\x98\xad\xf6\x47\xc9\xf1\xe5\xe2\xea\xdd\x71\xb1\xf2\x63\x86\x3a\xfc\x30\x7a\xc3\x38\x3a\x80\x15\xa9\x61\x20\x2c\x04\x0b\x48\xb6\xf9\x3d\x43\x70\xbe\x3d\x47\x92\xa1\x54\x40\x76\xec\x25\x20\xc1\x5c\x21\x4b\xbf\xac\x08\x14\x50\xcb\xf1\x85\x14\x4d\xba\x47\x38\x9c\xee\x58\x1b\xbe\x2e\x10\xfe\x8a\x6c\x19\x75\x4a\x06\x67\xb8\x18\xc9\x51\xec\x98\xbd\x53\xf1\x34\x3b\xcc\x6a\x76\xce\xe6\x03\xb9\xaf\x13\x6e\x14\x10\xa4\x6a\x49\xcf\x52\x25\x46\x75\x62\x76\x98\x67\x47\xd9\xab\xe1\x7d\xb4\x10\x96\x70\x98\x6a\xe9\x43\x88\xb2\x1e\x74\x8e\x0a\x5a\xbd\xf6\x06\xab\x2b\xa9\xfe\x91\xb6\xdc\x82\x7e\xb8\xac\x4c\x33\xac\xc1\x64\x31\x09\x30\x07\x04\x44\xee\x80\x17\xab\x42\x65\xa6\xa8\x91\xb4\x27\xd4\x21\xe5\xe3\x0c\xc9\x1d\x08\xd0\x44\xee\x61\x0f\x21\x5a\xef\xd1\xfc\x57\xdd\x2e\x60\xf4\x01\x28\x01\x5a\x0b\xad\xf5\x4b\xef\xab\x32\x36\x70\xe5\x27\xb5\xb4\x0d\xbd\x7c\x59\x61\x6f\xd0\xa5\x79\xb1\x70\x80\xf7\x59\xc7\xc2\xdb\x30\x2f\x5d\x8b\x5d\xa7\x01\x19\xd1\x77\xd9\x46\x6c\x8d\xa3\xdc\xb2\x6a\xc7\x03\x47\x11\x0a\x76\x24\x2a\x5c\x90\x59\xdd\x26\x7b\xba\x34\xfe\xf4\x6b\x9e\x4e\x23\x1d\xd3\x2d\x14\xd6\x12\xcf\x78\x81\xaf\xda\x08\xd9\x46\x41\x18\xe5\x3c\xa2\x24\x63\xf2\xdc\x6b\x2a\x39\xd1\xe8\x3f\xcf\xf0\xce\x52\xe8\x1a\xd7\x62\x7e\x8d\x38\x8b\xe0\xaf\x02\xcd\xdf\xdd\x14\x2b\xb6\x64\x88\xa7\x14\x25\x2c\x14\x88\x51\xc9\x0a\x9e\xfd\xc6\x7b\x14\xed\x7e\x4b\x0c\x11\x04\x92\xf1\x31\x73\x80\x57\x39\xcd\x31\x5c\xb7\x6c\xb9\xd1\x1a\xe7\x69\x04\x42\x0d\x3c\xe3\x19\x29\xdf\x31\x62\x58\x27\xb8\x8b\x60\x07\x61\x1a\xc1\x11\x72\x3e\xae\x27\x9f\x65\xee\x6b\xb9\x2f\x5d\x72\x7d\xdc\x91\x60\x57\x4e\x22\xb1\x63\x69\x14\x16\xc0\x0a\x19\xa2\xd9\x3e\x14\xe9\x4c\x30\x7d\x72\x9c\x4f\xbb\x4c\x22\x10\x96\x32\x39\x47\x8b\x0d\xa2\x8c\xea\x99\xf8\x40\x42\x08\xcf\xb4\xc1\x2a\x56\x3c\xb5\x38\xa9\x86\x45\xfc\xf1\x91\x44\x11\x5a\x83\xea\x2b\xf4\x53\xd0\x13\x61\xd9\xa8\xe9\x6f\x2e\xd8\xee\xe5\x19\x34\x03\xe3\x26\xe3\x69\xb4\x29\xdd\x6e\xc2\x78\xa1\xf3\x6c\xee\x8a\x5c\xdd\x52\x12\xba\x15\x5a\x5d\xb5\x19\x5b\x4e\x63\xb3\x91\x70\x33\x10\x03\x3b\xe9\x58\xa3\x4b\x73\xe9\xb4\x56\x67\xc7\xba\xce\x0b\xf6\x93\x4e\x8e\xa8\x89\xf7\x4d\xba\x06\x4e\x41\x82\x40\x9a\x69\x54\xc2\xa8\xb2\xe6\x35\x0c\xb2\x9f\x01\x19\xa1\x07\xc7\x84\x8e\x01\xf9\x17\x36\x4e\x4b\x72\x68\xc3\x59\x8c\x32\x23\x38\xa2\x24\x86\xd1\x1f\xe9\xb4\xcd\x96\xa3\x30\xaa\x51\x38\xc2\x6f\x70\x35\x09\x43\x1d\x86\xc2\x20\xbc\x26\x4e\xb9\x75\x6b\xc6\xa4\x90\x1c\x27\x6d\xef\x1e\xd9\x9d\xb3\xd6\xcd\xac\x2a\x5a\x55\x47\xb8\x6e\x7c\x3a\x48\xdd\x16\x6f\x1b\x69\x71\x48\x98\x1b\x9d\x77\xea\xcd\x81\xb8\xd1\xbd\x98\x46\x70\xd6\x21\xa8\x51\x00\x95\xdf\x0e\xd2\xdb\x31\xd3\x91\x5f\xf5\xc6\xa5\xbe\x48\x4a\xe8\x16\xbd\x26\xf2\x36\x51\x3e\xfa\xe1\xa4\x44\x6f\xea\x22\x42\xef\xd5\x73\x92\x25\xe5\xa9\xf7\x90\x1a\x9a\x20\x92\xf1\xbd\x3b\x04\xbf\x2a\x53\x35\xd0\x36\x92\x1e\x2b\xf8\xb5\x2d\x2f\x07\x05\x5b\xd6\x05\x5b\x6a\xcf\x1e\x61\xbe\x26\x92\x63\xbe\x47\xff\xbb\xba\xbd\x99\xfd\xff\xfc\xfa\x6d\x99\xd5\x28\xce\x90\x48\x83\x1d\xc2\x02\xe9\xc8\x83\xe1\x2e\x2c\xe3\x3a\xfb\x55\xa7\x43\x12\xf0\x3d\x65\x38\x25\x03\x86\x15\xa5\x10\x70\xeb\x8e\xde\xc8\x9b\x79\x1c\x93\x1f\x71\x4c\xa2\x71\x33\xf9\x9e\xf6\x85\xda\x10\x84\x12\xdb\x25\x4e\x70\x40\xa4\x75\xe4\x0a\x14\x5b\xb0\xd8\x39\xe7\x4b\xa6\xa5\xe6\xac\xd7\x4c\x09\x15\x12\xd3\x40\xdf\x38\x1f\x55\x0b\x4f\xda\xef\xeb\xf5\xa1\x62\xfc\x71\x45\x3e\x59\x25\xd2\xa9\x9d\x98\xd0\xc1\x6d\x47\xcf\xeb\xca\x23\x75\xf9\xb1\xae\xa1\x6e\x45\xf3\x28\xd1\x46\x5e\x2f\x4c\x96\x28\x83\x70\xbc\x1c\x5e\xc2\x71\xb5\xfa\xe9\x5f\x64\x1b\x5b\xe1\xfd\x81\x45\x69\x0c\x2e\xaa\xef\xf2\xbc\xb7\x64\x8b\xd7\x7b\x09\x7e\x27\x79\x96\x56\x15\xae\xff\xfb\x6f\x63\x6d\xbe\x0f\x56\xdb\x66\x47\x3a\xcc\x9d\x61\x9e\x18\xa6\x9d\x59\xaa\x9d\x36\xbe\x81\xc7\xb6\x25\xea\x9c\x14\x4d\x08\x36\x8c\xed\xa8\xdb\x01\x4c\xd1\xab\x37\xab\x69\xeb\xbe\x36\xfa\xf9\xf6\xea\x16\xfd\x82\x23\x12\x96\x87\x31\x34\xc6\x49\x02\x21\xda\x10\xc8\xfc\x80\x10\xc9\x1d\x67\x8f\x8a\x08\x70\xce\xdc\x73\x68\x4e\xd3\x7b\xdd\x5d\x00\xc9\x49\x20\x2e\x59\xa4\xf6\x20\xf5\xf4\x49\x8b\xbf\xb0\xe5\x98\xa6\x11\xe6\x0a\x1a\xce\x6e\x43\xb5\xd1\x98\xb6\x32\xce\xf8\xff\xf3\xdd\x05\xaf\xe9\x59\x95\x86\x61\x30\xa3\x40\x57\x07\x99\xd6\xfb\x2c\xf2\x14\x60\xed\xc2\x17\x77\x76\xf5\x5d\x7a\x7d\x61\xf9\x70\xed\x3d\x64\x81\xf8\xf0\xfd\x4e\xca\x44\xbc\x98\xcd\xd4\x5f\xe7\xf8\x51\x9c\xe3\x18\x7f\x62\xf4\x3c\x60\xf1\x6c\xfe\xf7\x95\xae\x11\xf2\x63\xd1\x66\xa6\x36\x09\x42\xce\xfe\x4f\x00\x7f\x9d\x92\x10\x66\xf8\x51\x4c\x0f\x10\x98\x62\x31\xcd\xc7\x14\x94\x00\x3b\x57\x48\x7f\xee\x3c\x07\xfa\x86\x71\xb8\x9c\xff\x95\x58\x7f\x3f\xb9\x30\x48\xee\x70\xe5\xbf\x98\x59\x45\x56\x96\xc3\x16\xfd\xeb\x67\xfd\x8c\x91\xc5\xe1\x85\x78\xc3\x39\xf1\x28\x28\xcf\xf6\x5a\x8b\x2b\x6d\xe8\x2e\x17\x57\xef\x3c\x77\x69\xd5\x96\x75\xf5\x9d\x70\x03\x75\x44\x90\x6f\x95\x40\x40\x36\x7b\x74\x17\xa4\x42\xb2\x18\xcd\xaf\x17\xe2\xc3\xf7\x59\x59\x8a\xec\xa7\x29\x8e\xc9\x54\xa4\x49\xc2\xb8\xf4\x2d\x7c\x92\x13\x3f\xcc\x29\x2b\x61\x35\x0b\x0e\x1c\x68\xf4\x7b\xee\xf8\x4e\xb3\x8f\x14\xdb\xae\x15\x0d\x75\xac\x0d\x96\x92\x37\x2d\x6a\xde\x2b\xc3\x53\xdc\xe6\x76\x41\xec\x2d\x89\x89\xcc\x4a\xad\x64\xe1\x49\x8d\x0a\x12\xa0\xf9\xaf\x87\xaa\x2b\x38\x95\x2c\x37\xc7\xb3\xef\x3e\x31\x0a\x53\xfc\x88\x39\x4c\xd5\xef\xd3\xfc\x81\x1f\xf8\xb2\x6e\x5b\xb5\x56\x5c\x3a\xca\x8b\xaf\xb4\xb8\xb5\xd7\x61\x59\x33\x29\x23\xe0\x2c\xb8\x07\xc7\xfc\xb3\xd2\x1e\xbc\xac\x36\x35\x12\x0f\x22\x2c\x04\x09\xde\x32\x1c\xbe\xc4\x91\xf2\xb0\xf9\x0d\x8e\x9f\xa6\xb2\xe7\x79\xea\x20\x20\x1d\x7a\x5e\xe7\xfc\x8a\x2c\x9f\x48\x09\xb9\x5c\x75\xb7\x8d\xc4\x9b\x7e\x95\x7a\x13\xb7\x88\x53\xc7\x1a\xaf\x6e\x56\x47\xd8\xcd\xbb\xcb\xcc\x5a\xe1\x30\xe4\x20\x0e\x38\x7e\x48\x82\x29\x2d\xf7\x14\xb3\xef\x72\x53\x97\xf7\x39\x0d\xa9\x98\xe6\x4d\x9e\x67\xc7\x76\xca\xc9\xbe\xba\x59\xa1\x88\xb1\xfb\x7a\xe5\x98\x7e\x79\xb4\xc0\xed\xde\xfb\xfb\xc9\x45\x7d\x04\xba\xd2\x54\x3f\x47\xbd\x16\x73\x8c\xd8\x16\xac\xc5\x6d\x22\x49\x4c\x3e\x81\xd5\xaf\xb0\xc4\x2a\x6a\xf2\xc9\x0a\x29\x0a\x74\xf7\xea\xe5\x4a\x87\xa2\x63\xf2\x49\xbb\x58\xbd\x7e\xe9\xab\xcb\x7f\x6f\x7b\x74\xb0\x16\x53\x56\xf0\xd5\x70\x3b\x5d\xd4\x55\xb0\xe3\xec\x62\x3a\x72\xf1\x7e\x72\xd1\x1c\xa0\xdd\x52\x9d\x20\x6e\x38\xce\x95\x17\x03\xe1\x25\x87\x0d\xf9\x78\x12\xd2\xa3\xc7\x3a\x0b\xc2\xe2\x8a\x88\xec\x6a\x8a\x73\x35\xae\x83\xa4\x8d\x34\x8c\xdd\xdd\xa7\x6b\x88\x40\xbe\xd2\x49\x8e\xcd\xa2\x99\x1d\x7d\x79\x14\x89\xc8\x4d\x1c\xf9\x04\xe8\xb7\xbc\xbb\xdf\xf2\xad\x52\x69\xee\x82\xfc\x15\x42\xb7\x53\xb9\x83\x69\xfe\x9e\xa7\x9f\xd8\xb2\x63\x36\xb2\xa5\xd5\x52\x4c\xfd\x10\xb0\x10\x2e\xf2\x47\x3f\xcc\xf4\x5f\x39\x7f\x76\xf8\x7f\xf3\x21\xe9\x25\x0b\xc5\x12\xb8\xc2\xcc\xb0\xc8\xf4\xbf\x4a\x54\x9b\x3d\x00\xe7\x24\x84\x97\xc5\x31\xeb\x25\x8b\x63\xec\x5b\x30\xb3\x86\xc3\xdb\x9c\x24\xfa\x2d\xdb\x01\xff\xf6\x57\x81\xca\x53\xdc\x44\xb9\x15\xd9\xeb\x5e\xe0\x2e\x89\x66\x78\xcd\x28\xe7\x70\xb5\xd1\x37\x0e\x38\xe1\xad\xb1\x3e\x49\x17\x10\x74\x56\x16\x84\x68\x0d\x1b\xc6\xa1\x31\xc2\xd2\x4e\x66\xc5\x5f\xa0\x75\x11\xd0\x45\xa6\x03\xbb\xb0\x88\xf5\xb8\xd3\x91\x1a\x63\xaf\xf4\x12\x8f\xee\x8a\xe4\xe8\x83\x33\x66\xf5\x10\x53\x01\xd3\xfc\xf5\x69\x9e\x9f\x36\xdd\x30\x3e\xd5\x26\x1b\x47\x87\x9a\x90\xcf\xb5\x67\x56\xfe\xe9\x25\xb0\x9c\xaf\x5e\x87\xd1\x99\x99\xf7\x93\x8b\xf6\x18\xb5\x0f\xd9\xc1\xa4\xe3\x51\x52\x35\x31\xdf\xf1\x7a\xc6\xe1\x54\xe9\xb5\xe5\x9e\xd1\xb0\x03\xaa\x2e\x5d\x17\x99\x0e\x20\x90\x10\xbb\xa2\x8e\x5d\x96\xb7\x49\xc4\x40\x45\x39\x13\x35\x0e\xf2\x5b\x3e\x3a\x93\xd8\x74\x5d\xf0\xdb\xe1\x9e\x6f\x41\x6a\xdc\xfc\x99\xb5\xa9\xdc\xb6\xe6\x19\xb3\xd9\x1e\x79\xe4\x8d\xb9\x13\x69\xa3\x04\xb3\x43\xbe\xbc\xb0\x69\xff\xbe\xaf\x83\xc6\xe2\x76\x69\xdd\xda\x77\xfa\x28\x59\xf3\x37\xb1\x78\x03\xfb\xc5\x95\x73\x59\x89\x16\x05\x87\x0d\x51\x47\xeb\x6f\xe2\xf4\xb8\xc5\xb5\xc3\x86\xea\xd0\xfa\x59\x83\x8a\xef\xd9\xf3\xe0\xa3\x68\xf3\x2e\xcd\xbe\xf5\xb4\xed\x76\x5d\x8f\xa1\x9b\x07\xc9\x9d\xa7\xce\x8d\x85\xaf\x23\xa8\x62\xf0\xc9\x0d\x2e\x7e\x5f\x1c\xdb\x16\x71\x31\x23\xd2\xac\x71\x33\xf6\x3b\xa6\xb5\x7d\xba\x99\xe7\xb1\x7d\xf7\xd3\xde\xd5\xb5\x57\x13\x97\x28\x6a\x87\x15\x6f\xf8\x0f\x8d\x30\x8a\x2d\xfe\xdb\xe7\xb3\xbb\x6c\x62\xcc\xf1\xca\xee\x00\x40\xfe\x70\x94\x6a\xc0\xb5\x2c\xce\x4a\xb1\x0d\xb9\xc3\x52\xdf\xfd\x2c\xe3\xe2\x3a\x47\xb3\xed\xec\x38\x16\x06\x1e\xdc\x8f\xee\xa6\x75\xb8\xf6\xd2\x1c\x87\xef\xf9\x48\xcc\x3c\x8c\x09\xbd\x2c\xbe\x62\x32\x68\xe5\x29\xee\x62\x8c\x1e\x85\x29\x6b\x28\x61\xba\x47\x77\x55\x9c\x95\xf7\x3f\x0e\xd1\xcc\xc3\x71\xee\xac\xfa\xe6\x94\x89\xda\xdf\xb3\xef\x2a\x9d\x4c\xd9\x66\x5a\x50\xf2\x0b\xdb\xd4\x58\x6b\x07\x35\x8f\x65\xe6\xfd\xe4\xc2\x38\xdc\x46\x70\xc7\x6b\x2d\x31\xea\xdb\xa4\xc6\x11\xe7\x92\xde\x81\xd6\x70\xae\xdc\xf9\x2a\x52\xd1\x1a\x0b\x08\xd1\xa1\x7e\xbc\x7b\xe6\xf5\x11\x5d\x98\x67\x90\x63\x9d\xed\x27\x5d\x8c\xf5\xb0\x88\xeb\xc4\x7b\xef\x6b\xb5\x8e\xa1\xde\x41\x57\x76\x3d\x68\x9f\x2c\xae\x3e\xac\x1c\xb7\x5f\x5f\xca\xf7\x9f\x87\x21\xa3\xcb\x22\xdb\xdc\xfb\xd4\xa1\xde\x7c\xe0\x8c\xef\xaa\x23\x6a\xc0\x49\x87\x9a\xbb\xb4\xe4\x21\xe4\x4e\x19\x8d\x68\x76\x6c\xc5\xb6\x0f\x89\x28\x7e\x36\xa6\x9f\x9e\xd5\xa0\xd8\x70\x60\xb7\x2e\xd1\x7a\x41\xb7\x7c\xe8\xf7\x19\x70\x92\x5c\x43\x3b\xde\xe3\xd3\x76\xc9\xe1\x81\xc0\xe3\x30\x12\xa9\x64\xab\x00\x47\x03\x5d\x89\x00\xb8\xcc\x6e\x5d\x0c\x6c\x6f\xfd\x5c\x97\x53\x73\x58\x0f\x13\x3a\x6c\x06\xb6\xfb\x28\x81\x53\x1c\x75\x9c\xc7\x77\xb6\xdf\x08\xeb\x09\x61\x67\x3b\x12\xe3\x2d\xbc\x4c\x49\x14\x0e\x94\xf3\xc7\x77\xf6\xd2\x93\x47\x7e\x85\xa0\xc6\x9b\x19\x59\x16\x09\x5a\x70\x64\x98\x1c\x76\xcc\x37\xc0\xd0\x90\x75\x43\xe5\x67\xc6\x59\xdb\x14\x93\x19\x9e\xa7\xb0\x76\xca\xd4\x0c\xbe\x62\x65\x26\x62\xb1\x6b\x3d\x07\xbe\x96\xe4\xbe\x6a\x64\xc2\x60\xef\x6d\x16\xb1\xde\xec\x29\x39\x5b\x6a\x57\xce\x89\xfd\xa6\x31\x4d\xe3\xb5\x2d\xe0\xc6\xe8\x15\xa8\xed\xee\x4b\x2c\xe0\xa8\x8c\x91\x82\xd0\x12\x78\x00\x54\xe2\x2d\xcc\xd7\xec\x01\x8e\xa6\x2b\x12\x26\xf3\x5a\x40\x84\xd1\x95\xe4\x58\xc2\x76\xd8\xc7\x5e\x12\x26\x0b\xc8\x2c\x19\x6b\x9f\x41\xdb\xf9\xf1\x33\x1d\x35\xa0\x98\xf4\xd4\x27\x7f\x4f\xb1\x76\x8e\xb1\x5f\x94\x23\xda\x00\xf3\x2e\xe8\x4e\x75\x7c\x38\x13\x2c\xcf\xe1\xd4\xcf\xd3\xf2\xe7\x99\x7b\x06\x79\x57\x67\xad\x03\xb6\x46\x2f\xef\x27\x17\x75\x76\x0c\x79\xde\xd5\xa3\x2c\xe7\x9d\xd8\xe2\xea\x69\x59\x05\xe5\xda\xbe\x65\x01\x8e\x06\x2d\xad\xaa\xf5\x4a\x57\xea\x3a\xd1\x02\x7b\x10\x9a\xb9\x57\xe3\x48\x46\x5e\xae\x56\xaf\x47\xf5\xcd\x3b\xc9\x59\x10\xb6\xfa\xc9\xcd\x1b\x8f\xd8\x30\x4f\x38\x2b\x15\xf6\x06\x06\x59\xcc\xb2\xf1\xd0\xe3\x94\x92\xc0\x12\x4b\xab\x2f\xdc\x69\xb3\x59\xca\x83\x7a\xa1\xb8\xc5\x9f\x97\x73\x31\x14\xea\x5a\x7b\x56\xb1\x18\xb5\x65\xd5\x42\xbf\x70\x46\x9e\x24\xfa\x9a\xce\xe1\x20\xbc\x6e\x71\x75\x48\xf8\x98\x39\xe3\x43\xbd\x36\x85\x6e\xdb\x15\x2b\xec\xb7\x71\x58\x1c\x13\x59\xb4\xb8\xc6\x94\x6c\x40\xb4\x4f\xba\x9d\x26\x94\x3e\xe8\x18\x35\x4e\x73\x9a\x2f\xf5\x70\xc0\xe1\x2d\xb5\x5f\xc6\x38\xe2\xa6\xb1\xb2\xc7\x3f\x41\xd4\xca\x62\x1d\x69\x65\xb0\x69\xab\xa5\x04\xa3\x0c\x4d\x7c\x9a\xc4\x32\xca\x2c\xf1\xa9\xba\xa1\x90\x5e\x14\x29\x29\xeb\x45\xdd\x03\x24\xb5\x22\x63\xd9\xed\x4e\x68\x94\xdc\x40\x84\x22\xb1\xa7\xc1\x69\xea\x81\x8c\xc3\x59\x6d\x76\x1a\xea\x4e\xda\x26\x27\x4b\x65\x92\x4a\x87\x05\xc2\x17\xff\x0f\x64\x9c\x8f\x87\xb4\x2c\xee\x57\xbe\x68\x97\x77\x6a\x1a\xdb\x99\x51\x8c\x63\x43\x3b\x04\x89\x49\x94\xd7\x89\xf9\x47\x4a\x82\x7b\x21\x31\x97\x45\xcd\xcd\xb2\xa4\x0c\xa8\x37\x9a\x90\xc1\x61\x89\xb1\x11\x6a\xdb\x9c\x8a\x95\x1a\x78\xdf\xd5\x0b\x18\xd9\xeb\x30\x71\x4c\xed\x21\xbe\x41\x00\x83\x18\x93\x71\x57\x97\x4d\x94\x7e\x1c\x7d\x72\x25\x58\xee\x9e\x80\x17\x56\xe5\x28\x4b\xeb\x58\xad\x7e\x72\xf3\x36\xfd\xc6\x9b\xf2\x71\x95\x92\x0a\x7b\xc4\xf3\x44\x56\x44\x0d\xe1\xac\x85\xdd\x96\x4e\x4d\xc8\x69\x32\xde\xc2\x6b\xa7\x1e\xbe\xfa\x42\xdb\xac\x57\x75\xb8\x53\x95\xd5\xbb\x3a\xcd\x22\xda\xdf\x6b\xcd\xc6\xb4\xbf\xff\xde\x1b\xb7\xbc\x87\xbd\xf1\xfb\x6c\x36\xf3\x94\xbf\x7f\x92\x8c\x30\x1b\x2f\xc7\x56\xed\x6c\xc7\x73\xde\x5c\xaf\x10\x94\x52\x2a\x4a\xb5\xfa\x57\xdc\xf0\xa3\x5e\xd3\xd5\x80\x2b\xfa\x15\x65\x5a\xe6\x75\xeb\xf3\xee\x14\x2d\x96\xc5\x55\x40\xe5\x55\xe9\x4f\x3b\x14\x1f\x66\x74\x1e\x6e\x0f\x99\x67\x85\xaa\xbf\x3c\xfb\xf2\xec\x9f\x01\x00\x00\xff\xff\x96\x4a\x9e\xdc\x0f\x8c\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xc4, 0xc4, 0x83, 0xe9, 0x55, 0x85, 0x93, 0x8, 0xea, 0xe, 0x85, 0xcb, 0xb8, 0x84, 0x1b, 0xa3, 0xb2, 0x71, 0xa9, 0x6b, 0x8b, 0x8, 0xaf, 0x9f, 0x54, 0x1b, 0x38, 0x52, 0x89, 0xb8, 0x48}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
