// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/eks"
)

type FakeFargateManager struct {
	CreateProfileStub        func(*v1alpha5.FargateProfile, bool) error
	createProfileMutex       sync.RWMutex
	createProfileArgsForCall []struct {
		arg1 *v1alpha5.FargateProfile
		arg2 bool
	}
	createProfileReturns struct {
		result1 error
	}
	createProfileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFargateManager) CreateProfile(arg1 *v1alpha5.FargateProfile, arg2 bool) error {
	fake.createProfileMutex.Lock()
	ret, specificReturn := fake.createProfileReturnsOnCall[len(fake.createProfileArgsForCall)]
	fake.createProfileArgsForCall = append(fake.createProfileArgsForCall, struct {
		arg1 *v1alpha5.FargateProfile
		arg2 bool
	}{arg1, arg2})
	stub := fake.CreateProfileStub
	fakeReturns := fake.createProfileReturns
	fake.recordInvocation("CreateProfile", []interface{}{arg1, arg2})
	fake.createProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFargateManager) CreateProfileCallCount() int {
	fake.createProfileMutex.RLock()
	defer fake.createProfileMutex.RUnlock()
	return len(fake.createProfileArgsForCall)
}

func (fake *FakeFargateManager) CreateProfileCalls(stub func(*v1alpha5.FargateProfile, bool) error) {
	fake.createProfileMutex.Lock()
	defer fake.createProfileMutex.Unlock()
	fake.CreateProfileStub = stub
}

func (fake *FakeFargateManager) CreateProfileArgsForCall(i int) (*v1alpha5.FargateProfile, bool) {
	fake.createProfileMutex.RLock()
	defer fake.createProfileMutex.RUnlock()
	argsForCall := fake.createProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFargateManager) CreateProfileReturns(result1 error) {
	fake.createProfileMutex.Lock()
	defer fake.createProfileMutex.Unlock()
	fake.CreateProfileStub = nil
	fake.createProfileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFargateManager) CreateProfileReturnsOnCall(i int, result1 error) {
	fake.createProfileMutex.Lock()
	defer fake.createProfileMutex.Unlock()
	fake.CreateProfileStub = nil
	if fake.createProfileReturnsOnCall == nil {
		fake.createProfileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createProfileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFargateManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProfileMutex.RLock()
	defer fake.createProfileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFargateManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eks.FargateManager = new(FakeFargateManager)
