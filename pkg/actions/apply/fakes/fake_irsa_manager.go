// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/weaveworks/eksctl/pkg/actions/apply"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/utils/tasks"
)

type FakeIRSAManager struct {
	CreateTasksStub        func([]*v1alpha5.ClusterIAMServiceAccount) *tasks.TaskTree
	createTasksMutex       sync.RWMutex
	createTasksArgsForCall []struct {
		arg1 []*v1alpha5.ClusterIAMServiceAccount
	}
	createTasksReturns struct {
		result1 *tasks.TaskTree
	}
	createTasksReturnsOnCall map[int]struct {
		result1 *tasks.TaskTree
	}
	DeleteTasksStub        func([]string) (*tasks.TaskTree, error)
	deleteTasksMutex       sync.RWMutex
	deleteTasksArgsForCall []struct {
		arg1 []string
	}
	deleteTasksReturns struct {
		result1 *tasks.TaskTree
		result2 error
	}
	deleteTasksReturnsOnCall map[int]struct {
		result1 *tasks.TaskTree
		result2 error
	}
	IsUpToDateStub        func(*v1alpha5.ClusterIAMServiceAccount, *cloudformation.Stack) (bool, error)
	isUpToDateMutex       sync.RWMutex
	isUpToDateArgsForCall []struct {
		arg1 *v1alpha5.ClusterIAMServiceAccount
		arg2 *cloudformation.Stack
	}
	isUpToDateReturns struct {
		result1 bool
		result2 error
	}
	isUpToDateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	UpdateTasksStub        func([]*v1alpha5.ClusterIAMServiceAccount) (*tasks.TaskTree, error)
	updateTasksMutex       sync.RWMutex
	updateTasksArgsForCall []struct {
		arg1 []*v1alpha5.ClusterIAMServiceAccount
	}
	updateTasksReturns struct {
		result1 *tasks.TaskTree
		result2 error
	}
	updateTasksReturnsOnCall map[int]struct {
		result1 *tasks.TaskTree
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIRSAManager) CreateTasks(arg1 []*v1alpha5.ClusterIAMServiceAccount) *tasks.TaskTree {
	var arg1Copy []*v1alpha5.ClusterIAMServiceAccount
	if arg1 != nil {
		arg1Copy = make([]*v1alpha5.ClusterIAMServiceAccount, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createTasksMutex.Lock()
	ret, specificReturn := fake.createTasksReturnsOnCall[len(fake.createTasksArgsForCall)]
	fake.createTasksArgsForCall = append(fake.createTasksArgsForCall, struct {
		arg1 []*v1alpha5.ClusterIAMServiceAccount
	}{arg1Copy})
	stub := fake.CreateTasksStub
	fakeReturns := fake.createTasksReturns
	fake.recordInvocation("CreateTasks", []interface{}{arg1Copy})
	fake.createTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIRSAManager) CreateTasksCallCount() int {
	fake.createTasksMutex.RLock()
	defer fake.createTasksMutex.RUnlock()
	return len(fake.createTasksArgsForCall)
}

func (fake *FakeIRSAManager) CreateTasksCalls(stub func([]*v1alpha5.ClusterIAMServiceAccount) *tasks.TaskTree) {
	fake.createTasksMutex.Lock()
	defer fake.createTasksMutex.Unlock()
	fake.CreateTasksStub = stub
}

func (fake *FakeIRSAManager) CreateTasksArgsForCall(i int) []*v1alpha5.ClusterIAMServiceAccount {
	fake.createTasksMutex.RLock()
	defer fake.createTasksMutex.RUnlock()
	argsForCall := fake.createTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIRSAManager) CreateTasksReturns(result1 *tasks.TaskTree) {
	fake.createTasksMutex.Lock()
	defer fake.createTasksMutex.Unlock()
	fake.CreateTasksStub = nil
	fake.createTasksReturns = struct {
		result1 *tasks.TaskTree
	}{result1}
}

func (fake *FakeIRSAManager) CreateTasksReturnsOnCall(i int, result1 *tasks.TaskTree) {
	fake.createTasksMutex.Lock()
	defer fake.createTasksMutex.Unlock()
	fake.CreateTasksStub = nil
	if fake.createTasksReturnsOnCall == nil {
		fake.createTasksReturnsOnCall = make(map[int]struct {
			result1 *tasks.TaskTree
		})
	}
	fake.createTasksReturnsOnCall[i] = struct {
		result1 *tasks.TaskTree
	}{result1}
}

func (fake *FakeIRSAManager) DeleteTasks(arg1 []string) (*tasks.TaskTree, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteTasksMutex.Lock()
	ret, specificReturn := fake.deleteTasksReturnsOnCall[len(fake.deleteTasksArgsForCall)]
	fake.deleteTasksArgsForCall = append(fake.deleteTasksArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.DeleteTasksStub
	fakeReturns := fake.deleteTasksReturns
	fake.recordInvocation("DeleteTasks", []interface{}{arg1Copy})
	fake.deleteTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIRSAManager) DeleteTasksCallCount() int {
	fake.deleteTasksMutex.RLock()
	defer fake.deleteTasksMutex.RUnlock()
	return len(fake.deleteTasksArgsForCall)
}

func (fake *FakeIRSAManager) DeleteTasksCalls(stub func([]string) (*tasks.TaskTree, error)) {
	fake.deleteTasksMutex.Lock()
	defer fake.deleteTasksMutex.Unlock()
	fake.DeleteTasksStub = stub
}

func (fake *FakeIRSAManager) DeleteTasksArgsForCall(i int) []string {
	fake.deleteTasksMutex.RLock()
	defer fake.deleteTasksMutex.RUnlock()
	argsForCall := fake.deleteTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIRSAManager) DeleteTasksReturns(result1 *tasks.TaskTree, result2 error) {
	fake.deleteTasksMutex.Lock()
	defer fake.deleteTasksMutex.Unlock()
	fake.DeleteTasksStub = nil
	fake.deleteTasksReturns = struct {
		result1 *tasks.TaskTree
		result2 error
	}{result1, result2}
}

func (fake *FakeIRSAManager) DeleteTasksReturnsOnCall(i int, result1 *tasks.TaskTree, result2 error) {
	fake.deleteTasksMutex.Lock()
	defer fake.deleteTasksMutex.Unlock()
	fake.DeleteTasksStub = nil
	if fake.deleteTasksReturnsOnCall == nil {
		fake.deleteTasksReturnsOnCall = make(map[int]struct {
			result1 *tasks.TaskTree
			result2 error
		})
	}
	fake.deleteTasksReturnsOnCall[i] = struct {
		result1 *tasks.TaskTree
		result2 error
	}{result1, result2}
}

func (fake *FakeIRSAManager) IsUpToDate(arg1 *v1alpha5.ClusterIAMServiceAccount, arg2 *cloudformation.Stack) (bool, error) {
	fake.isUpToDateMutex.Lock()
	ret, specificReturn := fake.isUpToDateReturnsOnCall[len(fake.isUpToDateArgsForCall)]
	fake.isUpToDateArgsForCall = append(fake.isUpToDateArgsForCall, struct {
		arg1 *v1alpha5.ClusterIAMServiceAccount
		arg2 *cloudformation.Stack
	}{arg1, arg2})
	stub := fake.IsUpToDateStub
	fakeReturns := fake.isUpToDateReturns
	fake.recordInvocation("IsUpToDate", []interface{}{arg1, arg2})
	fake.isUpToDateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIRSAManager) IsUpToDateCallCount() int {
	fake.isUpToDateMutex.RLock()
	defer fake.isUpToDateMutex.RUnlock()
	return len(fake.isUpToDateArgsForCall)
}

func (fake *FakeIRSAManager) IsUpToDateCalls(stub func(*v1alpha5.ClusterIAMServiceAccount, *cloudformation.Stack) (bool, error)) {
	fake.isUpToDateMutex.Lock()
	defer fake.isUpToDateMutex.Unlock()
	fake.IsUpToDateStub = stub
}

func (fake *FakeIRSAManager) IsUpToDateArgsForCall(i int) (*v1alpha5.ClusterIAMServiceAccount, *cloudformation.Stack) {
	fake.isUpToDateMutex.RLock()
	defer fake.isUpToDateMutex.RUnlock()
	argsForCall := fake.isUpToDateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIRSAManager) IsUpToDateReturns(result1 bool, result2 error) {
	fake.isUpToDateMutex.Lock()
	defer fake.isUpToDateMutex.Unlock()
	fake.IsUpToDateStub = nil
	fake.isUpToDateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeIRSAManager) IsUpToDateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isUpToDateMutex.Lock()
	defer fake.isUpToDateMutex.Unlock()
	fake.IsUpToDateStub = nil
	if fake.isUpToDateReturnsOnCall == nil {
		fake.isUpToDateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isUpToDateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeIRSAManager) UpdateTasks(arg1 []*v1alpha5.ClusterIAMServiceAccount) (*tasks.TaskTree, error) {
	var arg1Copy []*v1alpha5.ClusterIAMServiceAccount
	if arg1 != nil {
		arg1Copy = make([]*v1alpha5.ClusterIAMServiceAccount, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.updateTasksMutex.Lock()
	ret, specificReturn := fake.updateTasksReturnsOnCall[len(fake.updateTasksArgsForCall)]
	fake.updateTasksArgsForCall = append(fake.updateTasksArgsForCall, struct {
		arg1 []*v1alpha5.ClusterIAMServiceAccount
	}{arg1Copy})
	stub := fake.UpdateTasksStub
	fakeReturns := fake.updateTasksReturns
	fake.recordInvocation("UpdateTasks", []interface{}{arg1Copy})
	fake.updateTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIRSAManager) UpdateTasksCallCount() int {
	fake.updateTasksMutex.RLock()
	defer fake.updateTasksMutex.RUnlock()
	return len(fake.updateTasksArgsForCall)
}

func (fake *FakeIRSAManager) UpdateTasksCalls(stub func([]*v1alpha5.ClusterIAMServiceAccount) (*tasks.TaskTree, error)) {
	fake.updateTasksMutex.Lock()
	defer fake.updateTasksMutex.Unlock()
	fake.UpdateTasksStub = stub
}

func (fake *FakeIRSAManager) UpdateTasksArgsForCall(i int) []*v1alpha5.ClusterIAMServiceAccount {
	fake.updateTasksMutex.RLock()
	defer fake.updateTasksMutex.RUnlock()
	argsForCall := fake.updateTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIRSAManager) UpdateTasksReturns(result1 *tasks.TaskTree, result2 error) {
	fake.updateTasksMutex.Lock()
	defer fake.updateTasksMutex.Unlock()
	fake.UpdateTasksStub = nil
	fake.updateTasksReturns = struct {
		result1 *tasks.TaskTree
		result2 error
	}{result1, result2}
}

func (fake *FakeIRSAManager) UpdateTasksReturnsOnCall(i int, result1 *tasks.TaskTree, result2 error) {
	fake.updateTasksMutex.Lock()
	defer fake.updateTasksMutex.Unlock()
	fake.UpdateTasksStub = nil
	if fake.updateTasksReturnsOnCall == nil {
		fake.updateTasksReturnsOnCall = make(map[int]struct {
			result1 *tasks.TaskTree
			result2 error
		})
	}
	fake.updateTasksReturnsOnCall[i] = struct {
		result1 *tasks.TaskTree
		result2 error
	}{result1, result2}
}

func (fake *FakeIRSAManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTasksMutex.RLock()
	defer fake.createTasksMutex.RUnlock()
	fake.deleteTasksMutex.RLock()
	defer fake.deleteTasksMutex.RUnlock()
	fake.isUpToDateMutex.RLock()
	defer fake.isUpToDateMutex.RUnlock()
	fake.updateTasksMutex.RLock()
	defer fake.updateTasksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIRSAManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apply.IRSAManager = new(FakeIRSAManager)
