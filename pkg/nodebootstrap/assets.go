// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/authenticator.sh
// assets/get_credentials.sh
// assets/get_metadata.sh
// assets/kubeconfig.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xfb\x46\x10\xbd\xfb\x53\xac\x04\x87\x56\x62\x6d\xc8\x2f\xe5\x80\xe4\x43\x44\x02\x42\x4d\x01\x11\x10\x95\xda\x2a\x9a\xec\x8e\xc3\x28\xf6\xac\x35\x3b\x4e\xf8\x23\xbe\x7b\xe5\x38\x46\x01\xaa\xea\x27\x5f\xbc\xfb\x66\xdf\xbe\x79\xf3\xec\x03\x83\xab\xe8\xb4\xb4\xb1\x46\x47\x05\x39\x13\x5f\xa2\x62\xe5\x8d\x97\x50\x5b\x62\xd3\x30\xa9\x29\x82\x98\x55\xb3\xc0\x12\xf5\x68\xbb\x18\x55\xf0\x1a\xd8\x4c\x89\x9b\x67\x33\x30\xbf\x8c\xa6\x83\x5f\x93\xe4\xaf\x19\xca\x9a\x1c\xfe\x93\x1c\x98\x69\x70\x50\x9a\x0a\x15\x3c\x28\x98\x1a\x04\x2a\x54\x94\x78\x66\xee\x26\x97\x57\x37\xd7\x47\x66\xf4\x38\x9b\x8f\x27\x17\xa3\x87\xe9\xfd\xbc\xdb\x4b\x26\xbc\x26\x09\x5c\x21\xeb\x05\x95\x98\x67\xa8\x2e\xeb\x24\x66\x3d\x57\x8a\xbc\x4e\x0e\xcc\x65\x19\x16\x50\x1a\x60\x6f\xa2\x82\x92\xfb\x74\xc7\x1f\xa3\x3f\xe7\xb7\x37\xe3\xd9\x91\x39\x9f\x3e\xcc\xee\x27\x77\xf3\xf1\xf5\xec\x7f\xe9\x77\xfd\xed\xd8\x3b\xf9\x1c\xd8\xfe\x07\xf9\xf5\xcd\x78\x32\xbf\xba\xfd\x29\xba\xb2\x25\xda\x92\x26\x93\x67\x74\x33\x05\xd1\x7c\xef\x35\x6b\xa2\x64\x0b\xe2\xfe\x80\xf9\x3b\x31\xc6\x5a\xf0\x5e\x30\xc6\xfc\x38\xdd\x3e\xbb\x5d\x0e\x1e\x2d\xd5\xf9\xe1\xdb\x4e\xc2\xfb\x0e\x70\x65\x13\x15\xc5\x7a\x8e\xf9\xe1\xdb\x5e\xcb\x7d\x41\x05\xcf\xb6\x0e\xbe\x45\x7b\x6b\x7a\x08\x1a\x7d\x42\x56\x72\xa0\x14\xd8\x6a\x58\x21\xdb\x0d\x2e\x9e\x42\x58\xed\x95\x04\xa1\xd7\xae\xa2\x0a\x1e\xf3\xc7\xcf\x05\x65\x19\x36\xb6\x16\x5a\x53\x89\x4b\xf4\xb9\x4a\x83\x3b\xac\x0e\xde\x12\x17\x02\xd6\x05\x56\x20\x46\xb1\x54\xc1\x12\xf3\xd3\xe3\xc1\xf0\xf8\xe4\x64\xf8\x63\xf8\xdb\x20\xf5\x2b\x49\xd1\x49\x7a\xf8\xf6\x3d\x17\xef\x29\x6c\x03\x07\x9b\x98\xba\x50\xb5\x1e\x67\x35\x34\x11\x2d\x54\xfe\x74\x78\xf6\x23\x3d\xf9\x30\x22\x34\xde\xd6\x12\xd6\xe4\x51\x72\xd8\xc4\xaf\x0e\x85\x0a\x88\xf3\xdd\xb2\x1b\x4f\x5f\xc2\x64\x17\xc4\xd6\x93\xe4\x59\xa8\x35\x73\x4c\xed\x68\xf6\x60\x17\xb8\xe8\xf0\x76\xd4\x2d\xce\xa8\xa9\xef\x2b\x3e\xfa\x93\x86\x95\x2a\xcc\x7d\x70\x2b\x94\x7e\x7a\xa8\x9b\x20\x2b\x5b\x97\xcd\xb2\x95\xc0\xd4\x9f\x5b\x4a\x68\x6a\xeb\x85\xd6\x28\x79\xb7\x2a\x7a\xe1\x82\x4b\xda\x2a\x6f\x87\xbf\xef\x6b\x1b\x98\x56\x0f\x2d\xbf\x05\xaf\xdb\x4e\x5f\xa0\xea\x7b\x2b\x10\xb4\x11\xb4\x4b\x50\x8c\xf9\x5d\x50\x50\xfc\xbd\x4b\x5c\xfb\xd1\xa2\x9c\xa3\x68\xfb\x03\x00\xfd\x74\x09\x70\xe0\x97\x2a\x34\x71\x9b\x81\xbc\x80\x32\xe2\x87\xa3\x84\xac\xd6\x81\x2d\xbe\x86\xdf\x41\xea\x44\x93\x7f\x03\x00\x00\xff\xff\xa8\xe6\x02\x07\x5e\x04\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 1118, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _authenticatorSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcf\x4a\xf5\x30\x14\x04\xf0\x7d\x9e\x62\xbe\xdb\x0f\x54\xb0\xed\x33\x5c\xa4\x2b\xff\x2c\xac\xe2\xb2\x3d\xb7\x3d\x6d\x43\xd3\x9c\x90\x9c\xdc\x22\xe2\xbb\x8b\xe8\x42\xc1\xed\x0c\x03\xf3\x2b\xfe\xd5\x27\xeb\xeb\xb4\xa0\xe4\x6c\x4c\x81\xd6\x6e\xc1\x31\xf6\x48\x21\x70\xc4\x24\x11\x94\x75\x61\xaf\x76\x20\x95\x78\x8d\x24\xd8\x19\x03\x79\x44\xa6\x11\xc7\x97\xb6\x6b\x6e\xdb\xee\xe6\xee\xb9\x7d\x6a\x1e\xbb\x87\xe3\x7d\x83\x29\xca\x86\x7e\x63\xa5\x91\x94\x2a\xf6\xe7\xde\x14\xb0\x3e\xe9\xe7\x44\x26\x2c\x74\xb6\x7e\x86\x0a\x72\x18\x49\x19\xfd\x9a\x4f\x3c\x88\x9f\xec\x5c\xbd\xd2\xe6\x7a\x5c\x52\xfa\x4e\xd5\xe1\xab\xe9\x31\x0a\x27\x7f\xa1\x48\x39\x04\x89\x8a\xe0\xf2\x6c\x3d\x26\xcb\x6e\x4c\x57\xc6\x54\xa8\x59\x87\x9a\xd7\x34\xa8\xab\x7f\x1e\x30\x86\xf6\x54\x5a\xda\xca\x5f\x1e\xa8\xac\xec\x51\x5a\x1c\xfe\xbf\xfd\x65\x79\x3f\x7c\x04\x00\x00\xff\xff\xf7\xe0\x0f\x10\x24\x01\x00\x00")

func authenticatorShBytes() ([]byte, error) {
	return bindataRead(
		_authenticatorSh,
		"authenticator.sh",
	)
}

func authenticatorSh() (*asset, error) {
	bytes, err := authenticatorShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "authenticator.sh", size: 292, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _get_credentialsSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcd\x6e\xdb\x30\x10\x84\xef\xfb\x14\x53\xc6\x40\x92\x83\xa4\x4b\xd1\x5b\x0a\xb8\xa9\x12\x18\x71\x6d\xc0\x8e\xd1\x4b\x01\x85\xa2\xd6\x35\x63\x99\x54\xc9\x55\x7e\xe0\xf8\xdd\x0b\xa5\x92\x91\xe6\x90\xe3\xee\x60\x86\xc3\x8f\x3c\xf9\x94\x95\xd6\x65\xa5\x8e\x1b\xa2\x13\xcc\x4b\xd1\xd6\xc1\xd4\x6d\x14\x0e\x30\x81\x2b\x76\x62\x75\x1d\xa1\x5d\x85\xb6\xa9\xb4\x30\xee\xb6\x6d\xc9\xc6\xbb\xb5\xfd\x9d\x3e\xeb\x5d\x7d\x87\x47\x2b\x1b\xe8\xc6\x46\x0e\x0f\x1c\xb0\x5a\x4c\x89\x22\x0b\x12\x0f\x0e\x81\x9f\xac\x0c\x63\x63\x1b\x5e\x6b\x5b\x0f\xb3\xf3\xad\x8b\x2c\x44\xd1\xb7\xc1\x30\x32\x16\x93\xf1\x36\x1a\xa9\xb3\x1d\x8b\xae\xb4\xe8\x94\xdd\x03\x11\x3f\x35\x3e\x08\xc6\x3f\x97\xc5\xf7\xfc\x6a\xbc\x9a\xde\x16\x8b\xfc\x7a\x32\x9f\x0d\xca\xcd\xea\x5b\x7e\x39\x9f\x5d\x4d\xae\x2f\xd4\xdb\x98\x77\x6d\x15\x51\xc5\xd1\x04\x5b\x72\xd1\x5f\xf4\xec\x1c\x7b\x02\xf4\x63\x04\x6f\x23\x06\x39\x19\x38\xfc\x22\x00\x48\x12\xdf\x4a\xd3\x0a\xee\xa3\x77\xc7\x9d\xd3\x3b\x86\x1a\xed\xbb\x5e\xf9\xcd\xb2\xb8\x9c\xae\x96\xb7\xf9\xa2\x98\x8d\x7f\xe4\x07\x45\x07\xa2\x3e\x65\xe2\xd6\xfe\x42\x8d\xce\xde\x1f\x7e\xae\x88\xd8\x55\x8d\xb7\x4e\x3a\x9d\xcd\xc6\x77\x81\x6f\x6c\x07\x85\x17\xdc\xff\x41\x12\x90\xf6\xeb\x74\xb0\xbc\xda\x3f\xb4\x9c\x1e\x3d\x86\x83\xd8\xb5\x35\x5a\x78\xdc\xca\xc6\x07\x2b\xcf\x69\x47\xf8\x14\x2f\x28\x75\xe4\x2f\x9f\x91\x54\xf8\xfa\xdf\x2b\x18\x9d\x9a\x20\x44\xaf\x18\xa5\xc6\x3f\x94\x88\x2c\x47\x3e\x9d\x14\x1c\x0b\x47\x24\x49\xff\x07\xd4\x68\x3f\x54\x3c\x28\xa2\xbf\x01\x00\x00\xff\xff\xe2\xe9\xad\xa5\x69\x02\x00\x00")

func get_credentialsShBytes() ([]byte, error) {
	return bindataRead(
		_get_credentialsSh,
		"get_credentials.sh",
	)
}

func get_credentialsSh() (*asset, error) {
	bytes, err := get_credentialsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "get_credentials.sh", size: 617, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _get_metadataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6e\xe3\x36\x17\x7d\xd7\x2a\xee\xc7\x18\x70\x0c\x44\xd2\xe7\x34\x69\xa6\x01\x34\x45\x50\xbb\x85\x91\x69\x3c\x98\x64\xda\x87\x76\xe0\xd0\xd2\xb5\xc4\x31\x4d\x6a\x78\xaf\xec\x18\x8e\x81\xee\xa1\x1b\xe8\x5a\xba\x94\xae\xa4\xa0\xfc\x13\xd5\x49\xdb\xe9\x93\x20\xf2\x9e\x73\xee\xdf\xe1\xd1\xff\xe2\xb1\x32\xf1\x58\x52\x11\x04\x47\x30\x1c\xb3\x54\x06\x66\xc8\x32\x93\x2c\x41\x8e\x6d\xc5\xc0\x05\x82\x32\xc4\xd2\xa4\x78\x02\xa5\x74\x84\x80\x53\x4a\x59\x03\xcb\x1c\xe6\x52\x57\x08\x6c\x41\x9a\x0c\x16\x4e\x31\x82\x47\xdd\xef\x58\x22\x34\xf3\xfb\xfa\xf2\x7e\x5a\x8d\x51\x23\x47\xda\xa6\x52\xd7\xe7\xc1\x11\x4c\xac\x03\xcb\x05\x3a\xa0\xd4\xa9\x92\xa9\x8e\xf5\xa2\xb4\x24\xc6\x59\x06\x95\x51\xec\x05\x2a\xc2\x20\x20\x64\x08\x2d\xa0\x73\xf8\xa0\x78\xf7\x5b\xaa\x12\x27\x52\xe9\xdd\xbf\xb1\x95\x21\x64\x5f\xd4\x02\x21\xb5\x95\xce\x3c\xbc\xa6\x9d\x58\xad\xed\x42\x99\xfc\x04\xc6\x15\xfb\x7b\x62\xa5\x35\x18\xc4\x0c\x3e\x7e\xf2\x4a\x39\x32\x38\xcc\x95\x35\x75\x32\xbb\xea\x61\xd0\xbb\x0c\x8e\x40\x2e\x08\xc2\xd0\x56\x5c\xfa\xee\xe0\x03\x43\x18\x6e\xa3\x2b\x0a\x17\x48\x1c\x9e\x02\xa6\xa7\x90\xa1\x2f\x69\x8c\x21\xcb\xdc\x43\x26\x4a\x33\x3a\x82\x1b\x39\xc3\xc4\x21\xd9\xca\xa5\x18\xf2\xb2\xc4\x93\x1f\x7c\x17\x29\xd9\x2b\xfd\x35\x44\x65\xfb\x80\xf0\xff\xdd\x0b\xfc\xe2\xe2\xec\xfc\x14\xb1\x7b\x96\xbd\xca\x2e\x20\x0c\x3f\x55\xe8\x96\x20\xee\x64\x4e\x3f\x7d\x7d\x8d\xcb\x24\x69\x6f\x26\x14\xa5\xba\x22\x46\x17\x4d\x5f\x51\xa4\x6c\x3c\xef\x4a\x5d\x16\xb2\x1b\x6f\xcf\x43\x23\x67\xd8\xfe\x10\xd5\xec\xc2\xb7\xeb\x6e\xd8\x1b\x5e\x82\x9c\x5b\x95\x41\x21\xe7\xca\xe4\xbe\x21\x99\x05\xa9\x35\x70\xa1\x08\xfe\xf8\xe5\xd7\xdf\x7f\x2b\x98\x4b\xba\x8c\xe3\x5c\x71\x51\x8d\xa3\xd4\xce\xe2\x05\xca\x39\x2e\xac\x9b\x52\xbc\x11\x8f\x15\x51\x85\x14\x77\xcf\x2f\x82\x60\x57\xd9\xc0\x4c\x6c\x22\x5a\xc7\x69\xe5\x34\x84\x21\x29\x8d\x86\xc1\xd3\x5d\xc6\x71\xf7\xcb\xaf\xa2\xd3\xf3\xb3\x68\xfb\x8d\xb5\x64\x24\x8e\xb3\xa5\x91\x33\x95\xc6\x3b\x8e\x50\x65\x68\x58\xf1\x32\xce\x6c\x5a\xcd\xd0\x70\x47\x34\x14\x7a\x9e\x1f\xd3\xc2\x82\x68\xad\x9a\xba\x6b\x01\x8f\x7e\xc2\xa1\x83\x68\x7f\x9e\x75\xc4\x06\x5a\xa6\x38\x78\xfb\x39\xd0\xd2\xa9\xb9\x64\x1c\x94\x5e\xf5\xea\xc7\xdb\x51\xaf\xff\xed\xd5\xfb\x37\x77\xa3\x77\xfd\xef\x06\xc3\x9b\xcf\xa1\xd8\xac\x8b\xc7\xe3\x43\x69\x1d\xc3\x73\x1a\x3f\x8c\xbd\x13\x27\x4a\x23\x28\x02\x65\x18\x4d\x86\x59\xc3\x35\xde\xbc\x4f\xd6\x21\x58\xa0\xd6\xfe\xdb\x74\x0f\x9d\x00\x59\x50\xdc\xf6\x0c\x40\x6a\x56\x6a\xef\x03\x37\x93\x1c\x6c\x52\x7d\xa1\x8c\xd6\xea\xf9\xe1\x5a\x00\xbc\x86\x18\x39\xdd\xcd\xb8\x69\xf3\x60\x4b\x76\x33\xec\xf5\x47\x83\xb7\xc9\xb6\xfe\xba\xb1\x6b\x71\x00\x7c\xf6\x18\x04\x41\x8e\x3c\xf2\x56\x39\xee\xc0\x2a\x80\xda\x67\xcf\x6d\xf4\x73\x00\x00\x4f\xfe\xfb\x48\xd6\xec\xcf\x76\x06\x13\xff\xee\x30\x71\x18\xf4\xe4\xb1\xc6\xd8\x7a\x6b\x11\xac\x37\x89\x6d\x1d\x33\xf2\x8e\xd9\x26\x08\xdb\x71\xb6\xa3\xda\x79\x1f\xe0\x11\x08\x35\xa6\x7c\x1c\x5d\xe3\x12\x92\x04\xc4\x7f\xb0\xa1\xe8\xc0\x23\x6c\x9c\xd8\xf6\xa2\x69\x81\xe9\x74\x2f\x6b\x17\x06\xb3\xbd\x2e\xcb\x3c\x11\xbe\x83\xce\x20\x63\xcd\xb9\x0d\x8c\x5b\xab\xee\x5a\xec\x93\x0b\xa5\xcb\xeb\x67\x5a\xb4\x56\x2c\xf3\xb5\xf8\xe7\x7c\x5b\x2c\xf3\x83\x34\x7c\xd3\xfd\x4a\xef\x86\xe3\x97\xb6\xd9\x8b\xe6\xba\xfb\xfb\x7a\xcd\x0f\x1b\xe6\x41\xde\xca\xf0\x52\xf0\x0b\x85\xfa\xfb\x26\x7e\x2d\x3a\x02\x12\x10\xf5\xa5\x08\x1a\x4b\xdb\xbf\xbe\x1d\x7d\xf3\xe6\xfd\xed\x5d\xff\xdd\xe8\xe6\xea\xfb\x7e\x72\x08\x04\x78\xfd\xf7\x1b\xfb\x67\x00\x00\x00\xff\xff\x59\x14\x0f\xe6\x01\x07\x00\x00")

func get_metadataShBytes() ([]byte, error) {
	return bindataRead(
		_get_metadataSh,
		"get_metadata.sh",
	)
}

func get_metadataSh() (*asset, error) {
	bytes, err := get_metadataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "get_metadata.sh", size: 1793, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeconfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x8f\xd3\x30\x10\x85\xef\xfe\x15\x4f\xdb\x2b\x4d\xd5\x1b\xca\x0d\xad\x38\x20\x21\x90\x10\x70\xa5\x83\xf3\xda\x8c\xea\xd8\x91\x67\xd2\xdd\xfd\xf7\xc8\x21\x0b\x3d\xec\x6d\x34\x33\xef\xbd\xf1\xe7\x1d\x3e\x65\x75\x95\x84\xd3\x75\xf9\xcd\x58\xf2\x59\x2f\xdd\x8b\x4c\xe9\x04\xe7\x34\x27\x71\x86\x1d\x4e\x17\xfa\xaf\x58\x39\x30\xb7\x65\xeb\x6c\x3c\xe1\xa9\xaa\xd3\x50\x16\xc7\xe3\x07\x44\x56\x7f\x07\xc9\x03\x8c\x6e\x90\x59\x8d\xf5\xc6\x8a\x1f\xdf\x3e\x87\x1d\xbe\x7c\xfd\xfe\xb1\x87\x8f\x34\x22\x96\x69\x62\x76\xc3\x93\xa6\x84\x5c\x1c\x32\xcf\x94\x0a\x39\x3b\x2b\x7c\x54\xc3\x59\x13\x0d\x97\x66\xb5\xcc\x83\x38\x87\x20\xb3\xfe\x64\x35\x2d\xb9\xc7\xed\x18\xae\x9a\x87\x1e\x8f\xeb\xc5\x21\xa6\xc5\x9c\xd5\xfa\xb0\xc7\x56\xf7\x01\xc0\x7a\x96\x9e\x35\x8a\x73\x2f\x8b\x8f\xa5\xaa\xbf\xf4\x78\x38\xd0\xe3\x81\x57\x8b\x9e\x0e\x51\xba\x58\xfd\x21\x00\x59\x26\xf6\x68\x24\x6a\xa6\xd3\x42\x2c\xd9\xf9\xec\xab\xef\xff\x61\xa2\x07\x60\x9b\x6d\x39\x5b\xe8\xbd\xb8\xf5\x17\x7b\x6d\x26\x3a\x10\xe2\x52\x2b\xb3\xef\x5f\xc5\xff\xfc\xda\xe2\x9b\x31\xab\xc3\xea\xc5\x67\xc6\xbf\x15\x70\x0f\x23\x26\x65\xf6\xae\x3d\xaf\xfd\x4f\x14\xd7\x92\xbb\xeb\x7b\xeb\xb4\x1c\x6e\x47\x49\xf3\x28\xc7\x4d\xd7\xd8\x4b\x03\x77\x0f\xe0\x4e\x59\x6a\x67\xe3\x9f\x00\x00\x00\xff\xff\xf3\x8f\xab\xb4\x16\x02\x00\x00")

func kubeconfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeconfigYaml,
		"kubeconfig.yaml",
	)
}

func kubeconfigYaml() (*asset, error) {
	bytes, err := kubeconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubeconfig.yaml", size: 534, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"authenticator.sh": authenticatorSh,
	"get_credentials.sh": get_credentialsSh,
	"get_metadata.sh": get_metadataSh,
	"kubeconfig.yaml": kubeconfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"authenticator.sh": &bintree{authenticatorSh, map[string]*bintree{}},
	"get_credentials.sh": &bintree{get_credentialsSh, map[string]*bintree{}},
	"get_metadata.sh": &bintree{get_metadataSh, map[string]*bintree{}},
	"kubeconfig.yaml": &bintree{kubeconfigYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

