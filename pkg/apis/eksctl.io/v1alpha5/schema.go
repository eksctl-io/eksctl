// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (35.667kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5d\x7b\x6f\xdb\xb8\xb2\xff\xbf\x9f\x82\xf0\x1e\xe0\x6c\x81\x38\x3e\xf7\x02\xf7\x81\x62\x6f\x00\x37\xe9\x76\x7d\xdb\x24\x46\xbc\x77\x0f\xee\x26\x05\x96\x96\xc6\x36\x37\x12\xa9\x43\x52\x49\xdc\x6d\xbf\xfb\x01\xa9\x87\xf5\x20\x65\x52\x96\xb3\xe9\xf9\xab\x8d\x25\x0e\x87\x33\x3f\xce\x0c\x87\xe4\xe8\x8f\x57\x08\x8d\xfe\xc2\x61\x35\x7a\x83\x46\xdf\x4d\x42\x58\x11\x4a\x24\x61\x54\x4c\xce\xa3\x54\x48\xe0\xe7\x8c\xae\xc8\x7a\x74\xa2\x5e\x94\xdb\x04\xd4\x8b\x6c\xf9\x3b\x04\x32\xfb\xed\x2f\x22\xd8\x40\x8c\xd5\xcf\x1b\x29\x93\x37\x93\xc9\xef\x82\xd1\x71\xf6\xeb\x98\xf1\xf5\x24\xe4\x78\x25\xc7\x7f\xfb\xaf\x49\xf6\xdb\x77\x59\xbb\x4a\x57\xa3\x37\x48\xf1\x81\xd0\xa8\xe8\x33\x62\x69\xf8\x77\x2c\x83\x4d\xf9\x08\xa1\x51\xc2\x59\x02\x5c\x12\x10\x95\x5f\x11\x1a\x05\x59\xa3\x8f\x6c\xbd\x26\x74\x5d\x7b\xb6\x77\x70\x65\x47\x45\xeb\xb2\xe9\xd7\xfc\x7f\x5f\x4f\x76\xfd\xc3\x0a\x38\x87\xf0\x9a\x87\xc0\x47\x6f\xd0\xad\x95\x87\xfc\xc1\xa7\xb2\x2d\x0e\x43\xdd\x33\x8e\xe6\xd5\x51\xac\x70\x24\xa0\x7c\x29\x04\x11\x70\x92\xa8\xf7\x14\xc7\x01\xa3\x12\x13\x2a\x50\xa0\x55\x80\x12\xcc\x71\x0c\x12\xb8\x40\x1c\x22\x2c\x21\x44\x92\xa1\x8a\xac\x4a\x42\x4f\x63\x42\x25\x44\x11\xf9\x7d\xbc\x91\x71\x34\x3e\x94\xf0\xab\x8a\x20\xda\x3a\x6a\x0b\xde\xaa\x2a\xa0\x78\x19\xc1\xcf\xdb\xa4\xf1\x00\xa1\x11\x91\x10\x37\x7f\xac\x40\x4e\x48\xae\xfa\x38\xa9\x3f\x0d\x61\x85\xd3\x48\xaa\x17\x46\x95\x27\x5f\xab\xaf\x95\x24\x30\xe7\x78\xdb\x57\xc1\x55\xce\x87\xd4\x2e\xf0\x6e\x2d\xe4\xc0\x42\x51\x2e\x64\x4f\x1d\xfb\x92\x37\x6a\x3a\xb3\x00\x15\xf5\x72\xf8\x47\x4a\x38\x84\x75\x11\xc5\x20\x71\x88\x25\x6e\xcb\xc7\x06\x07\x9c\x90\x5f\x80\x8b\x8c\xe5\x3f\x4c\x3a\x33\xa8\xbd\xa6\xf4\xda\x03\x78\xc2\x71\x12\xe9\x4e\x6e\xeb\x38\x81\x7b\x11\xc8\xe8\x94\xb0\xc9\xc3\xbf\xe1\x28\xd9\xe0\xff\xa8\xc2\xe5\xd3\x2b\x03\x70\x46\xf8\x01\x93\x08\x2f\x49\x44\xe4\xf6\x57\x46\x5f\x02\x62\x4f\xaa\x06\xc7\x60\x22\x91\x87\xc1\x33\x93\x5d\x61\xbe\xc6\x12\xe6\x9c\xad\x48\xe4\x3c\x64\x73\x97\x3f\xd6\x68\x1d\x34\xda\x35\x91\x6e\xc3\x7c\x4f\xa4\x99\x02\xc1\xb1\x97\xa0\x66\xd3\x4b\x33\xa1\x7b\x42\xc3\x23\xa3\xb5\x3e\xef\xf6\x02\x35\xc6\x14\xaf\x21\xbc\x62\x21\xbc\xe7\x2c\x4d\x0e\xd3\xda\x65\x83\x9a\xab\xde\x1a\x83\xae\x19\xa3\x05\x00\xba\x55\x14\xd7\x9a\x3f\x94\x0a\xbc\x86\x4f\xdf\x4f\xf4\xbf\x13\xcd\x3f\xa1\xeb\x31\x2d\xdf\x78\x8d\x30\x0d\xd1\x6d\x3e\x32\xb4\x7b\x50\x36\x82\x7b\x31\xce\x1f\xeb\x76\x62\xf2\xba\xce\xc2\x1e\xfb\xa8\x58\xfa\x01\xa3\x0d\x87\xd5\xff\xdc\x8d\xec\x9c\xdc\x8d\xce\x9a\x8c\xff\x30\xc1\x67\x9a\xbf\x56\xfb\x36\x53\x77\xa3\xb3\xf6\x20\x14\x01\x33\xb8\x4a\x13\xea\x03\xd5\x4b\xd8\xd9\xdc\x3a\x39\x3a\x0c\x24\x06\xc5\xc2\x8f\x8c\x23\x42\x57\x8c\xc7\x58\xfd\xa4\x05\x59\x4c\x05\x24\x14\x50\x0c\xda\x36\x41\xc4\x4b\xdd\x7b\x7b\x75\xc4\x82\x8b\x12\x05\x04\x1c\xa4\x78\x47\x03\xbe\x2d\x18\x70\xd0\xe6\xa2\xd5\xcc\x4c\x5d\x62\x99\xb6\xf4\xd9\x09\x90\x45\xd6\xc4\x48\xee\x21\x09\xbc\x68\xfd\x32\x3f\xef\x1b\x42\x69\xcb\x79\x62\xf4\xfe\xa6\x29\xd0\x30\xde\x0d\x9e\xcd\x28\xef\xb4\x8a\x1d\x6e\xae\xd3\xed\x9b\xbd\x6e\xa7\xc2\xdb\xfa\x6a\x38\xb3\x41\x42\x48\x8c\x04\x51\x08\xce\x43\xbc\x13\x15\xd0\x2d\x01\x71\x48\x22\x1c\x40\x88\x1e\x89\xdc\xa0\x5c\x6f\x68\x3a\x9f\x39\x07\x8f\xde\x84\x4d\x61\xe3\x3b\x1a\x26\x8c\x50\x29\x5c\x16\x06\x09\x27\x0f\x58\xc2\x34\x08\x40\xb4\xc0\x5d\x18\x97\x25\x63\x11\x60\xcb\xbc\x48\xd2\x65\x44\x02\x5f\x02\x5e\x00\xae\x33\x69\xeb\x7b\x10\xd5\x6e\x58\x14\x8a\x32\x3a\xc7\x09\x41\x02\xf8\x03\x70\x04\xb9\x54\x11\xd6\xbd\x55\x8d\x9a\xb3\x7a\x7b\x11\x37\xa9\x58\x05\x49\x0e\xca\x2d\x66\x1b\x0b\xdf\x3d\x41\x90\x2a\x72\x37\x2c\x82\xe9\xcd\xd5\x9e\x40\xaa\x33\x44\x6d\x50\x9b\x03\x8f\x89\x50\xd6\x44\xbc\x65\x29\x0d\x31\xdf\xf6\xa1\xae\x24\x41\x02\xa5\x63\x96\xd6\xb1\x8b\xbc\xfd\xe6\x4e\x4a\x8b\x1a\xd5\x83\x42\xe1\x9c\xc1\x03\x04\x58\xa1\x30\x90\xd0\x94\x3d\xb8\x9e\x5d\x9c\x1f\x69\xde\x35\x86\xec\x3e\x94\xfd\xa8\x69\xd0\xf3\xc0\x96\x69\xf8\x1d\x38\x1a\xd0\x2a\xe0\x28\x42\xb3\xe9\x25\xc2\x52\x72\xb2\x4c\x25\x08\xc4\x56\x08\x17\x13\xda\xd3\x0c\xec\xa3\x66\x99\xf7\x0d\x44\x3b\x58\x01\x4c\x29\x93\xb8\x9e\xf0\xeb\x96\xc5\xf1\x16\xd6\x95\x04\xa6\x89\xc0\x1f\x5f\xcd\x38\xc7\x52\xe2\x60\x33\x67\x11\x09\x5a\xf3\xc4\x6c\x02\x66\x34\x22\x14\x2e\x58\x90\xc6\x40\x2d\x4b\xd3\x2a\xd5\xe9\xcd\xd5\xcb\xca\x33\x44\x78\x09\xd1\x37\xab\x30\x8a\x63\xe8\xbb\x58\xb7\x12\x14\x09\x0e\x86\xa5\x9a\x78\x9b\x61\x3f\xfa\x3d\xd6\x0c\xad\x29\xde\xb5\x88\x90\x78\xfd\x6d\x41\xc4\xcb\xfd\x68\x10\x19\x31\xd0\x9e\x27\x27\x66\x7b\xd7\x35\xdb\x6d\xf6\x65\x0f\x3e\x3a\x97\x18\x5a\x21\x43\xba\x1c\x8a\x08\x8e\x73\x9f\x86\x33\x40\xa0\x62\xa5\xa6\x17\xd3\xd9\x4a\x21\xe5\x7d\x22\x51\x5f\xea\x4e\x2e\x69\xd1\xc4\xbc\xd5\x31\x71\xcf\x50\xca\x0b\x3c\x05\xf1\x01\x95\x91\xa9\x5b\x79\xe9\x96\xd4\x3c\x05\xdf\x45\xc9\x24\x64\x9d\x69\xda\xbb\x0f\xd0\x9c\x2f\x1c\xd6\x95\x6c\xc6\xfe\x5d\x81\xc1\x8d\x76\xce\xc0\x90\x24\xbf\x39\x8b\x57\x4d\x9f\x1c\xb6\xe5\x32\x90\x15\xcd\x95\x62\xe0\xeb\x28\x76\xec\x71\x83\x25\x22\x21\x50\x49\x56\x04\x44\x8f\x70\xd9\x4e\xc1\x34\x55\xae\xa6\x3f\xbb\xd8\x1e\xb5\xda\x78\xc4\xee\x8b\x2e\x2f\x91\x17\xc4\x07\xb4\x3d\x57\xd3\x9f\x51\x4e\xb6\x6e\x94\x11\x4b\xea\xae\xce\xcd\x02\xed\xa7\x67\x12\xae\xbb\x6d\xc7\x7c\xd8\x79\x1f\xa8\x4e\x56\x24\xc0\x12\xa6\xa9\xdc\x30\x4e\xe4\xf6\xc2\x90\xb0\x77\x8b\xd9\x0f\x09\xcc\x8b\x5c\xcd\xd0\x81\x62\x70\x7f\x35\x88\xfd\xf5\x42\x6a\x39\x18\x17\x51\x9f\xd4\xd5\x6b\x64\x7f\x30\xc8\x23\x0e\x38\x1c\x33\x1a\x6d\x07\x59\x6f\x3b\x90\x33\x02\x3e\x5d\x52\xf0\xca\xa4\xf6\x73\x4e\x96\xfd\x1f\x90\x8f\x8c\xdf\x1f\xcd\x21\x65\xe9\xd3\x17\xcf\xb1\x17\xa2\x0b\x35\xb4\x87\x39\xa0\x35\xce\x3b\xd1\x21\x72\x46\x1d\x89\x1c\x29\x7e\x66\xb8\x83\x90\x09\x8e\xbf\xcc\xcf\x9d\x8c\x6f\x2a\xd9\x34\x8a\x98\x9a\xc2\xb3\xf9\xc3\x7f\xf6\xca\xeb\x07\x24\xe4\x6e\x2b\xd7\x35\x91\x9b\x74\x79\x1a\xb0\xf8\xcb\x23\xe0\x07\x50\x08\x10\x5f\xb2\xa3\x1f\x5f\x92\xfb\xf5\x97\x54\x92\x48\x7c\x21\x09\x05\x79\x3a\x9b\x5f\x81\x25\x1f\x13\xd8\xf7\x2f\x3a\x7a\x6f\xed\x7a\x98\xad\xf6\x93\xe4\xf8\x7c\x76\x71\x73\x58\x66\xf9\x90\xa1\xf6\xdf\xba\x5d\x31\x8e\x76\x60\x45\x6a\x18\x08\x0b\xc1\x02\x92\x2d\x73\x4f\x10\x9c\xae\x4f\x91\x64\x28\x15\x90\x6d\x12\x09\x48\x30\x57\xc8\xd2\x2f\x2b\x02\x05\xd4\x72\x7c\x21\x45\x93\x6e\x11\x0e\xc7\x1b\xd6\x86\xaf\x0b\x84\x9f\x91\x2d\xa3\x4e\x49\xef\xf3\x20\x46\x72\x14\x3b\x9e\x75\xa9\x44\x9a\x1d\x66\x35\xdb\x95\xf2\x81\xdc\xf3\x24\x16\x05\x04\xa9\x72\xe9\xd9\xc1\x82\x41\x83\x98\x0d\xe6\xd9\xc6\xef\xa2\x7f\x1f\x2d\x84\x25\x1c\xc6\x5a\xfa\x10\xa2\xac\x07\x7d\xa2\x03\x2d\xde\x7b\x83\xd5\x95\xd4\xfe\x91\xb6\xc2\x82\xfd\x70\x59\x98\x66\x58\x83\xc9\x62\x12\x60\x0e\x08\x88\xdc\x00\x2f\xbc\x42\x65\xa6\xa8\x91\xb4\x27\xd4\xee\x80\x04\x92\x1b\x10\xa0\x69\xdc\xc3\x16\x42\xb4\xdc\xa2\xe9\xaf\xba\x59\xc0\xe8\x03\x50\x02\xb4\x96\x43\xdb\x2f\xbc\xe7\xe4\xab\xa7\xdf\x27\xb5\x23\x0e\xda\x79\x59\x41\x6f\xd0\xa4\xd9\x55\x38\x80\xfb\xa4\xc3\xed\x36\x8c\x4b\x97\xab\xeb\x34\x1f\x03\x46\x2e\xeb\x88\x2d\x71\x94\xdb\x55\x1d\x76\xe0\x28\x42\xc1\x86\x44\x45\x00\x32\xa9\x5b\x64\xcf\x80\xc6\x9f\x7e\x2d\xce\x69\x1c\x5d\x74\x4b\x79\xb5\xc4\x33\x5c\x82\xab\x36\x42\xb6\x52\x10\x46\x39\x8f\x28\xc9\x98\x3c\xf5\x9a\x49\x4e\x34\xf6\xef\x5b\x78\xef\xe8\x77\x8d\x6b\x36\xbd\x44\x9c\x45\xf0\x57\x81\xa6\x37\x57\x85\xbf\x96\x0c\xf1\x94\xa2\x84\x85\x02\x31\x2a\x59\xc1\xb3\xdf\x78\x0f\xa2\xbd\xdf\x0e\x43\x04\x81\x64\x7c\xc8\xf3\xb2\x8b\x9c\xe6\x10\x81\x5b\xe6\x6c\xb4\xc6\x79\x1a\x81\x50\x03\xcf\x78\x46\x2a\x72\x8c\x18\xd6\x87\xc1\x45\xb0\x81\x30\x8d\xe0\x00\x39\x1f\xd6\x93\x8f\x93\x7b\xae\xe0\xa5\x4b\xae\x8f\x1b\x12\x6c\xca\x49\x24\x36\x2c\x8d\xc2\x02\x58\x21\x43\x34\x5b\x85\x22\x7d\x6a\x2a\x06\x2a\x51\x3e\xed\x32\x89\x40\x58\xca\xe4\x14\xcd\x56\x88\x32\xaa\x67\xe2\x03\x09\x21\x3c\xd1\x06\xab\x70\x78\xca\x39\xa9\x86\xc5\x99\x9d\x47\x12\x45\x68\x09\xaa\xaf\xd0\x4f\x41\x2f\x84\x65\xa3\xa6\xbf\xb9\xa4\xba\x57\x64\xd0\x4c\x80\x9b\x8c\xa7\xd1\xa6\x74\x87\x09\xc3\xa5\xc8\xb3\xb9\x2b\x72\x75\x4b\x49\xe8\x5a\x68\x75\xd5\x66\x6c\x39\x8d\xcd\x46\xc2\xcd\x40\xf4\xec\xa4\xc3\x47\x97\xe6\xd2\xc9\x57\x67\xdb\xb7\xce\x0e\xfb\x45\x1f\x82\xa8\x89\xf7\x43\xba\x04\x4e\x41\x82\x40\x9a\x69\x54\xc2\xa8\xe2\xf3\x1a\x06\xd9\xcf\x80\x0c\xd0\x83\xe3\xc1\x8d\x1e\xe7\x2c\x6c\x9c\x96\xe4\xd0\x8a\xb3\x18\x65\x46\x70\x40\x49\xf4\xa3\x3f\xd0\xae\x9a\xed\x2c\xc2\xa0\x46\xe1\x80\xb8\xc1\xd5\x24\xf4\x0d\x18\x0a\x83\xf0\x9e\x38\x9d\x43\x5b\x32\x26\x85\xe4\x38\x69\x47\xf7\xc8\x1e\x9c\xb5\x6e\x31\x55\xd1\xaa\x3a\xc2\x75\xe3\xd3\x41\xea\xba\x78\xdb\x48\x8b\x43\xc2\xdc\xe8\xdc\xa8\x37\x7b\xe2\x46\xf7\x62\x1a\xc1\x49\x87\xa0\x06\x01\x54\xbe\x08\xd7\xcb\x31\xd3\x86\x5f\xf5\x76\xa2\xbe\x74\x49\xe8\x1a\xbd\x27\xf2\x3a\x51\x31\xfa\x6e\x9f\x44\x2f\xea\x22\x42\xef\xd5\x73\x22\xd5\xeb\x58\xbd\x87\xd4\xd0\x04\x91\x8c\x6f\xdd\x21\xf8\xac\x4c\xd5\x40\xdb\x38\x20\x58\xc1\xaf\xcd\xbd\xec\x14\x6c\xf1\x0b\xb6\x23\x3c\x5b\x84\xf9\x92\x48\x8e\xf9\x16\xfd\xef\xe2\xfa\x6a\xf2\xff\xd3\xcb\x8f\x28\xcc\xbb\x16\x27\x48\xa4\xc1\x06\x61\x81\x74\xe6\xc1\x70\x6f\x94\x71\x7d\x52\x34\x61\x11\x09\x08\xf8\xee\x31\x1c\x93\x01\x83\x47\x29\x04\xdc\xba\xcf\x36\xf0\x62\x1e\xc7\xe4\x47\x1c\x93\x68\xd8\x13\x7b\x2f\xfb\xf2\x69\x08\x42\x89\xed\x1c\x27\x38\x20\xd2\x3a\x72\x05\x8a\x35\x58\xec\x9c\xf3\x85\xcc\x52\x73\xd6\x2b\x99\x84\x0a\x89\x69\xa0\x6f\x67\x0f\xaa\x85\x17\x1d\xf7\xed\x8d\xa1\x62\xfc\xb4\x20\x9f\xad\x12\xe9\xd4\x4e\x4c\x68\xef\xb6\x83\x9f\xdf\xca\x33\x75\xf9\xa6\xae\xa1\xc6\x43\x73\x23\xd1\x46\x5e\x3b\x26\x4b\x96\x41\x38\x5e\xa4\x2e\xe1\xb8\x58\xfc\xf4\x2f\xb2\x8c\xad\xf0\xfe\xc0\xa2\x34\x06\x17\xd5\x77\x45\xde\x6b\xb2\xc6\xcb\xad\x04\xbf\x7d\x3c\x4b\xab\x0a\xd7\xff\xfd\xb7\xa1\x16\xdf\x3b\xab\x6d\xb3\x23\x1d\xe6\xce\x30\x4f\x0c\xd3\xce\x2c\xd5\x4e\x1b\xdf\xc0\x63\xdb\x12\x75\x4e\x8a\x26\x04\x1b\xc6\x76\xd0\xe5\x00\xa6\xe8\xdd\x87\xc5\xb8\x75\xb7\x19\xfd\x7c\x7d\x71\x8d\x7e\xc1\x11\x09\xcb\xbd\x18\x1a\xe3\x24\x81\x10\xad\x08\x64\x71\x40\x88\xe4\x86\xb3\x47\x45\x04\x38\x67\xee\x27\x68\x8e\xd3\x7b\x3d\x5c\x00\xc9\x49\x20\xce\x59\xa4\xd6\x20\xf5\x63\x92\x96\x78\x61\xcd\x31\x4d\x23\xcc\x15\x34\x9c\xc3\x86\x6a\xa3\x21\x6d\x65\x9c\xf1\xff\xe7\x87\x0b\x5e\xd3\xb3\x2a\x0d\xc3\x60\x06\x81\xae\x4e\x32\x2d\xb7\x59\xe6\x29\xc0\x3a\x84\x2f\xee\xb7\xea\x7b\xe7\xfa\x72\xef\xee\x8a\x78\xc8\x02\xf1\xe9\xfb\x8d\x94\x89\x78\x33\x99\xa8\xbf\x4e\xf1\xa3\x38\xc5\x31\xfe\xcc\xe8\x69\xc0\xe2\xc9\xf4\xef\x0b\x5d\x4f\xe3\xc7\xa2\xcd\x44\x2d\x12\x84\x9c\xfc\x9f\x00\xfe\x3e\x25\x21\x4c\xf0\xa3\x18\xef\x20\x30\xc6\x62\x9c\x8f\x29\x28\x01\x76\xaa\x90\xfe\xda\x79\x0e\xec\x1b\xc6\xee\x22\xfb\x33\xb1\x7e\x37\x3a\x33\x48\x6e\x77\x3d\xbe\x98\x59\xc5\x99\x2c\x87\x25\xfa\xf3\x9f\xf9\x19\xe2\x0c\x87\x17\xe2\x0d\xfb\xc4\x83\xa0\x3c\x5b\x6b\xcd\x2e\xb4\xa1\x3b\x9f\x5d\xdc\x78\xae\xd2\xaa\x2d\xeb\xea\x3b\xe2\x02\xea\x80\x24\xdf\x22\x81\x80\xac\xb6\xe8\x36\x48\x85\x64\x31\x9a\x5e\xce\xc4\xa7\xef\xb3\x12\x0e\xd9\x4f\x63\x1c\x93\xb1\x48\x93\x84\x71\xe9\x5b\x24\x24\x27\xbe\x9b\x53\x56\xc2\x6a\x16\xec\x38\xd0\xe8\xf7\x5c\xf1\x1d\x67\x1d\x29\xd6\x5d\x1e\x0d\x75\xf8\x06\x4b\x79\x98\x16\x35\x6f\xcf\xf0\x12\x97\xb9\x5d\x10\xfb\x48\x62\x22\xb3\xb2\x24\x59\x7a\x52\xa3\x82\x04\x68\xfa\xeb\xae\x42\x09\x4e\x25\xcb\xcd\xf1\xe4\xbb\xcf\x8c\xc2\x18\x3f\x62\x0e\x63\xf5\xfb\x38\x7f\xe0\x07\xbe\xac\xdb\x56\x5d\x12\x97\x8e\xf2\x42\x25\x2d\x6e\xed\x35\x4b\x96\x4c\xca\x08\x38\x0b\xee\xc1\xf1\xf4\x59\x69\x0f\xde\x56\x9b\x1a\x89\x07\x11\x16\x82\x04\x1f\x19\x0e\xdf\xe2\x48\x45\xd8\xfc\x0a\xc7\x2f\x53\xd9\xd3\xfc\xe0\x20\x20\x9d\x7a\x5e\xe6\xfc\x8a\xec\x38\x91\x12\x72\xe9\x75\xd7\x8d\x83\x37\xfb\x55\xea\x4d\xdc\x22\x4e\x9d\x6b\xbc\xb8\x5a\x1c\x60\x37\x6f\xcf\x33\x6b\x85\xc3\x90\x83\xd8\xe1\xf8\x21\x09\xc6\xb4\x5c\x53\x4c\xbe\xcb\x4d\x5d\xde\xe7\x38\xa4\x62\x9c\x37\x79\x9d\x6d\xdb\xa9\x20\xfb\xe2\x6a\x81\x22\xc6\xee\xeb\x55\x56\xf6\xcb\xa3\x05\x6e\xf7\xde\xef\x46\x67\xf5\x11\xe8\xaa\x4c\xfb\x39\xda\x6b\x31\x87\xc8\x6d\xc1\x52\x5c\x27\x92\xc4\xe4\x33\x58\xe3\x0a\x4b\xae\xa2\x26\x9f\xac\xe8\xa0\x40\xb7\xef\xde\x2e\x74\x2a\x3a\x26\x9f\x75\x88\xb5\x37\x2e\x7d\x77\xfe\xef\xed\x88\x0e\x96\x62\xcc\x0a\xbe\x1a\x61\xa7\x8b\xba\x0a\x76\x9c\x43\x4c\x47\x2e\xee\x46\x67\xcd\x01\xda\x2d\xd5\x11\xf2\x86\xc3\x5c\x78\x31\x10\x9e\x73\x58\x91\xa7\xa3\x90\x1e\x3c\xd7\x59\x10\x16\x17\x44\x64\x17\x53\x9c\x2b\x57\xed\x24\x6d\xa4\x61\xec\xee\x3e\x5d\x42\x04\xf2\x9d\x3e\xe4\xd8\x2c\x30\xd9\xd1\x57\x63\xbf\xc4\xc1\xc4\x91\xcf\x80\x7e\xcb\xbb\xfb\x2d\x5f\x2a\x95\xe6\x2e\xc8\x5f\x21\x74\x3d\x96\x1b\x18\xe7\xef\x79\xc6\x89\x2d\x3b\x66\x23\x5b\x5a\x2d\xc5\xd4\x0f\x01\x0b\xe1\x2c\x7f\xf4\xc3\x44\xff\x95\xf3\x67\x87\xff\x37\x9f\x92\x9e\xb3\x50\xcc\x81\x2b\xcc\xf4\xcb\x4c\xff\xab\x64\xb5\xd9\x03\x70\x4e\x42\x78\x5b\x6c\xb3\x9e\xb3\x38\xc6\xbe\xc5\x25\x6b\x38\xbc\xce\x49\xa2\xdf\xb2\x15\xf0\x6f\x7f\x15\xa8\xdc\xc5\x4d\x54\x58\x91\xbd\xee\x05\xee\x92\x68\x86\xd7\x8c\x72\x0e\x57\x1b\x7d\xe3\x80\x13\xde\x1a\xeb\x8b\x0c\x01\x41\x9f\xca\x82\x10\x2d\x61\xc5\x38\x34\x46\x58\xda\x49\x15\x5c\x57\x0e\xb8\xf9\x79\xd2\x7e\x5d\x58\xc4\x7a\xd8\xee\x48\x8d\xb1\x77\xda\xc5\xa3\xdb\xe2\x70\xf4\x2e\x18\xb3\x46\x88\xa9\x80\x71\xfe\xfa\x38\x3f\x9f\x36\x5e\x31\x3e\xd6\x26\x1b\x47\xbb\xfa\x89\xaf\x75\x64\x56\xfe\xe9\x25\xb0\x9c\xaf\xbd\x01\xa3\x33\x33\x77\xa3\xb3\xf6\x18\x75\x0c\xd9\xc1\xa4\xe3\x56\x52\xf5\x60\xbe\xe3\xe5\x8c\xdd\xae\xd2\x7b\xcb\x2d\xa3\x7e\x1b\x54\x5d\xba\x2e\x4e\x3a\x80\x40\x42\x6c\x8a\x9a\x6f\xd9\xb9\x4d\x22\x7a\x2a\xca\x99\xa8\x71\x90\xdf\xf2\xd6\x99\xc4\xa6\xcb\x82\xdf\x0e\xf7\x7c\x0d\x52\xe3\xe6\xcf\xac\x41\xe5\xb6\x34\xcf\x98\xcd\xd6\xc8\x03\x2f\xcc\x9d\x48\x1b\x25\x98\x6d\xf2\xe5\x45\x40\xf7\xaf\xfb\x3a\x68\xcc\xae\xe7\xd6\xa5\x7d\x67\x8c\x92\x35\xff\x10\x8b\x0f\xb0\x9d\x5d\x38\x17\x95\x68\x51\x70\x58\x10\x75\xb4\xfe\x26\x76\x8f\x5b\x5c\x3b\x2c\xa8\x76\xad\x5f\x35\xa8\xf8\xee\x3d\xf7\xde\x8a\x36\xaf\xd2\xec\x4b\x4f\xdb\x6a\xd7\x75\x1b\xba\xb9\x91\xdc\xb9\xeb\xdc\x70\x7c\x1d\x49\x15\x43\x4c\x6e\x08\xf1\xf7\xe5\xb1\x6d\x19\x17\x33\x22\xcd\x1a\x37\x63\xbf\x63\x5a\xdb\xa7\x9b\x79\x1e\xdb\x57\x3f\xed\x55\x5d\xdb\x9b\xb8\x64\x51\x3b\xac\x78\x23\x7e\x68\xa4\x51\x6c\xf9\xdf\x7d\x31\xbb\xcb\x22\xc6\x9c\xaf\xec\x4e\x00\xe4\x0f\x07\xa9\x9c\x5b\x3b\xc5\x59\x29\xb5\x21\x37\x58\xea\xbb\x9f\x65\x5e\x5c\x9f\xd1\x6c\x07\x3b\x8e\x45\x74\x7b\xf7\xa3\xbb\x69\x6d\xae\xbd\x35\xe7\xe1\xf7\x7c\x50\x65\x1a\xc6\x84\x9e\x17\x5f\xfc\xe8\xe5\x79\x8a\xbb\x18\x83\x67\x61\xca\x8f\xcd\x60\xba\x45\xb7\x55\x9c\x95\xf7\x3f\x76\xd9\xcc\xdd\x76\xee\xa4\xfa\xe6\x98\x89\xda\xdf\x93\xef\x2a\x9d\x8c\xd9\x6a\x5c\x50\xf2\x4b\xdb\xd4\x58\x6b\x27\x35\x0f\x65\xe6\x6e\x74\x66\x1c\x6e\x23\xb9\xe3\xe5\x4b\x8c\xfa\x36\xa9\x71\xc0\xb9\xa4\x57\xa0\x35\x9c\xab\x70\xbe\x8a\x54\xb4\xc4\x02\x42\xb4\xab\xb5\xee\x7e\xf2\xfa\x80\x2e\xcc\x33\xc8\xb1\x26\xf5\x8b\x2e\xba\xba\x73\xe2\xfa\xe0\xbd\xf7\xb5\x5a\xc7\x54\x6f\xaf\x2b\xbb\x1e\xb4\x8f\x96\x57\xef\x57\xba\xda\xaf\x2f\x15\xfb\x4f\xc3\x90\xd1\x79\x71\xda\xdc\x7b\xd7\xa1\xde\xbc\xe7\x8c\xef\xaa\x17\x6a\xc0\x49\x87\x9a\xbb\xb4\xe4\x21\xe4\x4e\x19\x0d\x68\x76\x6c\x85\xa9\x77\x07\x51\xfc\x6c\xcc\x7e\x7a\x56\x83\x62\xc3\x81\xdd\xba\x44\xcb\x19\x5d\xf3\xbe\xdf\x32\xc0\x49\x72\x09\xed\x7c\x8f\x4f\xdb\x39\x87\x07\x02\x8f\xfd\x48\xa4\x92\x2d\x02\x1c\xf5\x0c\x25\x02\xe0\x32\xbb\x75\xd1\xb3\xbd\xf5\xd3\x56\x4e\xcd\x61\xd9\x4f\xe8\xb0\xea\xd9\xee\x49\x02\xa7\x38\xea\xd8\x8f\xef\x6c\xbf\x12\xd6\x1d\xc2\xce\x76\x24\xc6\x6b\x78\x9b\x92\x28\xec\x29\xe7\xa7\x1b\x7b\xe1\xc9\x03\x2b\xf6\xd7\x78\x33\x23\xcb\x22\x41\x0b\x8e\x0c\x93\xc3\x8e\xf9\x06\x18\x1a\xb2\x6e\xa8\xfc\xc4\x38\x6b\x9b\x62\x32\xc3\xf3\x18\xd6\x4e\x99\x9a\xde\x57\xac\xcc\x44\x2c\x76\x6d\xcf\x86\xaf\xe5\x70\x5f\x35\x33\x61\xb0\xf7\x36\x8b\x58\x6f\xf6\x92\x82\x2d\xb5\x2a\xe7\xc4\x7e\xd3\x98\xa6\xf1\xd2\x96\x70\x63\xf4\x02\xd4\x72\xf7\x2d\x16\x70\xd0\x89\x91\x82\xd0\x1c\x78\x00\x54\xe2\x35\x4c\x97\xec\x01\x0e\xa6\x2b\x12\x26\xf3\x5a\x40\x84\xd1\x85\xe4\x58\xc2\xba\xdf\x87\x51\x12\x26\x0b\xc8\xcc\x19\x6b\xef\x41\xdb\xf9\xf1\x33\x1d\x35\xa0\x98\xf4\xb4\x4f\xfe\x9e\x62\xed\x1c\xe3\x7e\x51\x0e\x68\x03\xcc\xab\xa0\x5b\xd5\xf1\x6e\x4f\xb0\xdc\x87\x53\x3f\x8f\xcb\x9f\x27\xee\x27\xc8\xbb\x3a\x6b\x6d\xb0\x35\x7a\xb9\x1b\x9d\xd5\xd9\x31\x9c\xf3\xae\x6e\x65\x39\xaf\xc4\x66\x17\x2f\xcb\x2a\xa8\xd0\xf6\x23\x0b\x70\xd4\xcb\xb5\xaa\xd6\x0b\x5d\xa9\xeb\x48\x0e\x76\x27\x34\x73\xaf\xc6\x91\x0c\xec\xae\x16\xef\x07\x8d\xcd\x3b\xc9\x59\x10\xb6\xf8\xc9\x2d\x1a\x8f\x58\xbf\x48\x38\x2b\x15\xf6\x01\x7a\x59\xcc\xb2\x71\xdf\xed\x94\x92\xc0\x1c\x4b\x6b\x2c\xdc\x69\xb3\x59\xca\x83\x7a\xa1\xb8\xd9\x9f\x77\xe6\xa2\x2f\xd4\xb5\xf6\xac\x62\x31\x6a\xcb\xaa\x85\xfd\xc2\x19\x78\x92\xe8\x6b\x3a\xbb\x8d\xf0\xba\xc5\xd5\x29\xe1\x43\xe6\x8c\x0f\xf5\xda\x14\xba\x6e\x57\xac\xb0\xdf\xc6\x61\x71\x4c\x64\xd1\xe2\x12\x53\xb2\x02\xd1\xde\xe9\x76\x9a\x50\x7a\xa3\x63\xd0\x3c\xcd\x71\xbe\xc8\xc3\x01\x87\xd7\xd4\x7e\x19\xe3\x80\x9b\xc6\xca\x1e\xff\x04\x51\xeb\x14\xeb\x40\x9e\xc1\xa6\xad\x96\x12\x8c\x32\x34\xf1\x69\x12\xcb\x20\xb3\xc4\xa7\xea\x86\x42\x7a\x51\xa4\xa4\xac\x17\x75\x0f\x90\xd4\x8a\x8c\x65\xb7\x3b\xa1\x51\x72\x03\x11\x8a\xc4\x96\x06\xc7\xa9\x07\x32\x0c\x67\xb5\xd9\x69\xa8\x3b\x69\x9b\x9c\x2c\x95\x49\x2a\x1d\x1c\x84\x2f\xfe\x1f\xc8\x30\x1f\x09\x69\x59\xdc\x67\xbe\x68\x97\x77\x6a\x1a\xdb\x89\x51\x8c\x43\x43\x3b\x04\x89\x49\x94\xd7\x89\xf9\x47\x4a\x82\x7b\x21\x31\x97\x45\xcd\xcd\xb2\xa4\x0c\xa8\x37\x9a\x90\xc1\x61\x89\xb1\x01\x6a\xdb\x1c\x8b\x95\x1a\x78\x6f\xea\x05\x8c\xec\x75\x98\x38\xa6\xf6\x14\x5f\x2f\x80\x41\x8c\xc9\xb0\xde\x65\x15\xa5\x4f\x83\x4f\xae\x04\xcb\xcd\x0b\x88\xc2\xaa\x1c\x65\xc7\x3a\x16\x8b\x9f\xdc\xa2\x4d\xbf\xf1\xa6\x7c\x58\xa5\xa4\xc2\x9e\xf1\x3c\x92\x15\x51\x43\x38\x69\x61\xb7\xa5\x53\x13\x72\x9a\x8c\xb7\xf0\xda\xa9\x87\x67\x77\xb4\xcd\x7a\x55\xbb\x3b\x55\x59\xbd\xab\xe3\x38\xd1\xfd\xbd\xd6\x6c\x4c\xfb\x5b\xe9\x7b\xf3\x96\xf7\xb0\x35\x7e\x87\xcd\x66\x9e\xf2\xf7\x8f\x72\x22\xcc\xc6\xcb\xa1\x55\x3b\xdb\xf9\x9c\x0f\x97\x0b\x04\xa5\x94\x8a\x52\xad\xfe\x15\x37\xfc\xa8\xd7\x74\xd5\xe3\x8a\x7e\x45\x99\x96\x79\xdd\xaa\xc4\xcb\x71\x22\x50\x49\x41\x41\x6a\x0d\x32\xfb\xbc\x83\x00\x4e\x70\x94\x5f\x2c\x73\x87\xaf\x07\xc9\x57\x05\x04\xbe\xbe\xfa\xfa\xea\x9f\x01\x00\x00\xff\xff\x4a\x67\x37\x81\x53\x8b\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x47, 0xbd, 0x23, 0x72, 0x7d, 0x1b, 0x74, 0x30, 0x25, 0x8d, 0xba, 0x13, 0xac, 0x15, 0xec, 0x6a, 0xda, 0xdd, 0xb1, 0x18, 0x6e, 0x7b, 0xb5, 0x68, 0xc8, 0x85, 0x3f, 0x78, 0xf0, 0x91, 0xc7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
