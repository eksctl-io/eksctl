// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xd1\x6a\xdb\x4a\x10\x7d\xd7\x57\x2c\x24\x0f\xf7\x82\x57\xe2\xe6\x5e\xee\x43\x40\x0f\xaa\xad\x04\x53\x55\x0e\x91\x43\x0b\x6d\x11\xe3\xdd\xb1\x33\x78\x35\x2b\x76\x57\x76\xd2\xe0\x7f\x2f\xb2\xac\xd6\xa1\xa1\xf4\x4d\xbb\x67\xe6\x9c\x33\xb3\x47\x17\x02\xb7\x5e\x05\x23\x7d\x8b\x8a\xd6\xa4\x84\x7f\xf6\x01\x1b\x2d\xb4\xb3\xad\x24\x16\x1d\x53\x10\x6b\xeb\xc4\xb6\x5b\xa1\xc1\x30\x39\x1e\xb2\x06\xbe\x59\x16\x05\x71\xf7\x24\xae\xc4\x5f\x59\x71\xf5\x77\x14\x7d\xae\xd0\xed\x48\xe1\xd7\xe8\x42\x14\x56\x81\x11\x0d\x06\xd0\x10\x40\xb4\xe0\xa0\xc1\x80\xce\x5f\x8b\xfb\xfc\x76\xbe\x28\x27\x22\xfb\x58\xd5\xb3\xfc\x26\x7b\x28\x96\xf5\x70\x17\xe5\xbc\x23\x67\xb9\x41\x0e\x37\x64\x30\x4d\x30\xa8\x64\xb0\x98\x8c\x5c\x31\xf2\x2e\xba\x10\xb7\xc6\xae\xc0\x08\x60\x2d\x7c\x80\x40\xea\x95\xc6\xb4\x78\xa8\x96\xf9\x7d\x3d\x2b\xab\x89\x28\x17\xb3\xbc\x2e\xb2\x77\x79\x31\x1e\x96\xd9\xbc\x5c\x56\xbf\x95\x3b\xcd\x7b\x52\x1b\xc6\x61\xcb\xf2\x0d\xb1\x23\xe5\xfc\x6e\x22\xe6\x65\xb5\xcc\xca\x69\x5e\xcf\x67\x7f\xc4\x6d\x7a\xd6\xa3\x42\x94\x3f\xa1\xaa\x02\xb8\x90\x9e\x7d\x26\x9d\x77\xc9\x8a\x78\x6c\x10\x5f\x22\x21\xa4\x64\xab\x51\x52\x9b\x5e\xbe\x9c\x94\x0f\xe7\x80\x81\x15\x1a\x3f\x82\xc3\xd8\x87\x09\x98\xf6\x11\xe2\x41\x3f\x26\x9b\x10\xfb\x00\xac\x50\x92\x4e\x2f\x5f\xce\x8c\x8f\x5c\x0d\x3c\xc9\xd6\xea\x9e\xe8\x43\xf6\xa9\xbe\x5b\xcc\xaa\x11\x72\xb8\x21\x1f\xd0\x1d\xf5\xd2\xe0\x3a\x3c\xbf\xdc\x53\x78\x94\x01\x88\xc3\x0f\x13\xc3\xba\xc7\x76\x30\xc6\xee\x65\xeb\x68\x47\x06\x37\xa8\x07\x86\x01\x53\xc6\x76\x5a\xb6\xce\xee\x48\xa3\x4b\x61\xef\x47\xc0\x72\xcf\x89\x4e\xba\x8e\x03\x35\x98\x6a\xab\xb6\xe8\xc6\xc9\x31\xec\xad\xdb\xca\xd6\x74\x1b\xe2\x54\x31\x8d\x7d\x4c\x72\x45\x2c\x35\xb9\x34\xb1\x6d\x48\x14\x53\xbf\xd2\x33\x58\x59\x5e\x0f\x78\xff\x44\x3d\xce\x18\x62\x7d\xaa\x68\xad\x96\xc4\x6b\x07\x67\x16\xa8\x81\x0d\xa6\x97\x2f\x7d\x82\xf3\xf7\x55\x9d\x4f\xef\xeb\x6c\x3a\x5d\x3c\x94\xcb\x43\xac\xb7\x2e\x46\xe5\xe2\x01\x7e\x1d\xf0\x43\x0c\xc7\x3f\x07\xf6\x3e\x56\xb6\xe9\xf3\x90\xb4\xd0\x79\x94\xd0\xe8\xff\xff\xbb\xfe\x37\xfe\xe7\x24\xdb\xbf\x78\x6f\x8c\x36\xbf\x24\x67\xb8\x8e\x9f\xa1\x31\x3f\x97\xf3\x56\x61\x1f\xb1\xbe\x2a\xfa\x1e\x00\x00\xff\xff\x5c\x3b\x51\x59\xe7\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 999, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x7f\x6f\xdb\x36\x10\xfd\x9f\x9f\xe2\x55\x11\x92\x18\x2b\xa3\x36\xe8\x06\x34\x89\x07\x68\x89\x32\x08\x70\x6d\xa3\xf6\xd6\x76\x89\xa7\xd2\xd2\xb9\x26\x4a\x93\x9a\x48\x39\x71\x33\xef\xb3\x0f\xb2\xad\x44\x6a\x13\x60\x28\xf6\x97\x7d\x77\x8f\xcf\xf7\xeb\x9d\xf7\x9e\x05\x53\xa9\x83\xa9\xb0\x73\xc6\x2c\x39\x70\x03\x2a\x0a\xba\x95\xae\x36\x73\x99\xd3\x4c\x48\x55\xdb\xda\x94\xda\x92\x63\x6c\x56\xea\xd4\x49\xa3\xf1\x89\x5c\xb2\x10\xb7\x49\x6e\x32\x7b\xd8\xc1\x1d\x03\x6e\xe6\x52\x11\x0a\x12\x19\xa4\xb6\x4e\xe8\x94\x12\xb7\xca\x09\x15\xe6\x14\x99\x61\x00\x20\x67\xc0\xd5\x15\x3c\xff\xae\x05\x5a\x7b\xe8\x76\x2b\xef\xcb\xb5\x87\xc9\x04\xfb\xfb\x3b\x54\xf5\xb8\x0a\xfe\x83\x3f\xaf\x5e\xf0\xd7\x93\x1f\xfc\x2a\x7c\x0a\x37\x27\xbd\x21\x04\x28\x9d\x1b\xec\x90\x3b\x57\x41\xae\x2c\xb6\xf1\x99\x64\x40\x66\x34\xe1\x0c\x01\xb9\x34\xa0\xcf\x36\x75\x2a\xa8\xb3\x3f\x5a\x88\x9c\xad\x19\x8b\xce\x8f\x93\xf0\xf7\x30\xee\x25\x7f\x0c\xfa\x51\xd7\x3f\x4c\xcb\x42\x81\x5b\xcc\x9d\xcb\x4f\x82\xe0\xe5\x4f\xaf\x8f\x8e\x7f\x7c\x75\xb4\xfb\x0c\x94\x70\x64\x5d\xb0\x20\x27\x78\x26\x9c\x08\x72\x25\x52\x5a\x90\x76\x81\x58\x0a\xa9\xc4\x54\x2a\xe9\x56\xfc\x8b\xd1\xd4\x61\xe1\xbb\x51\x72\x11\x5d\x86\xbf\xf5\xc6\xc9\xdb\xe8\xd7\x78\xd0\xef\x7a\x1f\x37\x89\x5f\x7b\x7e\xfb\xa7\xaf\x3d\xfc\x0d\x4b\x19\x0e\x6c\x70\x25\xf8\x97\x89\x1f\x04\x07\x1f\x3d\xd6\x1f\x5c\x44\x49\x3c\xec\x7a\x75\x6a\xdc\x4a\x45\xda\xfd\xe7\x04\x95\x49\x85\xe2\x32\x5f\xbe\xea\x78\x2c\xee\x8f\xc6\x61\xff\x3c\x4a\xe2\x8b\xef\x67\xac\x47\xc8\x65\xd6\xa4\x1c\x7f\x18\x46\xff\x03\x69\xb5\x17\x1d\x8f\x31\x6b\xca\x22\xa5\xd6\xf0\x3e\x97\x53\x52\xe4\x8e\x48\x2f\xb1\x07\x37\x97\x16\xa9\xd0\x30\x4b\x2a\x0a\x99\x11\xde\x84\xef\x93\xe1\xe0\x62\xc4\xd8\xde\x65\xfc\xfe\x4d\x74\x82\x38\x23\xa1\xd4\x6a\x8b\xb5\x69\x21\x73\x07\x3b\x37\xa5\xca\xa0\x8d\x43\x2a\x94\xc2\x3e\x32\xca\x49\x67\x16\x46\x57\x0b\x86\xf0\xdd\x08\xe1\x30\xb6\x6c\x6f\x6e\x6e\x68\x49\x05\xa4\x83\xb4\x9b\x98\xd1\x6a\x85\x1b\xb1\x82\x70\x1b\x7b\x61\xaa\xd9\xc3\x19\x98\xa9\x13\x72\x4b\x50\xd7\xd2\x93\x33\x4a\x57\xa9\x22\x2c\x85\x2a\x09\x87\xa3\xdc\xb8\xc0\x68\x9e\xd1\x42\xe8\xac\xc3\x1e\x9a\xd7\x8b\x2f\xa3\xf3\x0f\xe7\xbd\x6a\x05\xc5\x8d\x05\xa5\xc7\xc8\xa8\xca\x78\x4a\xbc\xe6\xb3\xe0\xbc\xa0\x4f\x95\x12\xfd\x6f\x57\x0b\x9c\x37\x26\x63\xe1\xdf\x35\xa6\xbd\xc6\x35\xe3\xfc\xaf\x92\x8a\x15\x0e\xde\x92\xa5\x62\x29\x2a\x49\xdb\xab\x17\x93\xa3\xb8\xe6\x6f\x1a\xf7\xc9\x1f\x80\x73\x53\xba\xbc\x74\x70\x74\xeb\x3a\x8c\xc9\x19\x2a\x95\x7e\x9b\xfc\x56\xce\x36\x37\xce\xc3\x56\xcd\xf0\xfc\xd1\x70\x30\x4e\x36\x6b\xdc\x0b\x7f\x89\x7a\x23\x0f\xcf\xba\xf0\x3c\x60\x72\xaf\xe7\x1d\x61\x0b\xd4\xdd\x80\x26\xa7\x0f\x92\x6f\x84\xbb\x9e\x7f\xf7\x35\xef\xda\x63\x00\x29\x4b\x8f\xa2\x9b\xc0\xe7\x4f\x3c\x9e\x49\x36\x93\xdf\x5f\xde\x38\x8c\xfb\xe3\xfb\xf2\x1e\xaf\xae\xc6\x3c\x51\xdd\x36\xdc\xae\x6e\xeb\x7b\xac\xba\x07\x74\x13\xf8\xfc\x89\xc7\xbb\xea\x52\xe1\xf0\xf3\xa3\xb2\xda\x5c\x8a\x8d\xb8\xce\xce\xa2\xc1\xe5\xfd\xe9\xd9\xd1\xc7\xc3\x75\xeb\x7e\xb4\xf7\xeb\xab\x3b\xd0\x08\x56\xf6\x9a\xd5\xda\xec\xfa\x77\xf5\xd7\x13\xee\x1f\x36\xff\x51\xaa\xc3\xdf\x7e\xe5\x75\xd6\xac\x39\xc7\xf6\x18\x59\xb3\x09\xed\x1e\xb0\x2a\x7f\x66\x57\xd6\xd1\x22\x75\x0a\x99\xa0\x85\xd1\xbc\x20\x65\x44\xd6\xf0\x93\x16\x53\x45\xd8\x75\xa0\x11\xb0\x4e\x14\xee\xde\xff\x6f\x00\x00\x00\xff\xff\x93\xc2\x80\xfe\x3d\x07\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 1853, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xff\x6f\xdb\xb6\x13\xfd\x9d\x7f\xc5\x55\x31\x9a\x18\x9f\x50\x6a\xf3\xe9\x0a\x34\xa9\x86\x79\x89\x33\x18\x73\xe3\xa0\x76\xd7\x76\xa9\xe7\xd2\xe2\xd9\x26\x42\x91\x1a\x49\xd9\x71\x33\xef\x6f\x1f\xa8\x2f\x8e\x9c\x26\xc5\x50\xec\xa7\x98\xbc\xc7\xa7\x3b\xf2\xdd\xbb\xec\x3d\x89\xa6\x42\x45\x53\x66\x17\x84\x58\x74\x40\x35\xa0\x31\x78\x23\x5c\xbd\xcc\x44\x86\x33\x26\x64\xbd\x56\x3a\x57\x16\x1d\x21\xb3\x5c\x25\x4e\x68\x05\x73\x74\x93\x94\xdd\x4c\x32\xcd\xed\x41\x1b\x6e\x09\xc0\x6a\x21\x24\x82\x41\xc6\x41\x28\xeb\x98\x4a\x70\xe2\xd6\x19\x82\xc7\x9c\x00\xd7\x04\x00\x40\xcc\x00\xae\xae\x20\x68\xdd\xee\x80\x36\x01\xc4\xb1\xdf\x7d\xbe\x09\x60\x3c\x86\xa7\x4f\x2b\x94\x3f\xec\x83\x7f\xc3\x1f\x57\xcf\xe8\xab\xf1\xff\x5a\x3e\x7c\x02\x6e\x81\xaa\x20\x04\xc0\x64\xa1\xa1\x42\x9e\x54\x7b\x06\x5d\x6e\x4a\xc0\x4c\x10\x00\xae\x15\xc2\x6b\x88\xd0\x25\x11\x5e\xdb\xc4\xc9\xa8\x4e\x3f\x4c\x59\x46\x36\x84\x74\x4f\x8f\x26\x9d\xdf\x3a\xbd\xfe\xe4\xf7\xc1\x45\x37\x6e\x1d\x24\xb9\x91\x40\x2d\x2c\x9c\xcb\x8e\xa3\xe8\xf9\xcb\x57\xe1\xd1\x0f\x2f\xc2\xea\x6f\x24\x99\x43\xeb\xa2\x14\x1d\xa3\x9c\x39\x16\x65\x92\x25\x98\xa2\x72\x11\x5b\x32\x21\xd9\x54\x48\xe1\xd6\xf4\x8b\x56\xd8\x26\x9d\xf7\xc3\xc9\x59\xf7\xbc\xf3\xae\x3f\x9a\xbc\xed\xfe\xd2\x1b\x5c\xc4\xc1\xe7\x22\xf3\x4f\x41\x6b\xf7\xd3\x9f\x02\xf8\x0b\x2c\x72\xd8\xb7\xd1\x15\xa3\x5f\xc6\xad\x28\xda\xff\x1c\x90\x8b\xc1\x59\x77\xd2\xbb\x8c\x83\x3a\x35\x6a\x85\x44\xe5\xfe\x75\x82\x52\x27\x4c\x52\x91\x2d\x5f\xb4\x03\xd2\xbb\x18\x8e\x3a\x17\xa7\xdd\x49\xef\xec\xfb\x19\xeb\x37\xa4\x82\x37\x29\x47\x1f\x2f\xbb\xff\x01\xa9\x17\x46\x3b\x20\xc4\xea\xdc\x24\xb8\xf3\x78\xd7\xf9\x14\x25\xba\x10\xd5\x12\xf6\xc0\x2d\x84\x85\x84\x29\xd0\x4b\x34\x46\x70\x84\x37\x9d\x0f\x93\xcb\xc1\xd9\x90\x90\xbd\xf3\xde\x87\x37\xdd\x63\xe8\x71\x64\x52\xae\x4b\xac\x4d\x8c\xc8\x1c\xd8\x85\xce\x25\x07\xa5\x1d\x24\x4c\x4a\x78\x0a\x1c\x33\x54\xdc\x82\x56\x5e\x61\xd0\x79\x3f\x84\xce\x65\xcf\x92\xbd\x85\x5e\xe1\x12\x0d\x08\x07\xc2\x16\x31\xad\xe4\x1a\x56\x6c\x0d\xcc\x15\xeb\x54\xfb\xb7\x07\xa7\x41\x4f\x1d\x13\x25\x41\x5d\x4b\x5f\xcc\x30\x59\x27\x12\x61\xc9\x64\x8e\x70\x30\xcc\xb4\x8b\xb4\xa2\x1c\x53\xa6\x78\x9b\xdc\x5d\x5e\xbf\x77\xde\x3d\xfd\x78\xda\xf7\x12\x64\x2b\x0b\x98\x1c\x01\x47\x9f\xf1\x14\x69\xcd\x67\x81\x52\x83\x73\xdf\x8a\xad\xaf\xa5\x05\x94\x36\x5e\xc6\x42\xeb\xb6\xf1\xda\x1b\xf8\x44\x28\xfd\x33\x47\xb3\x86\xfd\xb7\x68\xd1\x2c\x99\xef\x69\x7b\xf5\x6c\x1c\xf6\x6a\xfe\xe6\x62\x9b\xfc\x3e\x50\xaa\x73\x97\xe5\x0e\x1c\xde\xb8\x36\x21\x62\x06\xbe\x4d\xbf\x4e\xbe\xec\x67\x9b\x69\x17\x40\xd9\xce\x10\xb4\x86\x97\x83\xd1\xa4\x90\x71\xbf\xf3\x73\xb7\x3f\x0c\xe0\x49\x0c\x41\x00\x30\xde\x36\x74\x45\xb8\x03\x8a\x0b\xd0\xf8\xe4\xae\xe7\x1b\xe1\x38\x68\xdd\xde\xe7\xdd\x04\x04\x00\xa5\xc5\x07\xd1\x4d\xe0\xe1\x23\x87\x67\x82\xcc\xc4\xf7\x97\x37\xea\xf4\x2e\x46\xdb\xf2\x1e\xae\xae\xc6\x3c\x52\x5d\x19\xde\xad\xae\xdc\x7b\xa8\xba\x3b\x74\x13\x78\xf8\xc8\xe1\xaa\xba\x84\x39\xf8\xf1\xc1\xb6\x2a\x9c\xa2\x68\xae\xd7\xaf\xbb\x83\xf3\xad\xf5\x54\xf4\xbd\xcb\xcd\x8e\x7f\xec\xea\xeb\x9e\x0f\x34\x82\x7e\xbd\x21\x75\x6f\xc6\xad\xdb\xfa\xe7\x31\x6d\x1d\x34\x47\x8a\x77\xfe\xdd\x53\x41\x7b\x43\x9a\xef\xb8\xfb\x8c\xa4\x79\x09\xbb\x77\x40\x7c\xfe\xc4\x2a\x96\x01\x93\x82\x59\xa8\x6a\xa4\x78\x6d\xc3\xea\x77\xbd\x77\x1f\x96\x38\xb9\x85\x25\x4e\xd6\x7b\x25\xcc\x3a\x9d\x35\xc9\x88\x5d\x5b\x87\xa9\xc7\x19\xb4\xe8\xa8\x9f\xa0\xc8\x09\x39\x20\x00\x7b\x30\x1a\x9c\x0d\x8e\xbd\x0e\x2c\xd6\xbe\x33\x45\x90\x5a\x5f\x23\xf7\x16\xe2\xdd\x65\x0d\x4e\xa4\x58\x93\x82\x75\xcc\x38\x0b\x79\x76\x58\x30\xac\x16\x22\x59\x78\xf7\x59\x2d\x98\x83\x15\x02\xd7\x20\x14\x74\xfa\x47\x70\xb0\x8d\x4d\x99\x9f\x1c\x5a\x41\x26\xbd\x07\x95\x39\xf1\x92\x80\x29\x0e\x29\xb2\xd2\xa4\xa6\x7e\x30\x1b\xc7\xa6\x12\xfd\x32\xd5\xd6\xd5\x68\xe0\xc2\x3a\xa3\x6d\xfb\x10\xa6\xb9\x03\xe1\xf6\x6d\x71\xbe\xf0\x49\x89\xcc\xc0\x42\xaf\xfc\x21\xa9\x19\xaf\x4a\x9a\x19\x9d\xde\x25\xee\xef\x67\x25\xdc\x42\xe7\x0e\x16\x6c\x29\xd4\xbc\x20\x70\x1a\x92\xdc\x3a\x9d\x0a\x8b\x85\x3d\x16\x40\xe1\x2c\xca\x19\x01\xf8\x86\xcf\x6f\x05\xf9\x6d\xd8\xa3\x00\x3f\x5d\xfc\x70\x29\x10\xbe\x03\x24\x9b\xdb\xf8\xa0\xe8\xa0\x40\x69\x8e\x54\x64\x0d\x75\x07\x65\x20\x65\x37\xd4\xcb\xb1\xa1\xd4\x3a\x54\x9c\x91\x6c\x8a\xd2\xde\xd3\xe2\x21\x93\xd9\x82\x85\xe5\x87\x43\xa1\x9b\x43\xf2\x5e\xa7\x54\x5c\x4c\x4a\xbd\xa2\x99\x11\x4b\x21\x71\x8e\x3c\x76\x26\xc7\x2a\x96\x69\x4e\x85\x9a\x19\x46\x13\xad\xfc\x58\x41\x43\x45\xca\xe6\x18\xb7\x6e\xbd\xf1\x77\x7f\x1d\x4e\xba\xa7\x6f\x27\x9d\xd3\xd3\xc1\xbb\x8b\xd1\x26\xe4\xd7\x26\xc4\xc4\x84\x65\x78\x77\x2e\x6c\x42\x96\xb2\x2f\x5a\xb1\x95\x0d\x13\x9d\xfa\xcb\x89\x32\x96\x5b\xa4\x2c\xe5\x2f\x5f\x1c\xff\x3f\x7c\x5e\x7d\x36\x91\x3a\xe7\x34\x33\x7a\x29\x38\x9a\x98\xad\x6c\x1d\x50\x82\x4e\x85\xa2\x5c\x98\x38\xd2\x99\x8b\x12\x25\xfc\xff\x93\x8d\x70\xa2\xd5\xac\x8c\xfb\x07\xf0\x71\x85\x2e\xe4\x35\x62\x5b\x86\xc9\x95\x97\x7b\xcc\x75\x72\x8d\xa6\xbe\x57\x74\x2b\x6d\xae\x69\x26\xf3\xb9\x50\x71\xa2\x44\x15\xf0\xd3\xce\x3a\x34\xd4\xdf\x7c\xf3\x86\xb6\x01\x2f\x38\xea\xb9\x9d\xbd\xe7\x01\x15\xb2\x68\x5f\xad\x66\x62\x1e\xdf\x17\x4f\xb9\x1d\xae\x59\x2a\xef\xf2\x7c\x08\xe8\x55\x56\xa3\xda\x5e\x49\xa5\x17\xdc\x79\x88\xb7\x02\x6f\x5f\x85\xc2\xae\x7e\x1a\x6f\x02\xd2\x26\xb5\x63\x30\xb3\x83\x23\xff\x04\x00\x00\xff\xff\x18\x87\xfd\xd0\x8c\x0b\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2956, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

