// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (18.994kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xdb\xbe\x15\x7f\xcf\xa7\x10\xf4\xdf\xd3\xd0\x36\x1b\xd0\xf5\x21\x6f\x8e\x9d\x76\x46\x9b\xd4\x88\x8b\x0e\x58\xd1\x87\x23\xea\x58\x66\x43\x91\x1a\x49\x39\x71\x87\x7e\xf7\x41\x92\x15\x53\x96\x64\xcb\xd4\xc5\xce\xfe\x7d\x08\x10\x4b\x3a\xe4\xef\x5c\x78\x6e\x24\xff\x7b\xe1\x38\xee\x5f\x14\x59\x62\x08\xee\x95\xe3\x2e\xb5\x8e\xae\x2e\x2f\x7f\x28\xc1\x5f\x67\x4f\xdf\x08\x19\x5c\xfa\x12\x16\xfa\xf5\xdf\xde\x5e\x66\xcf\xfe\x70\x5f\xa5\x74\x12\x17\x09\xd1\x1f\x97\x3e\x2e\x28\xa7\x9a\x0a\xae\x2e\xc7\x2c\x56\x1a\xe5\x58\xf0\x05\x0d\xb2\x0f\x8d\xd7\xee\x95\x93\xcc\xe9\x38\x6e\xfe\x1d\x13\xb1\xff\x2f\xd0\x64\xf9\xfc\xca\x71\xdc\x48\x8a\x08\xa5\xa6\xa8\x8c\xa7\x8e\xe3\x92\x8c\xe8\x93\x08\x02\xca\x83\xc2\x3b\x7b\x46\xb6\xf4\x7b\x19\x7a\x06\x9a\xcf\xfe\x4c\xfa\x6b\xf3\xdf\xaf\x7c\x34\x17\x7c\x3f\xa5\x06\x36\x33\x39\x59\x00\x53\xf8\xfc\x91\x5e\x47\x98\x4c\x27\xbc\x1f\x48\x74\x36\xdc\x66\x88\xb2\x74\xca\x2c\xd7\x0a\x09\x39\x78\x0c\xbf\xac\xa3\x9d\x17\x8e\xe3\x52\x8d\xe1\xee\x43\x03\x89\xd2\xb2\xc0\x98\xc1\x52\xe1\x3b\x90\x12\xd6\x83\xf0\x9f\x59\x91\xc1\xb4\xc4\xff\xc4\x54\xa2\xef\x5e\x39\xdf\xb6\x2c\x87\xa8\xc1\x07\x0d\x39\xa6\xef\xaf\x0e\x09\xe9\x81\x72\x7f\x57\x3a\x3b\x62\x28\xb0\x8e\x4f\x10\x46\x2c\x1d\xe5\x5b\x51\x78\x45\xa8\xc6\xbb\xef\x17\x15\x52\x74\x21\xa2\x5f\x51\x2a\x2a\x78\x37\xd3\xe3\x83\x22\x9a\xbd\xa1\xe2\x72\xf5\x77\x60\xd1\x12\xfe\x71\x18\xc3\xb3\xb8\x86\x5c\x40\xb7\xb8\xd5\x4f\x11\x0e\x85\x70\x50\x24\xd3\xd1\x6d\x35\x90\x55\x44\x06\x05\xf2\x75\x36\xae\x06\xc2\x85\x8f\x1f\xa4\x88\xa3\xa6\x2b\xb8\x25\xcc\x5a\xa0\x77\x39\x90\xe3\x9d\x82\x69\x6f\xc0\x21\x40\xff\xee\x5c\xb8\xba\xdd\xc1\xd3\x8a\xb9\x05\xc8\x00\x34\xce\xa4\x58\x50\xd6\xd8\xe5\xf6\xc5\xda\xfb\x02\x9a\x56\x8c\xc1\x0a\x28\x03\x8f\x32\xaa\xd7\xff\x16\x7c\xb0\x68\xf2\xca\x8c\xf7\x15\xd9\x41\x17\xf2\x6b\x1a\xeb\xab\x61\x29\x24\x12\xb5\xba\xe1\x44\xae\x23\x5d\xe1\xca\xfb\x41\x37\x2f\x4d\x5b\x8d\x4e\x83\x8e\x4b\xca\xea\x55\x60\xf3\x6c\xca\x01\x32\x82\x1b\xee\x47\x82\x72\xad\x9a\x64\x42\x91\xa4\x2b\xd0\x38\x22\x04\x55\x49\x20\xf9\x64\x9e\x10\x0c\xa1\x46\x96\x51\xec\x31\x4a\x8e\x1d\xa0\x37\xee\x93\xc8\xd5\x80\x6f\x85\x72\x45\x09\xde\x0b\x86\xa3\xfb\xbb\x03\x79\x46\x8d\x85\x3f\x8f\x30\x43\x19\x52\x95\x24\x2c\xea\x5a\xc4\xdc\x07\xb9\xb6\x19\x31\x77\x93\xc2\xbf\x79\x42\x12\x27\xd2\x68\x81\xaf\x66\xb4\x8e\xb0\x3e\x52\xbd\xfc\x3c\x9d\x8c\xad\x4c\x66\x23\xba\x11\x21\x22\x2e\xda\xa9\x73\x82\x78\xb0\x35\x9c\x79\x01\xd7\x19\x25\xf9\xd3\xd1\x6d\x9a\x1b\x36\x30\x6c\x0e\x21\xda\x28\x34\xa1\x53\x11\x10\x2b\x62\x06\x1e\xb2\x92\x1e\x23\xd0\x1a\x25\x9f\x55\x23\x4d\x3f\x79\xf3\xd7\xd2\xb3\xbd\xe1\x71\x2b\xe4\x7a\xad\x98\x72\xdc\x05\x0a\x9c\x0b\x0d\xc5\x3a\xfb\xcc\xd0\xf6\x69\x44\x3b\x06\xde\xc0\x9c\x4e\x52\x07\xe5\xe6\x5e\xad\x42\xad\x81\x2c\x67\x82\x51\xb2\x1e\xdd\xdf\x9d\x20\xe5\x32\x11\x74\x66\x45\x35\x5a\xd6\x32\xc6\x0e\xed\x3f\xea\xc6\xfb\x9f\x20\x7f\x2a\x59\x6f\x29\xa1\x32\xf0\x69\x08\x7e\xaf\xef\x5c\x42\x0d\x56\xb9\x3c\x32\xcd\xe8\x8d\x87\xdd\x28\x57\xdd\xcb\x4a\x63\x9c\xa1\x6e\x89\x81\x91\xea\x1f\xee\x6c\xd9\xc6\xc8\xcd\x3c\x16\x94\xab\x46\xfd\xac\xdf\xb6\x9c\xdb\xc1\xdd\xe8\x4b\x13\xbb\x4d\x12\xdc\x47\x68\xee\xc2\x7a\xc3\xdb\x7c\xa9\xe1\xa6\x3a\xb3\x31\x05\x92\x0c\xb8\xa0\x24\x29\xd8\x62\xbd\x14\x92\xea\xf5\xa4\x22\x38\xef\x6b\x93\x86\xe8\xd3\x5d\x02\xc7\x71\x3d\xca\x41\xae\x6f\x38\x11\x7e\xd6\x43\x77\x3d\x50\xf8\xee\x6d\x21\x50\x56\x47\x43\x69\x65\xd6\x4a\x03\x79\xb8\x3b\x66\x21\xf6\xa7\xbc\xd8\xe3\x78\x54\xb9\xdc\xd9\x7a\x6c\x5d\xd3\xd4\xb7\x25\x51\x3f\x0a\xf9\xd0\x65\xf2\x9c\x55\xfa\xdd\xf1\xde\x2b\xee\xde\xac\xe5\xeb\x6c\xdc\xc4\x52\xe8\xa1\xbd\x93\xea\x15\x4e\x7d\x69\xd7\x8c\x20\x71\xe2\x0d\xb2\x5e\xad\xcd\x00\xa5\x35\xe0\xf4\x9e\xd2\xe5\xeb\xae\x12\x10\x3e\x69\x09\xe3\xe9\xe4\xfe\x04\x09\xbe\x5a\x82\xcc\x7a\xdf\xf3\xb6\x72\x85\x58\x8b\x11\x63\x22\xf1\xd9\xd3\xd9\xea\x9d\x55\xbf\x84\x43\x29\x5c\xf4\xaa\x98\x24\xfa\x56\x9b\x67\x7d\x87\xb1\x7f\x54\xdb\x59\xf7\x78\xa7\xac\x0f\x39\xa4\xdd\x74\xef\x68\x76\x36\x28\x8e\x4e\x87\x15\x32\x24\x5a\x48\xd5\x7f\x46\x1c\x75\xd3\xab\xdc\x22\x3e\xa7\xad\xa1\xf9\x06\x55\x3b\x5f\x52\xed\x58\xfb\x77\x62\x7f\xae\xba\xa1\x46\x73\x8d\xd6\x4e\xd6\xf6\x3c\x6a\xad\xfc\x9f\x76\x4a\xbb\xd7\x4b\x69\x1f\xf9\x68\x6f\xb6\x49\xb9\x37\x79\xa1\xc1\x65\x7f\x5e\x0d\x42\xfa\x1e\x42\xca\xac\x7a\x63\x94\x2b\x0d\x9c\xa4\xa7\x8b\x6c\xe8\x7d\x54\x89\x50\xc6\x10\x01\xa1\xba\x16\x02\xe5\x1a\x03\x94\x35\xa7\x09\x28\x9f\xd3\x9f\xb5\xd3\xef\xa7\x85\x27\x6b\xda\x95\x60\x71\x88\xd6\xe4\x67\xb0\x9d\xae\x54\x79\x1f\x7d\xff\xb1\x8f\xf9\xfc\x9f\x2f\x71\xa9\xef\x5d\x61\x36\x49\xea\x39\xc7\x1b\x73\x79\x56\x9c\xa4\xda\xaf\xe0\xe2\x59\xa8\x1e\x5c\x24\x6a\x49\x89\x1a\x0b\x96\x04\xad\x62\x97\xb0\xc6\x47\x06\x12\x78\xcc\x20\xa9\x4c\x9a\x7b\x43\x93\xc8\xc2\x2f\x85\x19\xcc\x17\x9b\x55\xe7\x8d\x85\xf3\xa8\xdd\x7b\xe0\xaf\xcb\x10\x5b\xed\xd3\x4b\x4f\xd3\x18\x57\x7a\x3a\xfd\x3c\x9b\xbb\x3b\x4b\x6e\x88\x98\xfd\xe2\x42\x7d\x4e\xaf\x26\x34\xf9\xcc\x8b\x87\x3b\x28\xb5\xf5\x6e\x95\x18\xce\x35\x3c\xbf\x90\x20\xd3\x4d\x44\x2d\x34\xf5\x06\xea\xb5\x6c\xd3\x9a\x0f\x35\x7d\x96\x97\x9c\x9f\x82\x0a\xf6\x45\x5b\x67\x8f\x11\xf7\x76\xd0\xb6\x84\xa7\xcd\xfa\x40\x4f\x7d\x8e\x34\x0d\xe9\x4f\xac\x8d\x61\x7b\x6d\xae\x65\x06\x6f\x84\x05\x9b\x5d\xd2\x94\xfa\xa8\x4d\xa1\x12\xf5\xe6\xe8\x67\x2b\xf6\x3f\x86\xea\x23\xae\xa7\x13\x7b\x14\x69\x08\xb4\xb4\xee\x99\xf0\xd5\x0c\x65\xb2\x12\xad\x86\x78\x31\x75\x87\x86\xaa\x1e\xf2\x19\x02\x25\x0c\x94\xa2\xe4\x93\x00\xff\x1a\x58\x12\x2d\x65\x62\xa4\x27\x89\x7f\x32\x40\x9d\x3a\xe8\xd3\x9c\x7d\xaa\xaa\x8f\x7b\x0e\x44\x75\xf5\xf5\x60\x77\x62\x6a\x2a\x41\x03\x8a\x27\xb4\x66\x28\x05\x79\xc0\x81\x76\x6a\x9e\x31\x5d\x9b\x53\xd7\x24\x23\x78\x2d\x84\x56\x5a\x42\x34\x16\x61\x08\xdc\x3f\x81\xe1\x88\x15\x4a\x49\xfd\x12\x14\xab\x4a\x2b\xdb\x10\x9a\xdc\xd5\xfa\xd8\x7d\xd4\x0f\xb1\x87\x0c\xf5\x4d\xba\xc1\xb8\x7b\x7b\xce\x69\xe5\x82\x7a\x3c\xc4\x77\xb1\xf3\x75\x87\x05\xe3\x75\xb5\xf5\x1e\xb8\x3d\x39\xf2\x43\xca\xc7\x82\x27\x5e\x1c\x6b\x0b\xdf\x03\x09\xae\xd6\x94\x77\x98\xd1\xbf\x4c\xf9\x37\xbc\xb2\x70\xfa\x83\xaf\x79\xbd\xba\xd9\x65\xb1\xdc\xec\xcb\x47\x69\xb1\x5f\x68\x0e\x61\x9b\x2e\x9a\x63\x74\x78\x29\x62\xe4\xfb\x82\xa7\x4a\x2a\xdb\xed\x00\xf1\xa9\x38\xfd\x50\xe6\x5b\xc7\x74\x4d\xff\x89\x86\x10\xe0\x75\x4c\x99\x8f\xd2\x6c\x14\x41\xac\xc5\x9c\x00\x2b\x3e\xc5\xa7\xc4\x19\x00\x4b\xdc\xbd\x19\x04\x50\xea\x6c\x77\xa9\x38\x46\x14\xdd\xa2\x5a\xba\xc5\xa2\xc8\xfc\xb9\x50\x4f\x85\xb7\x8b\xc2\x5b\x60\xde\x94\x07\x12\x55\xe1\xe9\xd3\x3d\xac\x0b\x93\x97\xae\xbf\x1d\xee\x6c\x15\xb8\xb6\x71\x97\x86\x78\x6c\xc8\x4d\x39\xda\xd0\x9b\x02\xb7\x82\xbf\xd1\x8c\x15\x76\xcf\xee\x72\x5a\xa2\x6b\xab\xf9\x16\x76\xf3\x19\xd6\x63\x43\x9e\x9a\x99\x95\x6e\x6a\x6f\x81\xd6\x93\xf7\xe9\x12\x0e\x34\x36\xeb\xd7\x88\xd1\x51\x3d\x41\x80\x4b\xaa\x6f\x49\xeb\x77\xf6\x79\x1c\x7a\x75\x65\xb7\xe0\x13\x4c\x12\xda\x6b\x50\xd8\xaa\x39\x96\x0f\x34\x43\x49\x90\x6b\x08\x70\xe4\x89\x15\xb6\x1e\x57\x45\x42\xe7\x8a\x99\x09\x51\x6e\x11\x34\x1e\x65\x73\xa0\x8d\x0a\x3e\xd7\x12\x34\x06\xa7\x3c\x81\x5d\xe8\x58\x1e\x0c\x3d\x49\x88\x9e\xa7\xc7\xfb\xdc\x9d\xc0\xfd\x49\x10\x60\xcd\xbd\x79\x96\x8d\x4d\x27\x27\xb0\x52\x83\x07\x1b\x5f\xb1\x65\xf6\x1c\x5c\x45\x52\xde\x1f\xd4\x1a\x30\x26\x1e\x8f\xd0\x4d\xfa\xb9\x8d\x6c\xb2\x43\x84\x1f\x71\x3d\x03\x5d\xeb\x4a\xf7\x1e\x88\xcb\x07\x68\x45\x6c\x9b\xd3\x2a\x11\x4b\x52\x3c\xb4\x3a\x1d\xac\xd8\xef\xde\x48\xca\xb7\xf9\x1b\x84\x90\x07\x5c\x9f\xe8\x2a\xd3\x45\xf2\xf7\xeb\xe2\x7f\x01\x00\x00\xff\xff\xf4\xfb\x22\x8d\x32\x4a\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x4c, 0x4, 0xe7, 0x72, 0xa4, 0xf7, 0x62, 0xd5, 0x11, 0xe6, 0xd3, 0x7f, 0xb2, 0x57, 0x34, 0x35, 0x3e, 0xb2, 0x2c, 0x7f, 0xe4, 0x62, 0xf7, 0xb7, 0x59, 0xbb, 0x3c, 0x1c, 0x44, 0x84, 0x91}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
