// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xd1\x6a\xdb\x4a\x10\x7d\xd7\x57\x2c\x24\x0f\xf7\x82\x57\xe2\xe6\x5e\xee\x43\x40\x0f\xaa\xad\x04\x53\x55\x0e\x91\x43\x0b\x6d\x11\xe3\xdd\xb1\x33\x78\x35\x2b\x76\x57\x76\xd2\xe0\x7f\x2f\xb2\xac\xd6\xa1\xa1\xf4\x4d\xbb\x67\xe6\x9c\x33\xb3\x47\x17\x02\xb7\x5e\x05\x23\x7d\x8b\x8a\xd6\xa4\x84\x7f\xf6\x01\x1b\x2d\xb4\xb3\xad\x24\x16\x1d\x53\x10\x6b\xeb\xc4\xb6\x5b\xa1\xc1\x30\x39\x1e\xb2\x06\xbe\x59\x16\x05\x71\xf7\x24\xae\xc4\x5f\x59\x71\xf5\x77\x14\x7d\xae\xd0\xed\x48\xe1\xd7\xe8\x42\x14\x56\x81\x11\x0d\x06\xd0\x10\x40\xb4\xe0\xa0\xc1\x80\xce\x5f\x8b\xfb\xfc\x76\xbe\x28\x27\x22\xfb\x58\xd5\xb3\xfc\x26\x7b\x28\x96\xf5\x70\x17\xe5\xbc\x23\x67\xb9\x41\x0e\x37\x64\x30\x4d\x30\xa8\x64\xb0\x98\x8c\x5c\x31\xf2\x2e\xba\x10\xb7\xc6\xae\xc0\x08\x60\x2d\x7c\x80\x40\xea\x95\xc6\xb4\x78\xa8\x96\xf9\x7d\x3d\x2b\xab\x89\x28\x17\xb3\xbc\x2e\xb2\x77\x79\x31\x1e\x96\xd9\xbc\x5c\x56\xbf\x95\x3b\xcd\x7b\x52\x1b\xc6\x61\xcb\xf2\x0d\xb1\x23\xe5\xfc\x6e\x22\xe6\x65\xb5\xcc\xca\x69\x5e\xcf\x67\x7f\xc4\x6d\x7a\xd6\xa3\x42\x94\x3f\xa1\xaa\x02\xb8\x90\x9e\x7d\x26\x9d\x77\xc9\x8a\x78\x6c\x10\x5f\x22\x21\xa4\x64\xab\x51\x52\x9b\x5e\xbe\x9c\x94\x0f\xe7\x80\x81\x15\x1a\x3f\x82\xc3\xd8\x87\x09\x98\xf6\x11\xe2\x41\x3f\x26\x9b\x10\xfb\x00\xac\x50\x92\x4e\x2f\x5f\xce\x8c\x8f\x5c\x0d\x3c\xc9\xd6\xea\x9e\xe8\x43\xf6\xa9\xbe\x5b\xcc\xaa\x11\x72\xb8\x21\x1f\xd0\x1d\xf5\xd2\xe0\x3a\x3c\xbf\xdc\x53\x78\x94\x01\x88\xc3\x0f\x13\xc3\xba\xc7\x76\x30\xc6\xee\x65\xeb\x68\x47\x06\x37\xa8\x07\x86\x01\x53\xc6\x76\x5a\xb6\xce\xee\x48\xa3\x4b\x61\xef\x47\xc0\x72\xcf\x89\x4e\xba\x8e\x03\x35\x98\x6a\xab\xb6\xe8\xc6\xc9\x31\xec\xad\xdb\xca\xd6\x74\x1b\xe2\x54\x31\x8d\x7d\x4c\x72\x45\x2c\x35\xb9\x34\xb1\x6d\x48\x14\x53\xbf\xd2\x33\x58\x59\x5e\x0f\x78\xff\x44\x3d\xce\x18\x62\x7d\xaa\x68\xad\x96\xc4\x6b\x07\x67\x16\xa8\x81\x0d\xa6\x97\x2f\x7d\x82\xf3\xf7\x55\x9d\x4f\xef\xeb\x6c\x3a\x5d\x3c\x94\xcb\x43\xac\xb7\x2e\x46\xe5\xe2\x01\x7e\x1d\xf0\x43\x0c\xc7\x3f\x07\xf6\x3e\x56\xb6\xe9\xf3\x90\xb4\xd0\x79\x94\xd0\xe8\xff\xff\xbb\xfe\x37\xfe\xe7\x24\xdb\xbf\x78\x6f\x8c\x36\xbf\x24\x67\xb8\x8e\x9f\xa1\x31\x3f\x97\xf3\x56\x61\x1f\xb1\xbe\x2a\xfa\x1e\x00\x00\xff\xff\x5c\x3b\x51\x59\xe7\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 999, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x7f\x6f\xdb\x36\x10\xfd\x9f\x9f\xe2\x55\x11\x92\x18\x2b\xa3\x36\xe8\x06\x34\x89\x07\x68\x89\x32\x08\x70\x6d\xa3\xf6\xd6\x76\x89\xa7\xd2\xd2\xb9\x26\x4a\x93\x9a\x48\x39\x71\x33\xef\xb3\x0f\xb2\xad\x44\x6a\x13\x60\x28\xf6\x97\x7d\x77\x8f\xcf\xf7\xeb\x9d\xf7\x9e\x05\x53\xa9\x83\xa9\xb0\x73\xc6\x2c\x39\x70\x03\x2a\x0a\xba\x95\xae\x36\x73\x99\xd3\x4c\x48\x55\xdb\xda\x94\xda\x92\x63\x6c\x56\xea\xd4\x49\xa3\xf1\x89\x5c\xb2\x10\xb7\x49\x6e\x32\x7b\xd8\xc1\x1d\x03\x6e\xe6\x52\x11\x0a\x12\x19\xa4\xb6\x4e\xe8\x94\x12\xb7\xca\x09\x15\xe6\x14\x99\x61\x00\x20\x67\xc0\xd5\x15\x3c\xff\xae\x05\x5a\x7b\xe8\x76\x2b\xef\xcb\xb5\x87\xc9\x04\xfb\xfb\x3b\x54\xf5\xb8\x0a\xfe\x83\x3f\xaf\x5e\xf0\xd7\x93\x1f\xfc\x2a\x7c\x0a\x37\x27\xbd\x21\x04\x28\x9d\x1b\xec\x90\x3b\x57\x41\xae\x2c\xb6\xf1\x99\x64\x40\x66\x34\xe1\x0c\x01\xb9\x34\xa0\xcf\x36\x75\x2a\xa8\xb3\x3f\x5a\x88\x9c\xad\x19\x8b\xce\x8f\x93\xf0\xf7\x30\xee\x25\x7f\x0c\xfa\x51\xd7\x3f\x4c\xcb\x42\x81\x5b\xcc\x9d\xcb\x4f\x82\xe0\xe5\x4f\xaf\x8f\x8e\x7f\x7c\x75\xb4\xfb\x0c\x94\x70\x64\x5d\xb0\x20\x27\x78\x26\x9c\x08\x72\x25\x52\x5a\x90\x76\x81\x58\x0a\xa9\xc4\x54\x2a\xe9\x56\xfc\x8b\xd1\xd4\x61\xe1\xbb\x51\x72\x11\x5d\x86\xbf\xf5\xc6\xc9\xdb\xe8\xd7\x78\xd0\xef\x7a\x1f\x37\x89\x5f\x7b\x7e\xfb\xa7\xaf\x3d\xfc\x0d\x4b\x19\x0e\x6c\x70\x25\xf8\x97\x89\x1f\x04\x07\x1f\x3d\xd6\x1f\x5c\x44\x49\x3c\xec\x7a\x75\x6a\xdc\x4a\x45\xda\xfd\xe7\x04\x95\x49\x85\xe2\x32\x5f\xbe\xea\x78\x2c\xee\x8f\xc6\x61\xff\x3c\x4a\xe2\x8b\xef\x67\xac\x47\xc8\x65\xd6\xa4\x1c\x7f\x18\x46\xff\x03\x69\xb5\x17\x1d\x8f\x31\x6b\xca\x22\xa5\xd6\xf0\x3e\x97\x53\x52\xe4\x8e\x48\x2f\xb1\x07\x37\x97\x16\xa9\xd0\x30\x4b\x2a\x0a\x99\x11\xde\x84\xef\x93\xe1\xe0\x62\xc4\xd8\xde\x65\xfc\xfe\x4d\x74\x82\x38\x23\xa1\xd4\x6a\x8b\xb5\x69\x21\x73\x07\x3b\x37\xa5\xca\xa0\x8d\x43\x2a\x94\xc2\x3e\x32\xca\x49\x67\x16\x46\x57\x0b\x86\xf0\xdd\x08\xe1\x30\xb6\x6c\x6f\x6e\x6e\x68\x49\x05\xa4\x83\xb4\x9b\x98\xd1\x6a\x85\x1b\xb1\x82\x70\x1b\x7b\x61\xaa\xd9\xc3\x19\x98\xa9\x13\x72\x4b\x50\xd7\xd2\x93\x33\x4a\x57\xa9\x22\x2c\x85\x2a\x09\x87\xa3\xdc\xb8\xc0\x68\x9e\xd1\x42\xe8\xac\xc3\x1e\x9a\xd7\x8b\x2f\xa3\xf3\x0f\xe7\xbd\x6a\x05\xc5\x8d\x05\xa5\xc7\xc8\xa8\xca\x78\x4a\xbc\xe6\xb3\xe0\xbc\xa0\x4f\x95\x12\xfd\x6f\x57\x0b\x9c\x37\x26\x63\xe1\xdf\x35\xa6\xbd\xc6\x35\xe3\xfc\xaf\x92\x8a\x15\x0e\xde\x92\xa5\x62\x29\x2a\x49\xdb\xab\x17\x93\xa3\xb8\xe6\x6f\x1a\xf7\xc9\x1f\x80\x73\x53\xba\xbc\x74\x70\x74\xeb\x3a\x8c\xc9\x19\x2a\x95\x7e\x9b\xfc\x56\xce\x36\x37\xce\xc3\x56\xcd\xf0\xfc\xd1\x70\x30\x4e\x36\x6b\xdc\x0b\x7f\x89\x7a\x23\x0f\xcf\xba\xf0\x3c\x60\x72\xaf\xe7\x1d\x61\x0b\xd4\xdd\x80\x26\xa7\x0f\x92\x6f\x84\xbb\x9e\x7f\xf7\x35\xef\xda\x63\x00\x29\x4b\x8f\xa2\x9b\xc0\xe7\x4f\x3c\x9e\x49\x36\x93\xdf\x5f\xde\x38\x8c\xfb\xe3\xfb\xf2\x1e\xaf\xae\xc6\x3c\x51\xdd\x36\xdc\xae\x6e\xeb\x7b\xac\xba\x07\x74\x13\xf8\xfc\x89\xc7\xbb\xea\x52\xe1\xf0\xf3\xa3\xb2\xda\x5c\x8a\x8d\xb8\xce\xce\xa2\xc1\xe5\xfd\xe9\xd9\xd1\xc7\xc3\x75\xeb\x7e\xb4\xf7\xeb\xab\x3b\xd0\x08\x56\xf6\x9a\xd5\xda\xec\xfa\x77\xf5\xd7\x13\xee\x1f\x36\xff\x51\xaa\xc3\xdf\x7e\xe5\x75\xd6\xac\x39\xc7\xf6\x18\x59\xb3\x09\xed\x1e\xb0\x2a\x7f\x66\x57\xd6\xd1\x22\x75\x0a\x99\xa0\x85\xd1\xbc\x20\x65\x44\xd6\xf0\x93\x16\x53\x45\xd8\x75\xa0\x11\xb0\x4e\x14\xee\xde\xff\x6f\x00\x00\x00\xff\xff\x93\xc2\x80\xfe\x3d\x07\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 1853, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x7f\x6f\xdb\x36\x10\xfd\x9f\x9f\xe2\xaa\x18\x4d\x8c\x85\x52\x9b\x75\x05\x9a\x54\xc3\xbc\xc4\x19\x8c\xb9\x71\x50\xbb\x6b\xbb\xd4\x73\x69\xf1\x6c\x13\xa1\x48\x8d\xa4\xec\xb8\x99\xf7\xd9\x07\xea\x87\x23\xa7\xc9\x30\x14\xfb\xcb\x26\xef\xf1\xe9\x8e\x7c\xf7\x6e\xef\x49\x34\x15\x2a\x9a\x32\xbb\x20\xc4\xa2\x03\xaa\x01\x8d\xc1\x1b\xe1\xea\x65\x26\x32\x9c\x31\x21\xeb\xb5\xd2\xb9\xb2\xe8\x08\x99\xe5\x2a\x71\x42\x2b\x98\xa3\x9b\xa4\xec\x66\x92\x69\x6e\x0f\xda\x70\x4b\x00\x56\x0b\x21\x11\x0c\x32\x0e\x42\x59\xc7\x54\x82\x13\xb7\xce\x10\x3c\xe6\x04\xb8\x26\x00\x00\x62\x06\x70\x75\x05\x41\xeb\x76\x07\xb4\x09\x20\x8e\xfd\xee\xf3\x4d\x00\xe3\x31\x3c\x7d\x5a\xa1\xfc\x61\x1f\xfc\x1b\xfe\xb8\x7a\x46\x5f\x8d\xbf\x6b\xf9\xf0\x09\xb8\x05\xaa\x82\x10\x00\x93\x85\x86\x0a\x79\x52\xed\x19\x74\xb9\x29\x01\x33\x41\x00\xb8\x56\x08\xaf\x21\x42\x97\x44\x78\x6d\x13\x27\xa3\x3a\xfd\x30\x65\x19\xd9\x10\xd2\x3d\x3d\x9a\x74\x7e\xeb\xf4\xfa\x93\xdf\x07\x17\xdd\xb8\x75\x90\xe4\x46\x02\xb5\xb0\x70\x2e\x3b\x8e\xa2\xe7\x2f\x5f\x85\x47\x3f\xbc\x08\xab\xdf\x48\x32\x87\xd6\x45\x29\x3a\x46\x39\x73\x2c\xca\x24\x4b\x30\x45\xe5\x22\xb6\x64\x42\xb2\xa9\x90\xc2\xad\xe9\x17\xad\xb0\x4d\x3a\xef\x87\x93\xb3\xee\x79\xe7\x5d\x7f\x34\x79\xdb\xfd\xa5\x37\xb8\x88\x83\xcf\x45\xe6\x9f\x82\xd6\xee\xa7\x3f\x05\xf0\x17\x58\xe4\xb0\x6f\xa3\x2b\x46\xbf\x8c\x5b\x51\xb4\xff\x39\x20\x17\x83\xb3\xee\xa4\x77\x19\x07\x75\x6a\xd4\x0a\x89\xca\xfd\xe7\x04\xa5\x4e\x98\xa4\x22\x5b\xbe\x68\x07\xa4\x77\x31\x1c\x75\x2e\x4e\xbb\x93\xde\xd9\xb7\x33\xd6\x6f\x48\x05\x6f\x52\x8e\x3e\x5e\x76\xff\x07\x52\x2f\x8c\x76\x40\x88\xd5\xb9\x49\x70\xe7\xf1\xae\xf3\x29\x4a\x74\x21\xaa\x25\xec\x81\x5b\x08\x0b\x09\x53\xa0\x97\x68\x8c\xe0\x08\x6f\x3a\x1f\x26\x97\x83\xb3\x21\x21\x7b\xe7\xbd\x0f\x6f\xba\xc7\xd0\xe3\xc8\xa4\x5c\x97\x58\x9b\x18\x91\x39\xb0\x0b\x9d\x4b\x0e\x4a\x3b\x48\x98\x94\xf0\x14\x38\x66\xa8\xb8\x05\xad\xbc\xc2\xa0\xf3\x7e\x08\x9d\xcb\x9e\x25\x7b\x0b\xbd\xc2\x25\x1a\x10\x0e\x84\x2d\x62\x5a\xc9\x35\xac\xd8\x1a\x98\x2b\xd6\xa9\xf6\x6f\x0f\x4e\x83\x9e\x3a\x26\x4a\x82\xba\x96\xbe\x98\x61\xb2\x4e\x24\xc2\x92\xc9\x1c\xe1\x60\x98\x69\x17\x69\x45\x39\xa6\x4c\xf1\x36\xb9\xbb\xbc\x7e\xef\xbc\x7b\xfa\xf1\xb4\xef\x25\x18\x59\xc5\xb2\xa2\x5d\xd9\xca\x02\x26\x47\xc0\xd1\xe7\x3e\x45\x5a\x33\x5b\xa0\xd4\xe0\xdc\x37\x65\xeb\x6b\x91\x01\xa5\x8d\x37\xb2\xd0\xba\x6d\xbc\xfb\x06\x3e\x11\x4a\xff\xcc\xd1\xac\x61\xff\x2d\x5a\x34\x4b\xe6\xbb\xdb\x5e\x3d\x1b\x87\xbd\x9a\xbf\xb9\xd8\x96\xb1\x0f\x94\xea\xdc\x65\xb9\x03\x87\x37\xae\x4d\x88\x98\x81\x6f\xd8\xaf\xcb\x28\x3b\xdb\x66\xda\x05\x50\x36\x36\x04\xad\xe1\xe5\x60\x34\x29\x04\xdd\xef\xfc\xdc\xed\x0f\x03\x78\x12\x43\x10\x00\x8c\xb7\xad\x5d\x11\xee\x80\xe2\x02\x34\x3e\xb9\xeb\xfe\x46\x38\x0e\x5a\xb7\xf7\x79\x37\x01\x01\x40\x69\xf1\x41\x74\x13\x78\xf8\xc8\xe1\x99\x20\x33\xf1\xed\xe5\x8d\x3a\xbd\x8b\xd1\xb6\xbc\x87\xab\xab\x31\x8f\x54\x57\x86\x77\xab\x2b\xf7\x1e\xaa\xee\x0e\xdd\x04\x1e\x3e\x72\xb8\xaa\x2e\x61\x0e\x7e\x7c\xb0\xc1\x0a\xcf\x28\xda\xec\xf5\xeb\xee\xe0\x7c\x6b\x42\x15\x7d\xef\x72\xb3\xe3\x24\xbb\xfa\xba\xe7\x08\x8d\xa0\x5f\x6f\x48\xdd\xa5\x71\xeb\xb6\xfe\x7b\x4c\x5b\x07\xcd\xe1\xe2\x67\xc0\xee\xa9\xa0\xbd\x21\xcd\x77\xdc\x7d\x46\xd2\xbc\x84\xdd\x3b\x20\x3e\x7f\xe2\x3b\x0a\x98\x14\xcc\x42\x55\x23\xc5\x6b\x1b\x56\xff\xeb\xbd\xfb\xb0\xc4\xc9\x2d\x2c\x71\xb2\xde\x2b\x61\xd6\xe9\xac\x49\x46\xec\xda\x3a\x4c\x3d\xce\xa0\x45\x47\xfd\x2c\x45\x4e\xc8\x01\x01\xd8\x83\xd1\xe0\x6c\x70\xec\x75\x60\xb1\x76\xa0\x29\x82\xd4\xfa\x1a\xb9\x37\x13\xef\x33\x6b\x70\x22\xc5\x9a\x14\xac\x63\xc6\x59\xc8\xb3\xc3\x82\x61\xb5\x10\xc9\xc2\xfb\xd0\x6a\xc1\x1c\xac\x10\xb8\x06\xa1\xa0\xd3\x3f\x82\x83\x6d\x6c\xca\xfc\x0c\xd1\x0a\x32\xe9\xdd\xa8\xcc\x89\x97\x04\x4c\x71\x48\x91\x95\x76\x35\xf5\x23\xda\x38\x36\x95\xe8\x97\xa9\xb6\xae\x46\x03\x17\xd6\x19\x6d\xdb\x87\x30\xcd\x1d\x08\xb7\x6f\x8b\xf3\x85\x63\x4a\x64\x06\x16\x7a\xe5\x0f\x49\xcd\x78\x55\xd2\xcc\xe8\xf4\x2e\x71\x7f\x3f\x2b\xe1\x16\x3a\x77\xb0\x60\x4b\xa1\xe6\x05\x81\xd3\x90\xe4\xd6\xe9\x54\x58\x2c\x8c\xb2\x00\x0a\x67\x51\xce\x08\xc0\xbf\x3b\xfe\xc3\x00\x3f\x40\xfc\xfc\x78\x1c\xf1\x95\xa6\x89\xef\x00\xc9\xe6\x36\x3e\x28\x3a\x28\x50\x9a\x23\x15\x59\x43\xdd\x41\x19\x48\xd9\x0d\xf5\x72\x6c\x28\xb5\x0e\x15\x67\x24\x9b\xa2\xb4\xf7\xb4\x78\xc8\x64\xb6\x60\x61\xf9\xf5\x50\xe8\xe6\xb8\xbc\xd7\x29\x15\x17\x93\x52\xaf\x68\x66\xc4\x52\x48\x9c\x23\x8f\x9d\xc9\xb1\x8a\x65\x9a\x53\xa1\x66\x86\xd1\x44\x2b\x3f\x60\xd0\x50\x91\xb2\x39\xc6\xad\x5b\x6f\xfc\xdd\x5f\x87\x93\xee\xe9\xdb\x49\xe7\xf4\x74\xf0\xee\x62\xb4\x09\xf9\xb5\x09\x31\x31\x61\x19\xde\x9d\x0b\x9b\x90\xa5\xec\x8b\x56\x6c\x65\xc3\x44\xa7\xfe\x86\xa2\x8c\xe5\x16\x29\x4b\xf9\xcb\x17\xc7\xdf\x87\xcf\xab\xcf\x26\x52\xe7\x9c\x66\x46\x2f\x05\x47\x13\xb3\x95\xad\x03\x4a\xd0\xa9\x50\x94\x0b\x13\x47\x3a\x73\x51\xa2\x84\x1f\x55\x8d\x70\xa2\xd5\xac\x8c\xfb\x57\xf0\x71\x85\x2e\xe4\x35\x62\x5b\x86\xc9\x95\x97\x7b\xcc\x75\x72\x8d\xa6\xbe\x57\x74\x2b\x6d\xae\x69\x26\xf3\xb9\x50\x71\xa2\x44\x15\xf0\xd3\xce\x3a\x34\xd4\xdf\x7c\xf3\x86\xb6\x01\x2f\x38\xea\xb9\x9d\xbd\xe7\x01\x15\xb2\x68\x5f\xad\x66\x62\x1e\xdf\x17\x48\xb9\x1d\xae\x59\x2a\xef\xf2\x7c\x08\xe8\x95\x54\xa3\xda\x5e\x49\xa5\x17\xdc\x79\x88\xb7\x02\x6f\x5f\x85\xc2\xae\x7e\x1a\x6f\x02\xd2\x26\xb5\x63\x30\xb3\x83\x23\xff\x04\x00\x00\xff\xff\xfa\x46\x02\x16\x96\x0b\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2966, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

