// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (20.672kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x10\x7c\x7d\x2a\xf6\x36\x2d\x70\xbd\x87\xbc\x39\x76\x2e\x6b\xec\xc6\x31\xec\xc3\x16\xe8\xe1\x1e\x46\xd4\x58\xe6\x85\x22\x55\x92\x72\xec\x2b\xf6\xbb\x17\xb2\xac\x58\xb2\x44\x59\xa6\xfe\xd8\x69\xf7\x61\x81\x85\xa5\x21\x7f\x33\x9c\xff\x1c\xe5\x3f\x37\x8e\x33\xf8\x8b\x22\x2b\x0c\x60\x70\xe7\x0c\x56\x5a\x87\x77\xb7\xb7\x7f\x28\xc1\x7f\x4c\x7e\xfd\x28\xa4\x7f\xeb\x49\x58\xea\x1f\xff\xf6\xd3\x6d\xf2\xdb\x0f\x83\x0f\x3b\x3a\x89\xcb\x98\xe8\x87\x5b\x0f\x97\x94\x53\x4d\x05\x57\xb7\x23\x16\x29\x8d\x72\x24\xf8\x92\xfa\xc9\x8b\x99\xc7\x83\x3b\x27\xde\xd3\x71\x06\xe9\x7b\x4c\x44\xde\x3f\x41\x93\xd5\xdb\x23\xc7\x19\x84\x52\x84\x28\x35\x45\x95\xf9\xd5\x71\x06\x24\x21\xfa\x22\x7c\x9f\x72\x3f\xf7\xcc\x9e\x91\x03\x7d\x25\x43\x6f\x40\xd3\xdd\xdf\x48\xbf\xed\xff\xf7\x2d\x5d\x6d\x00\x9e\xb7\xa3\x06\x36\xcb\x72\xb2\x04\xa6\xf0\xed\x25\xbd\x0d\x31\xde\x4e\xb8\x7f\x20\xd1\xc9\x72\xfb\x25\x8a\xd2\x29\xb2\x6c\x14\x12\x72\x70\x19\xfe\xba\x0d\x8f\x1e\x38\xce\x80\x6a\x0c\x8e\x7f\xcc\x20\x51\x5a\xe6\x18\xcb\xb0\x94\x7b\x0f\xa4\x84\x6d\x2f\xfc\x27\x5a\x94\x61\x5a\xe2\xbf\x23\x2a\xd1\x1b\xdc\x39\xbf\x1d\x58\x0e\x50\x83\x07\x1a\x52\x4c\xbf\x7f\x38\x25\xa4\x17\xca\xbd\x63\xe9\x1c\x89\x21\xc7\x3a\x6e\x20\x08\xd9\x6e\x95\xdf\xf2\xc2\xcb\x43\xcd\x3c\xfb\xfd\xa6\x44\x8a\x03\x08\xe9\x57\x94\x8a\x0a\xde\xce\xf6\xf8\xa2\x88\x66\x1f\xa9\xb8\x5d\xff\x1d\x58\xb8\x82\x7f\x9c\xc6\xf0\x26\xae\x3e\x0d\xe8\x09\x0f\xe7\x93\x87\x43\x21\xe8\x15\xc9\x64\xf8\x54\x0e\x64\x1d\x92\x5e\x81\x7c\x9d\x8d\xca\x81\x70\xe1\xe1\xa3\x14\x51\x58\xd7\x82\x1b\xc2\x34\x02\x9d\xa6\x40\xce\x77\x0a\x59\x7d\x03\x0e\x3e\x7a\xd3\x6b\xe1\xea\xe9\x08\x4f\x23\xe6\x96\x20\x7d\xd0\x38\x93\x62\x49\x59\x6d\x97\xdb\x15\x6b\xbf\xe4\xd0\x34\x62\x0c\xd6\x40\x19\xb8\x94\x51\xbd\xfd\x97\xe0\xbd\x45\x93\x0f\xd9\x78\x5f\x92\x1d\xb4\x21\xbf\xba\xb1\xbe\x1c\x96\x42\x22\x51\xab\x07\x4e\xe4\x36\xd4\x25\xae\xbc\x1b\x74\x8b\xc2\xb6\xe5\xe8\x34\xe8\xa8\x70\x58\x9d\x0a\x6c\x91\x6c\x59\x0a\xc7\xa7\xba\x1f\x2c\x8f\x54\xf7\x91\x93\x3c\x70\x2f\x14\x94\x6b\x55\x27\x17\x0b\x25\x5d\x83\xc6\x21\x21\xa8\x0a\x47\x92\x6e\xe6\x0a\xc1\x10\x0c\xa7\x19\x46\x2e\xa3\xe4\xdc\x05\x3a\xe3\x3e\x8e\x9d\x35\xf8\x56\x28\xd7\x94\xe0\x5c\x30\x1c\xce\xa7\x27\x32\x1d\x83\x8d\xbd\xad\x30\x43\x19\x50\x15\xa7\x4c\xea\x5e\x44\xdc\x03\xb9\xb5\x59\x31\x75\xd4\xc2\x7b\xd8\x20\x89\x62\x69\x34\xc0\x67\x58\xad\x25\xac\xaf\x54\xaf\x9e\x27\xe3\x91\x95\xca\xec\x45\x37\x24\x44\x44\x79\x3d\x75\x2e\x10\x91\x0e\x8a\xb3\xc8\xe1\xba\xa2\x32\x63\x32\x7c\xda\x65\xa7\x35\x14\x9b\x43\x80\x36\x07\x1a\xd3\xa9\x10\x88\x15\x31\x03\x17\x59\xe1\x1c\x43\xd0\x1a\x25\x9f\x95\x23\xdd\xbd\xf2\xf1\xaf\x85\xdf\x2a\x03\xf4\x41\xc8\xe6\x53\xc9\xca\xf1\x18\x28\x70\x2e\x34\xe4\x2b\xfd\x2b\x43\xdb\xa5\x12\x1d\x29\x78\x0d\x75\xba\x48\x25\x96\xaa\x7b\xf9\x11\x6a\x0d\x64\x35\x13\x8c\x92\xed\x70\x3e\xbd\x40\xd2\x97\x45\xd0\x9a\x16\x19\x4e\x59\xcb\x08\x5b\xd4\xff\xb0\x1d\xef\x7f\x81\x0c\xae\xa0\xbd\x55\x29\x9d\x06\xff\xbb\x7d\xa7\x12\xaa\x61\xe5\xf2\xcc\x34\xa3\x33\x1e\x8e\xa3\x5c\x79\x37\x6d\x17\xe3\x32\xc7\x2d\xd1\xcf\x14\x1b\xa7\x7b\x6b\xb6\x31\x72\xbf\x8f\x05\xe5\xba\x56\x47\xed\xbb\x2e\xa7\x7a\x30\x1d\xfe\x5a\x47\x6f\xe3\x04\xf7\x15\xea\xbb\xb0\xce\xf0\xd6\x37\x35\xdc\x57\x67\x36\xaa\x40\xe2\x05\x97\x94\xc4\x05\x5b\xa4\x57\x42\x52\xbd\x1d\x97\x04\xe7\xaa\x46\x6d\x80\x1e\x3d\x26\x70\x9c\x81\x4b\x39\xc8\xed\x03\x27\xc2\x4b\xba\xf8\x03\x17\x14\xfe\xfc\x53\x2e\x50\x96\x47\x43\x69\xa5\xd6\x4a\x03\x79\x99\x9e\x63\x88\xdd\x1d\x5e\xe4\x72\x3c\xab\x5c\x6e\xcd\x1e\x1b\xd7\x34\xe6\xc6\x28\xea\x57\x21\x5f\xda\x4c\x9e\x93\x4a\xbf\x3d\xde\x3b\xc5\xdd\x99\xb6\x7c\x9d\x8d\xea\x68\x0a\x3d\x75\x7b\x53\x6e\xe1\xd4\x93\x76\xcd\x08\x12\xc5\xde\x20\xe9\x16\xdb\x2c\x50\xb0\x01\xa7\xf3\x94\x2e\xb5\xbb\x52\x40\xb8\xd1\x12\x46\x93\xf1\xfc\x02\x09\xbe\x5a\x81\x4c\xba\xef\x8b\xa6\x72\x85\x48\x8b\x21\x63\x22\xf6\xd9\x93\xd9\xfa\x67\xab\x7e\x09\x87\x9e\x3a\x94\x99\xe8\x5b\xae\x9e\xe6\x0e\x63\xf7\xa8\x0e\xbb\x56\x78\xa7\xa4\x0f\xd9\xa7\xde\xb4\xef\x68\x8e\xae\x48\xea\xa5\xc3\x9d\x27\xbf\x61\x3b\x6d\x49\x85\x0c\x89\x16\xf2\xd2\x5d\xbf\xbc\x90\x17\x7b\x54\xcd\xdc\x46\xb9\x0f\xed\xde\x5f\xfd\x7f\x95\x08\x86\x93\xab\x65\x26\x49\x87\xf3\x2c\x5b\xf9\x1f\x6d\x8a\xb6\x7f\x2e\x8f\xb4\x56\x47\x51\x62\x28\xfa\x89\x1b\xf3\x78\xa7\xd2\xa3\x89\x91\x41\x5e\x69\x3a\xc4\xf1\x9c\xee\x56\x8a\xc5\x15\x42\x2b\x2d\x21\x2c\xfa\xfb\x0e\x31\x15\xee\xdf\x3b\x50\x88\xc2\x14\xc3\x95\x44\x32\x08\xe8\x2f\x10\x50\x66\xd5\xfa\xa4\x5c\x69\xe0\x64\x37\xbe\x66\x43\xef\xa1\x8a\xf9\x1e\x41\x08\x84\x6a\x23\x04\xca\x35\xfa\x68\x50\x99\x80\xf2\x05\xfd\xd3\xb8\x7d\x35\x2d\x6c\xac\x69\xd7\x82\x45\x01\x5a\x93\x5f\xc1\xbc\x86\x52\xc5\x41\x8d\xea\xb9\xa2\xc5\xe2\xd3\x7b\x74\xef\xd9\xc4\x2d\xe9\x59\xec\x0b\xeb\x92\xb1\xd4\x5a\x35\xc8\x35\xe7\x18\x59\xf3\x2c\x19\xd5\xab\x3e\xe0\xfc\xb0\x5d\x07\x5e\x10\xb5\xa4\x44\x8d\x04\x8b\x13\x95\x7c\x13\xd8\xe0\x06\x7d\x09\x3c\x62\x10\x17\x9e\xf5\xbd\x61\x96\xc8\xc2\x2f\x05\x09\xcc\x77\x5b\x34\xa5\x7d\xa3\xeb\x68\xcd\x74\xc0\xdf\x15\x46\xd1\x77\x17\x7c\x53\x7a\x35\xa6\xf1\x6b\x6e\xd4\xdf\x6c\xdc\xc1\xdf\x94\x62\xa8\x84\x3b\x93\xb8\xa4\x9b\x26\x0c\x9f\xd5\x68\xbf\xae\x90\xfd\x4e\x02\x4f\x3b\x51\x36\xd7\xc7\xed\xa9\xbd\x76\x48\x75\x1e\x0d\xad\xb5\xf7\x9c\xb3\x82\xf2\xab\x22\xb0\x53\xa1\xc4\x9d\x4d\x77\x17\xf0\x34\xb1\x0f\x74\xd5\x73\xa8\x69\x40\xff\x44\x63\x5c\xab\xd4\xb9\x86\x59\x7d\x42\x6e\xeb\x91\x13\x6a\x5b\xf7\x94\x50\xef\xe7\x8d\x1b\xb1\xff\x39\x50\x9f\x71\x3b\x19\xdb\xa3\x98\x3c\xcf\x16\xb6\xda\x3d\x13\x9e\x9a\xa1\x8c\x2d\xd1\x6a\x89\x77\x53\x8b\x68\x28\xbb\x36\xb8\x42\xa0\x84\x81\x52\x94\x7c\x11\xe0\xdd\x03\x8b\x43\xa8\x8c\x95\xf4\x22\xf1\x4f\xfa\xa8\x77\x0e\xfa\x32\xe3\x6e\x65\x35\x73\xc7\x81\xc8\x54\x73\xf7\xf6\x21\x96\xa1\x3a\xcc\xb5\xed\xb4\x66\x28\x05\x79\xc1\x9e\x2e\xe7\xde\x30\xdd\x67\xb7\x36\x24\x23\x78\x9f\xb6\x15\x47\x22\x08\x80\x7b\x17\x50\x1c\xb1\x46\x29\xa9\x57\x80\x62\x55\x7d\x25\x77\x80\xe3\xa9\xd1\xc7\x56\x51\xbf\x44\x2e\x32\xd4\x0f\xbb\x3b\xe5\xe3\x4f\x36\x9d\x46\x2e\xa8\xc3\xb9\xcd\x9b\xa3\xb7\x5b\x2c\x22\xef\xcb\xb5\xf7\xc4\x27\xbb\x43\x2f\xa0\x7c\x24\x78\xec\xc5\xd1\x58\x0c\x9f\x48\x70\xb5\xa6\xbc\xc5\x8c\xfe\x7d\xca\xbf\xe6\x57\x2a\x97\x9f\x75\x3e\x94\xa0\xbb\xfb\x02\xcb\x4b\xdf\x74\x95\x06\xf7\xc6\xd9\x25\x6c\xd3\xc5\xec\x1a\x2d\x7e\x07\x33\xf4\x3c\xc1\x77\x87\x54\xd4\xdb\x1e\xe2\x53\x7e\xfb\xbe\xd4\xd7\xc4\xb4\xb9\xeb\x16\x80\x8f\xf7\x11\x65\x9e\xa5\xeb\x80\x48\x8b\x05\x01\x66\x49\x8e\x9b\xd8\xc1\x00\xab\x08\x21\x95\xf4\x04\xa5\x4e\x6e\xb4\x2c\xe1\x87\xe1\x13\x16\x53\xa9\x7a\xd8\x5d\xbb\x6f\xf3\x96\xca\xd8\x35\xaa\xde\x6f\x69\xb7\x1f\x30\x77\xc2\x7d\x69\xfb\x29\xe1\x66\x6e\x9e\xe5\xad\x3e\x1b\xe3\x67\xb8\x66\xf2\x2e\xcd\xe3\x44\x9b\xd1\xd0\xb7\xcd\x76\x37\x55\xfd\x06\x6e\x9e\xac\xf7\x08\x11\x97\xaf\x92\x9a\x47\x24\x78\x14\xb8\xa6\xba\x55\xf0\x31\xc6\x19\xe1\x3d\x28\x6c\xd4\x5d\x4a\x17\x9a\xa1\x24\xc8\x35\xf8\x38\x74\xc5\x1a\x1b\xaf\xab\x42\xa1\xd3\xd3\x9c\x09\x51\xac\xb1\x6b\xaf\xb2\x1f\x02\xa4\x82\x2f\xb4\x04\x8d\xfe\x25\xa7\xd6\x73\x2d\xbf\xda\x79\xc8\x64\x7c\x01\xf5\x8a\x03\xec\x62\x37\x8f\x69\xe5\x19\x62\xf2\x2f\x82\x00\xbb\x0a\xc7\x10\x17\xb6\x75\xc4\xcd\x98\x78\xb5\x62\x37\x19\x82\xfc\x8c\xdb\x19\x68\xa3\x2f\xac\x9c\xf2\x4b\x17\x68\x44\x6c\x9b\xa0\x29\x11\x49\x92\x1f\xba\x9d\xf4\x56\xb9\xb6\x7f\xee\xcf\xc5\x31\x23\xf3\x5f\x8e\x12\x41\x40\x75\x4a\xf1\x04\x9c\x2e\x51\x15\x5b\x65\xb5\xb4\x60\xd7\x0e\xb4\x91\x7f\xa3\x79\xb7\xd8\xd4\x3e\x21\x2b\x74\x68\x6a\x41\x96\x08\xde\x33\x37\xdf\x0a\xf6\x61\xa6\x25\x03\xb7\xc6\x3f\x1f\xb0\x53\x54\x1b\x29\x49\x5c\x53\xdb\x4f\xc1\x44\xa4\xc3\x48\x9f\x65\xda\xed\x4b\x69\x9e\x9f\xdf\x33\x8a\x28\x92\x56\x2a\xe8\x4a\xe0\xe6\x34\xae\xd2\xfb\x80\x5e\x5d\x20\x40\x2d\x59\xb4\xb1\xf5\xb6\x91\x32\x17\x13\x55\x74\x18\x00\xb5\x92\xee\xfe\x96\x72\xb1\xf8\x74\x6e\x8c\x68\x5f\x91\x8a\x7f\x2d\xe6\x64\x86\xfc\x82\xdb\xe1\x7c\x5a\x3f\x35\xde\xbf\x7f\x01\x1e\x6f\xe2\x7f\xdf\x6e\xfe\x1b\x00\x00\xff\xff\xee\xaa\x93\x39\xc0\x50\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xe2, 0xb5, 0xfc, 0xf7, 0xca, 0xa2, 0x8a, 0x1c, 0x54, 0x8b, 0x91, 0xa8, 0x75, 0xf0, 0xfd, 0x11, 0x4d, 0x8d, 0x4d, 0xdc, 0xb5, 0xf5, 0xa0, 0x6c, 0x85, 0x84, 0xd0, 0xe3, 0x27, 0x36, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
