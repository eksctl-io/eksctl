// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (20.672kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x6f\xdb\xbe\x15\x7f\xcf\xa7\x10\xfc\xdf\xd3\xd0\x7f\xb3\x01\x5d\x1f\xf2\xe6\xd8\x69\x6a\xb4\x49\x8c\xb8\xe8\x80\x15\x7d\x38\xa2\x8e\x65\x36\x14\xa9\x91\x94\x63\x77\xe8\x77\x1f\x64\x59\xb1\x64\x89\xb2\x4c\x5d\xec\x6c\x7d\x28\x50\xc8\x3a\xe4\xef\x5c\x78\x6e\x3c\xca\x7f\x2e\x1c\x67\xf0\x17\x45\x16\x18\xc0\xe0\xca\x19\x2c\xb4\x0e\xaf\x2e\x2f\x7f\x28\xc1\xff\x4c\x9e\xbe\x15\xd2\xbf\xf4\x24\xcc\xf5\x9f\x7f\x7b\x77\x99\x3c\xfb\x63\xf0\x66\x43\x27\x71\x1e\x13\xfd\x71\xe9\xe1\x9c\x72\xaa\xa9\xe0\xea\x72\xc4\x22\xa5\x51\x8e\x04\x9f\x53\x3f\x79\x31\xf3\xf3\xe0\xca\x89\xf7\x74\x9c\x41\xfa\x1e\x13\x91\xf7\x4f\xd0\x64\xf1\xf2\x93\xe3\x0c\x42\x29\x42\x94\x9a\xa2\xca\x3c\x75\x9c\x01\x49\x88\x3e\x0b\xdf\xa7\xdc\xcf\xfd\x66\xcf\xc8\x8e\xbe\x92\xa1\x17\xa0\xe9\xee\x2f\xa4\xbf\xb6\xff\xfb\x95\xae\x36\x00\xcf\xdb\x50\x03\x9b\x66\x39\x99\x03\x53\xf8\xf2\x92\x5e\x87\x18\x6f\x27\xdc\x1f\x48\x74\xb2\xdc\x76\x89\xa2\x74\x8a\x2c\x1b\x85\x84\x1c\x5c\x86\x5f\xd6\xe1\xde\x0f\x8e\x33\xa0\x1a\x83\xfd\x87\x19\x24\x4a\xcb\x1c\x63\x19\x96\x72\xef\x81\x94\xb0\xee\x85\xff\xc4\x8a\x32\x4c\x4b\xfc\x77\x44\x25\x7a\x83\x2b\xe7\xdb\x8e\xe5\x00\x35\x78\xa0\x21\xc5\xf4\xfd\xcd\x21\x21\x3d\x51\xee\xed\x4b\x67\x4f\x0c\x39\xd6\x71\x05\x41\xc8\x36\xab\x7c\xcb\x0b\x2f\x0f\x35\xf3\xdb\xf7\x8b\x12\x29\x0e\x20\xa4\x5f\x51\x2a\x2a\x78\x3b\xdb\xe3\x93\x22\x9a\xbd\xa5\xe2\x72\xf9\x77\x60\xe1\x02\xfe\x71\x18\xc3\x8b\xb8\xfa\x3c\x40\x77\xb8\xd3\x4f\x1e\x0e\x85\xa0\x57\x24\x93\xe1\x5d\x39\x90\x65\x48\x7a\x05\xf2\x75\x3a\x2a\x07\xc2\x85\x87\xb7\x52\x44\x61\xdd\x13\xdc\x10\xa6\x11\xe8\x7d\x0a\xe4\x78\xa7\x90\xb5\x37\xe0\xe0\xa3\x77\x7f\x2e\x5c\xdd\xed\xe1\x69\xc4\xdc\x1c\xa4\x0f\x1a\xa7\x52\xcc\x29\xab\xed\x72\xbb\x62\xed\x43\x0e\x4d\x23\xc6\x60\x09\x94\x81\x4b\x19\xd5\xeb\x7f\x09\xde\x5b\x34\x79\x93\x8d\xf7\x25\xd9\x41\x1b\xf2\xab\x1b\xeb\xcb\x61\x29\x24\x12\xb5\xba\xe1\x44\xae\x43\x5d\xe2\xca\xbb\x41\x37\x2b\x6c\x5b\x8e\x4e\x83\x8e\x0a\xca\xea\x54\x60\xb3\x64\xcb\x52\x38\x3e\xd5\xfd\x60\xb9\xa5\xba\x8f\x9c\xe4\x86\x7b\xa1\xa0\x5c\xab\x3a\xb9\x58\x28\xe9\x12\x34\x0e\x09\x41\x55\x50\x49\xba\x99\x2b\x04\x43\x30\x68\x33\x8c\x5c\x46\xc9\xb1\x0b\x74\xc6\x7d\x1c\x3b\x6b\xf0\xad\x50\x2e\x29\xc1\x47\xc1\x70\xf8\x78\x7f\x20\xd3\x31\x9c\xb1\x97\x15\xa6\x28\x03\xaa\xe2\x94\x49\x5d\x8b\x88\x7b\x20\xd7\x36\x2b\xa6\x8e\x5a\x78\x37\x2b\x24\x51\x2c\x8d\x06\xf8\x0c\xab\xb5\x84\xf5\x99\xea\xc5\xc3\x64\x3c\xb2\x32\x99\xad\xe8\x86\x84\x88\x28\x6f\xa7\xce\x09\x22\xd2\xce\x70\x66\x39\x5c\x67\x54\x66\x4c\x86\x77\x9b\xec\xb4\x86\x61\x73\x08\xd0\x46\xa1\x31\x9d\x0a\x81\x58\x11\x33\x70\x91\x15\xf4\x18\x82\xd6\x28\xf9\xb4\x1c\xe9\xe6\x95\xb7\x7f\x2d\x3c\xab\x0c\xd0\x3b\x21\x9b\xb5\x92\x95\xe3\x3e\x50\xe0\x5c\x68\xc8\x57\xfa\x67\x86\xb6\x4b\x23\xda\x33\xf0\x1a\xe6\x74\x92\x4a\x2c\x35\xf7\x72\x15\x6a\x0d\x64\x31\x15\x8c\x92\xf5\xf0\xf1\xfe\x04\x49\x5f\x16\x41\x6b\x56\x64\xd0\xb2\x96\x11\xb6\x68\xff\x61\x3b\xde\xff\x04\x19\x5c\xc1\x7a\xab\x52\x3a\x0d\xfe\xef\xf3\x9d\x4a\xa8\xc6\x29\x97\x47\xa6\x19\x9d\xf1\xb0\x1f\xe5\xca\xbb\x69\x9b\x18\x97\x51\xb7\x44\x3f\x53\x6c\x1c\xee\xad\xd9\xc6\xc8\xed\x3e\x16\x94\xcb\x5a\x1d\xb5\xdf\xb6\x9c\xda\xc1\xfd\xf0\x4b\x1d\xbb\x8d\x13\xdc\x67\xa8\xef\xc2\x3a\xc3\x5b\xff\xa8\xe1\xb6\x3a\xb3\x31\x05\x12\x2f\x38\xa7\x24\x2e\xd8\x22\xbd\x10\x92\xea\xf5\xb8\x24\x38\x57\x35\x6a\x03\xf4\xe8\x3e\x81\xe3\x0c\x5c\xca\x41\xae\x6f\x38\x11\x5e\xd2\xc5\x1f\xb8\xa0\xf0\xfd\xbb\x5c\xa0\x2c\x8f\x86\xd2\xca\xac\x95\x06\xf2\x74\x7f\xcc\x41\xec\x4e\x79\x91\xcb\xf1\xa8\x72\xb9\xb5\xf3\xd8\xb8\xa6\x31\x37\x46\x51\x3f\x0b\xf9\xd4\x66\xf2\x9c\x54\xfa\xed\xf1\xde\x29\xee\xce\xac\xe5\xeb\x74\x54\xc7\x52\xe8\xa1\xdb\x9b\xf2\x13\x4e\x3d\x69\xd7\x8c\x20\x51\xec\x0d\x92\x6e\xb1\xcd\x02\x85\x33\xe0\x74\x9e\xd2\xa5\xe7\xae\x14\x10\xae\xb4\x84\xd1\x64\xfc\x78\x82\x04\x5f\x2d\x40\x26\xdd\xf7\x59\x53\xb9\x42\xa4\xc5\x90\x31\x11\xfb\xec\xc9\x74\xf9\xde\xaa\x5f\xc2\xa1\xa7\x0e\x65\x26\xfa\x96\x9b\xa7\xb9\xc3\xd8\x3d\xaa\xdd\xae\x15\xde\x29\xe9\x43\xf6\x69\x37\xed\x3b\x9a\xbd\x2b\x92\x7a\xe9\x70\xe7\xc9\x6f\xd8\x4e\x5b\x52\x21\x43\xa2\x85\x3c\x75\xd7\x2f\x2f\xe4\xd9\x16\x55\x33\xb7\x51\xee\x43\xbb\xf7\x57\xff\x5f\x25\x82\x41\x73\xb5\x8e\x49\xd2\xe1\x3c\xea\xac\xfc\x8f\x36\x45\xdb\xd7\xcb\x2d\xad\xd5\x51\x94\x18\x8a\x7e\xe2\xc6\x63\xbc\x53\xa9\x6a\x62\x64\x90\x37\x9a\x0e\x71\x3c\xa4\xbb\x95\x62\x71\x85\xd0\x4a\x4b\x08\x8b\xfe\xbe\x43\x4c\x85\xfb\xf7\x5c\x98\x17\x41\x40\x75\x0a\xfb\x0e\x38\x9d\xa3\x2a\x3a\xb6\x3e\x6f\xf7\x0a\x13\x11\x67\x12\x15\x21\xa0\x1f\x20\xa0\xcc\xaa\x8d\x4a\xb9\xd2\xc0\xc9\x66\x14\xce\x86\xde\x43\x15\xf3\x3d\x82\x10\x08\xd5\x46\x08\x94\x6b\xf4\xd1\x60\x7e\x01\xe5\x33\xfa\xd3\xb8\x7d\x35\x2d\xac\xac\x69\x97\x82\x45\x01\x5a\x93\x9f\xc1\xec\x87\x52\xc5\xa1\x8f\xea\x19\xa5\xd9\xec\xe3\x6b\x0c\x15\xd9\x24\x30\xe9\x7f\x6c\x8b\xf4\x92\x11\xd7\x5a\xf5\xcc\x39\xe7\x2b\xd9\xe3\x59\x32\xf6\x57\xad\xe0\xfc\xe0\x5e\x07\x5e\x10\xb5\xa4\x44\x8d\x04\x8b\x93\x9e\x7c\x43\xd9\xe0\x06\x7d\x09\x3c\x62\x10\x17\xb1\xf5\xbd\x61\x96\xc8\xc2\x2f\x05\x09\xcc\x57\x5b\x80\xa5\x3d\xa8\xf3\x68\xf3\x74\xc0\xdf\x19\x46\xd1\x57\x17\x7c\x53\x7a\x35\xa6\xf1\x6b\x6e\xd4\xdf\x9c\xdd\xce\xdf\x94\x62\xa8\x84\x3b\x95\x38\xa7\xab\x26\x0c\x1f\xd5\xb4\x3f\xaf\x90\xfd\x4a\x02\x4f\x3b\x51\x36\xd7\x13\xee\xa9\x55\xb7\x4b\x75\x6e\x0d\x6d\xba\xd7\x9c\xb3\x82\xf2\xab\x22\xb0\x53\x61\xc4\x9d\x4d\x8a\x17\xf0\x34\x39\x1f\xe8\xaa\x87\x50\xd3\x80\xfe\x44\x63\x5c\xab\xb4\xb9\x86\x59\x7d\x42\x6e\xeb\x91\x13\x6a\x5b\xf7\x94\x50\x6f\x67\x97\x1b\xb1\xff\x29\x50\x9f\x70\x3d\x19\xdb\xa3\x98\x3c\x4c\x67\xb6\xd6\x3d\x15\x9e\x9a\xa2\x8c\x4f\xa2\xd5\x12\xaf\xa6\x16\xd1\x50\x76\x05\x71\x86\x40\x09\x03\xa5\x28\xf9\x2c\xc0\xbb\x06\x16\x87\x50\x19\x1b\xe9\x49\xe2\x9f\xf4\x51\x6f\x1c\xf4\x69\x46\xe7\xca\x6a\xe6\x8e\x03\x91\xa9\xe6\xee\xed\xa3\x2e\x43\x75\x98\x6b\x01\x6a\xcd\x50\x0a\xf2\x84\x3d\x5d\xf4\xbd\x60\xba\xce\x6e\x6d\x48\x46\xf0\x3a\x6d\x51\x8e\x44\x10\x00\xf7\x4e\x60\x38\x62\x89\x52\x52\xaf\x00\xc5\xaa\xfa\x4a\xee\x13\xc7\xf7\x46\x1f\x5b\x45\xfd\x14\xb9\xc8\x50\xdf\x6c\xee\xa7\xf7\x3f\xff\x74\x1a\xb9\xa0\x0e\x67\x40\x2f\xf6\xde\x6e\xb1\x88\xbc\x2e\xb7\xde\x03\x9f\xff\x0e\xbd\x80\xf2\x91\xe0\xb1\x17\x47\x63\x31\x7c\x20\xc1\xd5\x9a\xf2\x16\x33\xfa\xd7\x29\xff\x9a\x5f\xbc\x9c\x7e\x6e\x7a\x57\x82\x6e\xee\x1e\x2c\x2f\x90\xd3\x55\x1a\xdc\x41\x67\x97\xb0\x4d\x17\xb3\x6b\xb4\xf8\x4d\xcd\xd0\xf3\x04\xdf\x28\xa9\x68\xb7\x3d\xc4\xa7\xfc\xf6\x7d\x99\xaf\x89\x69\x73\xd7\x2d\x00\x1f\xaf\x23\xca\x3c\x4b\xd7\x01\x91\x16\x33\x02\xcc\x92\x1c\x57\xb1\x83\x01\x56\x11\x42\x2a\xe9\x09\x4a\x9d\xdc\x68\x59\xc2\x0f\xc3\x3b\x2c\xa6\x52\xf5\xb0\xbb\x76\xdf\xf9\xcd\x95\xb1\x6b\x54\xbd\xdf\xdc\x6e\x3f\x60\xee\x84\xfb\xd2\xf6\xb3\xc4\xd5\xa3\x79\x2e\xb8\x5a\x37\xc6\x4f\x7a\xfb\xbc\xef\x3c\xd0\xe2\x3b\xd8\xb7\xcd\x76\x37\x55\xfd\x06\x6e\x9e\xac\xf7\x08\x11\x97\xaf\x92\x9a\xc7\x2d\x78\x14\xb8\xa6\xba\x55\xf0\x31\xc6\x19\xe1\x35\x28\x6c\xd4\x5d\x4a\x17\x9a\xa2\x24\xc8\x35\xf8\x38\x74\xc5\x12\x1b\xaf\xab\x42\xa1\x53\x6d\x4e\x85\x28\xd6\xd8\xb5\x57\xd9\x0e\x14\x52\xc1\x67\x5a\x82\x46\xff\x94\x13\xf0\xb9\x96\x5f\xed\x3c\x64\x32\x3e\x81\x79\xc5\x01\x76\xb6\x99\xed\xb4\xf2\x0c\x31\xf9\x67\x41\x80\x9d\x85\x63\x88\x0b\xdb\x3a\xe2\x66\x4c\x3c\x5b\xb1\x9b\x0c\x54\x7e\xc2\xf5\x14\xb4\xd1\x17\x56\x4e\x0c\xa6\x0b\x34\x22\xb6\x4d\xd0\x94\x88\x24\xc9\x0f\xf0\x4e\x7a\xab\x5c\xdb\xd7\xfb\x43\x71\x64\xc9\xa8\xf3\x4d\x0b\xcf\x46\x66\x8d\xe6\xdd\xe2\xe3\xf1\x11\x59\xa1\xab\x52\xcb\xd8\x24\x82\xf7\xc0\xcd\x37\x79\x7d\x1c\xad\x92\x81\x5b\xe3\x9f\x0f\xd8\x18\x97\x8d\x94\x24\x2e\xa9\xed\xa7\x60\x22\xd2\x61\xa4\x8f\x3a\x8e\xed\x4b\xe9\x31\x3f\xbf\x67\x14\x51\x24\xad\x4c\xd0\x95\xc0\xcd\xa9\x57\xa5\xc7\x00\xbd\x38\x41\x50\x99\xb3\x68\x65\xeb\x21\x23\x65\x2e\x00\xaa\xe8\x30\x00\x6a\x25\xdd\xed\xcd\xe2\x6c\xf6\xf1\x58\xbf\xde\xbe\x21\x15\xff\x5a\xcc\xc1\xac\xf6\x09\xd7\x71\xc9\xbf\x7d\x50\xe3\x8f\xa8\x25\xef\x9f\x80\xc7\x8b\xf8\xdf\xaf\x8b\xff\x06\x00\x00\xff\xff\x24\xd8\x21\x5a\xc0\x50\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x57, 0xda, 0xf7, 0x2d, 0x1a, 0x24, 0xd2, 0x10, 0x80, 0x6e, 0x61, 0xb5, 0x26, 0xdd, 0xe7, 0x75, 0xc7, 0x18, 0x93, 0xc8, 0xef, 0x87, 0x76, 0xc7, 0x24, 0x42, 0x99, 0x75, 0xe7, 0x4d, 0x75}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
