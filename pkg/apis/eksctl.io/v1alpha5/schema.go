// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (36.583kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5d\xff\x6f\xdb\xb8\x92\xff\xbd\x7f\x05\xe1\x3e\xdc\x7b\x05\xec\xf8\xdd\x01\xf7\x05\xbd\xbd\x00\x6e\xd2\xed\xfa\xda\x24\x46\xbc\xb7\x0f\xb7\xc9\x02\xa5\xa5\xb1\xcd\x8d\x44\x6a\x49\x2a\x89\xbb\xed\xff\xfe\x40\xea\x8b\xf5\x85\x94\x28\x59\xce\x26\xfb\x53\x1b\x4b\x1c\x0e\x67\x3e\x1c\x0e\x67\xc8\xd1\xef\xaf\x10\x1a\xfd\x85\xc3\x7a\xf4\x16\x8d\x5e\x4f\x7d\x58\x13\x4a\x24\x61\x54\x4c\xcf\x82\x58\x48\xe0\x67\x8c\xae\xc9\x66\x34\x56\x2f\xca\x5d\x04\xea\x45\xb6\xfa\x15\x3c\x99\xfc\xf6\x17\xe1\x6d\x21\xc4\xea\xe7\xad\x94\xd1\xdb\xe9\xf4\x57\xc1\xe8\x24\xf9\x75\xc2\xf8\x66\xea\x73\xbc\x96\x93\xbf\xff\xe7\x34\xf9\xed\x75\xd2\xae\xd0\xd5\xe8\x2d\x52\x7c\x20\x34\xca\xfa\x0c\x58\xec\xff\x03\x4b\x6f\x9b\x3f\x42\x68\x14\x71\x16\x01\x97\x04\x44\xe1\x57\x84\x46\x5e\xd2\xe8\x13\xdb\x6c\x08\xdd\x94\x9e\xb5\x0e\x2e\xef\x28\x6b\x9d\x37\xfd\x96\xfe\xef\xdb\x78\xdf\x3f\xac\x81\x73\xf0\xaf\xb8\x0f\x7c\xf4\x16\xdd\x58\x79\x48\x1f\xfc\x92\xb7\xc5\xbe\xaf\x7b\xc6\xc1\xa2\x38\x8a\x35\x0e\x04\xe4\x2f\xf9\x20\x3c\x4e\x22\xf5\x9e\xe2\xd8\x63\x54\x62\x42\x05\xf2\xb4\x0a\x50\x84\x39\x0e\x41\x02\x17\x88\x43\x80\x25\xf8\x48\x32\x54\x90\x55\x4e\xe8\x71\x42\xa8\x84\x20\x20\xbf\x4e\xb6\x32\x0c\x26\x87\x12\x7e\x55\x10\x44\x5d\x47\x75\xc1\x5b\x55\x05\x14\xaf\x02\xf8\x71\x17\x55\x1e\x20\x34\x22\x12\xc2\xea\x8f\x05\xc8\x09\xc9\x55\x1f\xe3\xf2\x53\x1f\xd6\x38\x0e\xa4\x7a\x61\x54\x78\xf2\xad\xf8\x5a\x4e\x02\x73\x8e\x77\x7d\x15\x5c\xe4\x7c\x48\xed\x02\x6f\xd6\x42\x0a\x2c\x14\xa4\x42\xee\xa8\xe3\xae\xe4\x8d\x9a\x4e\x2c\x40\x41\xbd\x1c\x7e\x8b\x09\x07\xbf\x2c\xa2\x10\x24\xf6\xb1\xc4\x75\xf9\xd8\xe0\x80\x23\xf2\x13\x70\x91\xb0\xfc\xbb\x49\x67\x06\xb5\x97\x94\x5e\x7a\x00\x8f\x38\x8c\x02\xdd\xc9\x4d\x19\x27\x70\x27\x3c\x19\x9c\x10\x36\xbd\xff\x57\x1c\x44\x5b\xfc\xef\x45\xb8\xfc\xf2\xca\x00\x9c\x11\xbe\xc7\x24\xc0\x2b\x12\x10\xb9\xfb\x99\xd1\xe7\x80\xd8\x71\xd1\xe0\x18\x4c\x24\xea\x60\xf0\xcc\x64\xd7\x98\x6f\xb0\x84\x05\x67\x6b\x12\x38\x0f\xd9\xdc\xe5\xf7\x25\x5a\x07\x8d\x76\x43\xa4\xdb\x30\x3f\x10\x69\xa6\x40\x70\xd8\x49\x50\xf3\xd9\x85\x99\xd0\x1d\xa1\xfe\x91\xd1\x5a\x9e\x77\xad\x40\x0d\x31\xc5\x1b\xf0\x2f\x99\x0f\x1f\x38\x8b\xa3\xc3\xb4\x76\x51\xa1\xe6\xaa\xb7\xca\xa0\x4b\xc6\x68\x09\x80\x6e\x14\xc5\x8d\xe6\x0f\xc5\x02\x6f\xe0\x97\xbf\x4d\xf5\xbf\x53\xcd\x3f\xa1\x9b\x09\xcd\xdf\x78\x83\x30\xf5\xd1\x4d\x3a\x32\xb4\x7f\x90\x37\x82\x3b\x31\x49\x1f\xeb\x76\x62\xfa\xa6\xcc\x42\x8b\x7d\x54\x2c\x7d\x87\xd1\x96\xc3\xfa\x7f\x6e\x47\x76\x4e\x6e\x47\xa7\x55\xc6\xbf\x9b\xe2\x53\xcd\x5f\xad\x7d\x9d\xa9\xdb\xd1\x69\x7d\x10\x8a\x80\x19\x5c\xb9\x09\xed\x02\xd5\x0b\xd8\xdb\xdc\x32\x39\x3a\x0c\x24\x06\xc5\xc2\xf7\x8c\x23\x42\xd7\x8c\x87\x58\xfd\xa4\x05\x99\x4d\x05\x24\x14\x50\x0c\xda\x36\x41\xa4\x93\xba\x5b\x7b\x75\xc4\x82\x8b\x12\x05\x78\x1c\xa4\x78\x4f\x3d\xbe\xcb\x18\x70\xd0\xe6\xb2\xd6\xcc\x4c\x5d\x62\x19\xd7\xf4\xd9\x08\x90\x65\xd2\xc4\x48\xee\x3e\xf2\x3a\xd1\xfa\x69\x71\xd6\xd7\x85\xd2\x96\x73\x6c\x5c\xfd\x4d\x53\xa0\x62\xbc\x2b\x3c\x9b\x51\xde\x68\x15\x1b\x96\xb9\xc6\x65\xdf\xbc\xea\x36\x2a\xbc\xae\xaf\xca\x62\x36\x88\x0b\x89\x91\x20\x0a\xc1\xa9\x8b\x37\x56\x0e\xdd\x0a\x10\x87\x28\xc0\x1e\xf8\xe8\x81\xc8\x2d\x4a\xf5\x86\x66\x8b\xb9\xb3\xf3\xd8\x99\xb0\xc9\x6d\x7c\x4f\xfd\x88\x11\x2a\x85\xcb\xc6\x20\xe2\xe4\x1e\x4b\x98\x79\x1e\x88\x1a\xb8\x33\xe3\xb2\x62\x2c\x00\x6c\x99\x17\x51\xbc\x0a\x88\xd7\x95\x40\x27\x00\x97\x99\xb4\xf5\x3d\x88\x6a\xb7\x2c\xf0\x45\xee\x9d\xe3\x88\x20\x01\xfc\x1e\x38\x82\x54\xaa\x08\xeb\xde\x8a\x46\xcd\x59\xbd\xbd\x88\x9b\x54\xac\x9c\x24\x07\xe5\x66\xb3\x8d\xf9\xef\x1f\xc1\x8b\x15\xb9\x6b\x16\xc0\xec\xfa\xb2\xc5\x91\x6a\x74\x51\x2b\xd4\x16\xc0\x43\x22\x94\x35\x11\xef\x58\x4c\x7d\xcc\x77\x7d\xa8\x2b\x49\x10\x4f\xe9\x98\xc5\x65\xec\xa2\xce\xeb\xe6\x5e\x4a\xcb\x12\xd5\x83\x5c\xe1\x94\xc1\x03\x04\x58\xa0\x30\x90\xd0\x94\x3d\xb8\x9a\x9f\x9f\x1d\x69\xde\x55\x86\xec\x3e\x94\x76\xd4\x54\xe8\x75\xc0\x96\x69\xf8\x0d\x38\x1a\xd0\x2a\xe0\x20\x40\xf3\xd9\x05\xc2\x52\x72\xb2\x8a\x25\x08\xc4\xd6\x08\x67\x13\xba\xa3\x19\x68\xa3\x66\x99\xf7\x15\x44\x3b\x58\x01\x4c\x29\x93\xb8\x1c\xf0\x6b\x96\xc5\xf1\x36\xd6\x85\x00\xa6\x89\xc0\xef\xdf\xcc\x38\xc7\x52\x62\x6f\xbb\x60\x01\xf1\x6a\xf3\xc4\x6c\x02\xe6\x34\x20\x14\xce\x99\x17\x87\x40\x6b\x1d\x9a\xd4\x81\x22\x4d\x1e\xf9\x69\x1b\xb5\xf6\x26\xfd\xaa\xff\xc9\x2d\x11\x28\xc5\x96\xb2\xd2\x5a\xf8\x5d\x1c\xe1\xfe\xbd\xb4\x4a\x64\x76\x7d\xf9\xbc\x62\x24\x01\x5e\x41\xf0\x62\xc1\x46\x71\x08\x7d\x03\x0d\x56\x82\x22\xc2\xde\xb0\x54\xa3\xce\x4b\x48\x37\xfa\x3d\xf6\x3b\x35\xf3\xd4\xb4\x01\x92\x78\xf3\xb2\x20\xd2\x69\xe9\xd4\x20\x32\x62\xa0\x3e\x4f\xc6\x66\x5b\xdd\x34\xdb\x6d\xb6\xb1\x05\x1f\x8d\xdb\x23\xad\x90\x21\x97\x4b\x8a\x08\x0e\x53\x6b\x96\x1a\x33\x94\xed\x32\x75\x20\x20\xd9\xe5\xc4\xbc\x8f\x17\xdd\x95\xba\xd3\x72\xba\xac\x62\xde\xba\xa8\xf2\x8e\x6e\x60\x27\xf0\x64\xc4\x07\x54\x46\xa2\x6e\xe5\x61\xd4\xa4\xd6\x51\xf0\x4d\x94\x4c\x42\xd6\x51\xb2\xd6\x1c\x46\x75\xbe\x70\xd8\x14\x22\x31\xed\x19\x8d\xc1\x8d\x76\xca\xc0\x90\x24\x5f\x9c\xc5\x2b\x86\x7e\x0e\x4b\x17\x0d\x64\x45\x53\xa5\x18\xf8\x3a\x8a\x1d\xcb\xf3\xb5\x1b\xa0\xc0\x71\x90\x6f\xdd\xfb\x6c\xfe\x9d\x88\x99\x26\xd0\xe5\xec\x47\x17\x8b\xa4\xf6\x4f\x0f\xd8\x7d\x1b\xd9\x49\x11\x19\xf1\x01\x2d\xd2\xe5\xec\x47\x94\x92\x2d\x9b\x6a\xc4\xa2\xf2\x02\xe8\x66\x97\xda\xe9\x99\x84\xeb\x6e\xf1\x31\x1f\xd6\x1a\x78\xaa\x93\x35\xf1\xb0\x84\x59\x2c\xb7\x8c\x13\xb9\x3b\x37\xa4\x20\xdc\x3c\xf9\x43\xdc\xf5\x2c\xfa\x34\xb4\xfb\xe8\xdd\x5d\x0e\x62\x95\x3b\x21\x35\x1f\x8c\x8b\xa8\xc7\x65\xf5\x1a\xd9\x1f\x0c\xf2\x88\x03\xf6\x27\x8c\x06\xbb\x41\x22\x08\x0e\xe4\x8c\x80\x8f\x57\x14\x3a\xc5\x86\xfb\x2d\x59\x96\x8c\x16\xc8\x07\xc6\xef\x8e\xb6\x4c\x25\x01\xe1\x67\xcf\x71\x27\x44\x67\x6a\xa8\x0f\x73\x40\x6b\x9c\x76\xa2\x1d\xe7\x84\x3a\x12\x29\x52\xba\x99\xe1\x06\x42\x26\x38\xfe\xb4\x38\x73\x32\xbe\xb1\x64\xb3\x20\x60\x6a\x0a\xcf\x17\xf7\xff\xd1\x2b\x53\xe1\x11\x9f\xbb\xed\x67\x37\x44\x6e\xe3\xd5\x89\xc7\xc2\xaf\x0f\x80\xef\x41\x21\x40\x7c\x4d\x0e\xb3\x7c\x8d\xee\x36\x5f\x63\x49\x02\xf1\x95\x44\x14\xe4\xc9\x7c\x71\x09\x96\x28\x8d\x67\xcf\xc8\x34\xf4\x5e\xcb\xe3\x98\xad\xf6\xa3\xe4\xf8\x6c\x7e\x7e\x7d\x58\xac\xfc\x90\xa1\xf6\x4f\x46\xaf\x19\x47\x7b\xb0\x22\x35\x0c\x84\x85\x60\x1e\x49\x36\xbf\x63\x04\x27\x9b\x13\x24\x19\x8a\x05\x24\x69\x2f\x01\x11\xe6\x0a\x59\xfa\x65\x45\x20\x83\x5a\x8a\x2f\xa4\x68\xd2\x1d\xc2\xfe\x64\xcb\xea\xf0\x75\x81\xf0\x13\xb2\x65\xd4\x29\xe9\x7d\xc2\xc5\x48\x8e\x62\xc7\xd3\x3b\x05\x4f\xb3\xc1\xac\x26\x79\xb6\x2e\x90\x7b\x9a\x70\xa3\x00\x2f\x56\x4b\x7a\x72\x54\x62\x50\x27\x66\x8b\x79\x92\xca\x5e\xf6\xef\xa3\x86\xb0\x88\xc3\x44\x4b\x1f\x7c\x94\xf4\xa0\xcf\xa8\xa0\xe5\x87\xce\x60\x75\x25\xd5\x3e\xd2\x9a\x5b\xd0\x0e\x97\xa5\x69\x86\x55\x98\xcc\x26\x01\xe6\x80\x80\xc8\x2d\xf0\x6c\x55\x28\xcc\x14\x35\x92\xfa\x84\xda\x1f\xf9\x18\x23\xb9\x05\x01\x9a\xc8\x1d\xec\xc0\x47\xab\x1d\x9a\xfd\xac\xdb\x79\x8c\xde\x03\x25\x40\x4b\xa1\xb5\x76\xe9\x3d\x29\x63\x3d\x57\x7e\x52\x3a\xb6\xa1\x97\x2f\x2b\xec\x0d\xba\x34\x2f\x16\x0e\xf0\x1e\x37\x2c\xbc\x15\xf3\xd2\xb4\xd8\x35\x1a\x90\x01\x7d\x97\x4d\xc0\x56\x38\x48\x2d\xab\x76\x3c\x70\x10\x20\x6f\x4b\x82\xcc\x05\x99\x96\x6d\x72\x47\x97\xa6\x3b\xfd\x92\xa7\x53\x39\x8e\xe9\x16\x0a\xab\x89\x67\xb8\xc0\x57\x69\x84\x6c\xad\x20\x8c\x52\x1e\x51\x94\x30\x79\xd2\x69\x2a\x39\xd1\x68\xcf\x67\x74\x3e\xa5\xd0\x34\xae\xf9\xec\x02\x71\x16\xc0\x5f\x05\x9a\x5d\x5f\x66\x2b\xb6\x64\x88\xc7\x14\x45\xcc\x17\x88\x51\xc9\x32\x9e\xbb\x8d\xf7\x20\xda\xed\x96\x18\x02\xf0\x24\xe3\x43\x9e\x01\x5e\xa6\x34\x87\x70\xdd\x92\xe5\x46\x6b\x9c\xc7\x01\x08\x35\xf0\x84\x67\xa4\x7c\xc7\x80\x61\x7d\xc0\x5d\x78\x5b\xf0\xe3\x00\x0e\x90\xf3\x61\x3d\x75\x59\xe6\x9e\xca\x7d\x69\x92\xeb\xc3\x96\x78\xdb\x7c\x12\x89\x2d\x8b\x03\x3f\x03\x96\xcf\x10\x4d\xf6\xa1\x48\x9f\x04\xd3\x99\xe3\x74\xda\x25\x12\x01\x3f\x97\xc9\x09\x9a\xaf\x11\x65\x54\xcf\xc4\x7b\xe2\x83\x3f\xd6\x06\x2b\x5b\xf1\xd4\xe2\xa4\x1a\x66\xf1\xc7\x07\x12\x04\x68\x05\xaa\x2f\xbf\x9b\x82\x9e\x09\xcb\x46\x4d\xbf\xb8\x60\x7b\x27\xcf\xa0\x1a\x18\x37\x19\x4f\xa3\x4d\x69\x76\x13\x86\x0b\x9d\x27\x73\x57\xa4\xea\x96\x92\xd0\x8d\xd0\xea\x2a\xcd\xd8\x7c\x1a\x9b\x8d\x84\x9b\x81\xe8\xd9\x49\xc3\x1a\x9d\x9b\x4b\xa7\xb5\x3a\x49\xeb\x3a\x2f\xd8\xcf\xfa\x70\x44\x49\xbc\x1f\xe3\x15\x70\x0a\x12\x04\xd2\x4c\xa3\x1c\x46\x85\x35\xaf\x62\x90\xbb\x19\x90\x01\x7a\x70\x3c\xd0\xd1\xe3\xfc\x85\x8d\xd3\x9c\x1c\x5a\x73\x16\xa2\xc4\x08\x0e\x28\x89\x7e\xf4\x07\xca\xb6\xd9\xce\x28\x0c\x6a\x14\x0e\xf0\x1b\x5c\x4d\x42\x5f\x87\x21\x33\x08\x1f\x88\xd3\xd9\xba\x15\x63\x52\x48\x8e\xa3\xba\x77\x8f\xec\xce\x59\xed\x66\x56\x11\xad\xaa\x23\x5c\x36\x3e\x0d\xa4\xae\xb2\xb7\x8d\xb4\x38\x44\xcc\x8d\xce\xb5\x7a\xb3\x27\x6e\x74\x2f\xa6\x11\x8c\x1b\x04\x35\x08\xa0\xd2\xdb\x41\x7a\x3b\x66\x4a\xf9\x15\x6f\x5c\xea\x8b\xa4\x84\x6e\xd0\x07\x22\xaf\x22\xe5\xa3\xef\x33\x25\x7a\x53\x17\x10\x7a\xa7\x9e\x93\xe4\x50\x9e\x7a\x0f\xa9\xa1\x09\x22\x19\xdf\xb9\x43\xf0\x49\x99\x2a\x81\xb6\x72\xe8\xb1\x80\x5f\xdb\xf2\xb2\x57\xb0\x65\x5d\xb0\x1d\xed\xd9\x21\xcc\x57\x44\x72\xcc\x77\xe8\x7f\x97\x57\x97\xd3\xff\x9f\x5d\x7c\xca\x4f\x35\x8a\x31\x12\xb1\xb7\x45\x58\x20\x1d\x79\x30\xdc\x85\x65\x5c\x9f\x7e\xd5\xc7\x21\x09\x74\xcd\x32\x1c\x93\x01\xc3\x8a\x92\x09\xb8\x76\x47\x6f\xe0\xcd\x3c\x0e\xc9\xf7\x38\x24\xc1\xb0\x27\xf9\x9e\xf7\x85\x5a\x1f\x84\x12\xdb\x19\x8e\xb0\x47\xa4\x75\xe4\x0a\x14\x1b\xb0\xd8\x39\xe7\x4b\xa6\xb9\xe6\xac\xd7\x4c\x09\x15\x12\x53\x4f\xdf\x38\x1f\x54\x0b\xcf\xda\xef\x6b\xf5\xa1\x42\xfc\xb8\x24\x5f\xac\x12\x69\xd4\x4e\x48\x68\xef\xb6\x83\x9f\xeb\x4a\x23\x75\x69\x5a\xd7\x50\xb7\xa2\x9a\x4a\xb4\x91\xd7\x0b\x93\x25\xca\x20\x1c\x2f\x87\xe7\x70\x5c\x2e\x7f\xf8\x93\x6c\x63\x0b\xbc\xdf\xb3\x20\x0e\xc1\x45\xf5\x4d\x9e\xf7\x86\x6c\xf0\x6a\x27\xa1\x5b\x26\xcf\xd2\xaa\xc0\xf5\x7f\xfd\x7d\xa8\xcd\xf7\xde\x6a\xdb\xec\x48\x83\xb9\x33\xcc\x13\xc3\xb4\x33\x4b\xb5\xd1\xc6\x57\xf0\x58\xb7\x44\x8d\x93\xa2\x0a\xc1\x8a\xb1\x1d\x74\x3b\x80\x29\x7a\xff\x71\x39\xa9\xdd\xd7\x46\x3f\x5e\x9d\x5f\xa1\x9f\x70\x40\xfc\x3c\x19\x43\x43\x1c\x45\xe0\xa3\x35\x81\xc4\x0f\xf0\x91\xdc\x72\xf6\xa0\x88\x00\xe7\xcc\xfd\x0c\xcd\x71\x7a\x2f\xbb\x0b\x20\x39\xf1\xc4\x19\x0b\xd4\x1e\xa4\x7c\x7c\xd2\xe2\x2f\x6c\x38\xa6\x71\x80\xb9\x82\x86\xb3\xdb\x50\x6c\x34\xa4\xad\x0c\x13\xfe\xff\x78\x77\xa1\xd3\xf4\x2c\x4a\xc3\x30\x98\x41\xa0\xab\x83\x4c\xab\x5d\x12\x79\xf2\xb0\x76\xe1\xb3\x3b\xbb\xfa\x2e\xbd\xbe\xb0\xbc\xbf\xf6\xee\x33\x4f\xfc\xf2\xb7\xad\x94\x91\x78\x3b\x9d\xaa\xbf\x4e\xf0\x83\x38\xc1\x21\xfe\xc2\xe8\x89\xc7\xc2\xe9\xec\x1f\x4b\x5d\x23\xe4\xfb\xac\xcd\x54\x6d\x12\x84\x9c\xfe\x9f\x00\xfe\x21\x26\x3e\x4c\xf1\x83\x98\xec\x21\x30\xc1\x62\x92\x8e\xc9\xcb\x01\x76\xa2\x90\xfe\xc6\x79\x0e\xb4\x0d\x63\x7f\x39\xff\x89\x58\xbf\x1d\x9d\x1a\x24\xb7\xbf\xf2\x9f\xcd\xac\xec\x54\x96\xc3\x16\xfd\xe9\x4f\xfd\x0c\x71\x8a\xa3\x13\xe2\x0d\x79\xe2\x41\x50\x9e\xec\xb5\xe6\xe7\xda\xd0\x9d\xcd\xcf\xaf\x3b\xee\xd2\x8a\x2d\xcb\xea\x3b\xe2\x06\xea\x80\x20\xdf\x32\x02\x8f\xac\x77\xe8\xc6\x8b\x85\x64\x21\x9a\x5d\xcc\xf7\xa5\x30\x92\xdf\x26\x38\x24\x13\x11\x47\x11\xe3\x72\xfa\x66\x8c\x6e\x75\x86\x7c\x22\x44\x78\x3b\xca\xfe\x52\xff\x63\x1c\xdd\xea\x3b\x36\xc4\xbb\x1d\x75\xf2\x5c\x32\x26\x6a\x85\x31\x0c\x0c\xa8\xe9\xb2\x67\x55\x4d\x93\x31\xfa\x97\xdf\x62\x26\xff\x3b\xe3\x2a\xf9\xab\xf8\x6b\xf6\x0b\xe3\xe9\x8f\x09\x97\xc9\xff\xbb\xee\x2c\x8f\xb3\x5f\x15\x9b\xa6\x95\x13\x35\xac\x41\x96\xd2\x3a\x35\x6a\x9d\x57\xa0\xe7\xb8\x9d\x6e\x82\xf2\x27\x12\x12\x99\x94\x74\x49\xc2\xa0\x1a\x55\xc4\x43\xb3\x9f\xf7\x90\x56\x70\x48\xcd\xfe\xf4\xf5\x17\x46\x61\x82\x1f\x30\x87\x49\x02\x9e\xe4\x41\xb7\x72\x2f\x49\xb7\x35\xe8\xba\x74\x94\x16\x79\xa9\x71\x6b\xaf\xf7\xb2\x62\x52\x06\xc0\x99\x77\x07\x8e\xe7\xdc\x72\xbb\xf3\xae\xd8\xd4\x48\xdc\x0b\xb0\x10\xc4\xfb\xc4\xb0\xff\x0e\x07\xca\x93\xe7\x97\x38\x7c\x9e\xca\x9e\xa5\x47\x14\x01\xe9\x10\xf7\x2a\xe5\x57\x24\xe7\x96\x94\x90\xf3\xd5\x7d\x53\x39\xe0\xd3\xae\xd2\xce\xc4\x2d\xe2\xd4\x31\xcd\xf3\xcb\xe5\x01\xf6\xf9\xe6\x2c\x31\x76\xd8\xf7\x39\x88\x3d\x8e\xef\x23\x6f\x42\xf3\xbd\xcb\xf4\x75\x6a\x29\xd3\x3e\x27\x3e\x15\x93\xb4\xc9\x9b\x24\x3d\xa8\x9c\xf9\xf3\xcb\x25\x0a\x18\xbb\x2b\x57\xa8\x69\x97\x47\x0d\xdc\xee\xbd\xdf\x8e\x4e\xcb\x23\xd0\x15\xad\xda\x39\x6a\xb5\x98\x43\xc4\xd0\x60\x25\xae\x22\x49\x42\xf2\x05\xac\xfe\x8b\x25\x26\x52\x92\x4f\x52\xb0\x51\xa0\x9b\xf7\xef\x96\x3a\xe4\x1d\x92\x2f\xda\x95\x6b\xf5\x7f\xdf\x9f\xfd\x5b\xdd\x73\x84\x95\x98\xb0\x8c\xaf\x8a\x7b\xeb\xa2\xae\x8c\x1d\x67\x57\xd6\x91\x8b\xdb\xd1\x69\x75\x80\x76\x4b\x75\x84\xf8\xe4\x30\x57\x6b\x0c\x84\x17\x1c\xd6\xe4\xf1\x28\xa4\x07\x8f\xa9\x66\x84\xc5\x39\x11\xc9\x15\x18\xe7\xaa\x5f\x7b\x49\x1b\x69\x18\xbb\xbb\x8b\x57\x10\x80\x7c\xaf\x0f\x53\x56\x8b\x73\x36\xf4\xd5\xa1\x18\x45\x6a\xe2\xc8\x17\x40\x9f\xd3\xee\x3e\xa7\x5b\xb2\x8a\x27\x4a\xbe\x10\xba\x99\xc8\x2d\x4c\xd2\xf7\x3a\x16\xe2\xb3\xf8\x97\x75\xb2\xb9\xd5\x52\x4c\x7d\xe7\x31\x1f\x4e\xd3\x47\xdf\x4d\xf5\x5f\x29\x7f\x76\xf8\xbf\xf8\xd0\xf7\x82\xf9\x62\x01\x5c\x61\xa6\x5f\x04\xfc\xcf\x12\x3d\x67\xf7\xc0\x39\xf1\xe1\x5d\x96\xce\x3d\x63\x61\x88\xbb\x16\xe6\x2c\xe1\xf0\x2a\x25\x89\x3e\x27\x3b\xed\xcf\x7f\x15\x28\xcf\x16\x47\xca\xad\x48\x5e\xef\x04\xee\x9c\x68\x82\xd7\x84\x72\x0a\x57\x1b\x7d\xe3\x80\x23\x5e\x1b\xeb\xb3\x74\x01\x41\x9f\xfe\x02\x1f\xad\x60\xcd\x38\x54\x46\x98\xdb\xc9\xa4\xc8\x0c\xd4\x2e\x1c\xba\xc8\xb4\x67\x17\x16\xb1\x1e\x96\x85\x29\x31\xf6\x5e\x2f\xf1\xe8\x26\x3b\x84\xbd\x77\xc6\xac\x1e\x62\x2c\x60\x92\xbe\x3e\x49\xcf\xc1\x4d\xd6\x8c\x4f\xb4\xc9\xc6\xc1\xbe\xf6\xe4\x1b\xed\x99\xe5\x7f\x76\x12\x58\xca\x57\xab\xc3\xe8\xcc\xcc\xed\xe8\xb4\x3e\x46\xed\x43\x36\x30\xe9\x98\xb2\x2a\x5e\x00\x70\xbc\x06\xb2\xcf\x5e\x7d\xb0\xdc\x67\xea\x97\x08\x6b\xd2\x75\x76\xa2\x02\x04\x12\x62\x9b\xd5\xcb\x4b\xce\x87\x12\xd1\x53\x51\xce\x44\x8d\x83\x7c\xc9\x29\x3a\x89\x4d\xd7\x12\x5f\x0e\xf7\x7c\x03\x52\xe3\xe6\x8f\xac\x81\xe5\xb6\x35\x4f\x98\x4d\xf6\xc8\x03\x6f\xcc\x9d\x48\x1b\x25\x98\x24\x13\xd3\x02\xaa\xed\xfb\xbe\x06\x1a\xf3\xab\x85\x75\x6b\xdf\xe8\xa3\x24\xcd\x3f\x86\xe2\x23\xec\xe6\xe7\xce\xe5\x2b\x6a\x14\x1c\x36\x44\x0d\xad\x5f\x44\x96\xba\xc6\xb5\xc3\x86\x6a\xdf\xfa\x55\x85\x4a\xd7\x1c\x77\xef\x94\xb7\x79\x97\x66\xdf\x7a\xda\x76\xbb\xae\xe9\xee\x6a\xc2\xba\x31\xbb\x5d\x59\xf8\x1a\x82\x2a\x06\x9f\xdc\xe0\xe2\xb7\xc5\xb1\x6d\x11\x17\x33\x22\xcd\x1a\x37\x63\xbf\x61\x5a\xdb\xa7\x9b\x79\x1e\xdb\x77\x3f\xf5\x5d\x5d\x7d\x35\x71\x89\xa2\x36\x58\xf1\x8a\xff\x50\x09\xa3\xd8\xe2\xbf\x6d\x3e\xbb\xcb\x26\xc6\x1c\xaf\x6c\x0e\x00\xa4\x0f\x07\xa9\x3a\x5c\x3a\x2d\x5a\x28\xea\x21\xb7\x58\xea\x3b\xa6\x79\x5c\x5c\x9f\x05\xad\x3b\x3b\x8e\x05\x88\x7b\xf7\xa3\xbb\xa9\x25\xf1\xde\x99\xe3\xf0\x2d\x1f\xa3\x99\xf9\x21\xa1\x67\xd9\xd7\x52\x7a\xad\x3c\xd9\x9d\x8f\xc1\xa3\x30\x79\xad\x26\x4c\x77\xe8\xa6\x88\xb3\xfc\x9e\xc9\x3e\x9a\xb9\x4f\x1b\x4f\x8b\x6f\x4e\x98\x28\xfd\x3d\x7d\x5d\xe8\x64\xc2\xd6\x93\x8c\x52\xb7\xb0\x4d\x89\xb5\x7a\x50\xf3\x50\x66\x6e\x47\xa7\xc6\xe1\x56\x82\x3b\x9d\xd6\x12\xa3\xbe\x4d\x6a\x1c\x70\x2e\xe9\x1d\x68\x09\xe7\xca\x9d\x2f\x22\x15\xad\xb0\x00\x1f\xed\xeb\xd4\xbb\x9f\xf0\x3e\xa0\x0b\xf3\x0c\x72\xac\xe7\xfd\xac\x8b\xbe\xee\x17\x71\x7d\xc0\xbf\xf3\xf5\x5d\xc7\x50\x6f\xaf\xab\xc1\x1d\x68\x1f\x2d\xae\xde\xaf\xec\x77\xb7\xbe\x94\xef\x3f\xf3\x7d\x46\x17\xd9\xa9\xf6\xce\x59\x87\x72\xf3\x9e\x33\xbe\xa9\x5e\xa9\x01\x27\x0d\x6a\x6e\xd2\x52\x07\x21\x37\xca\x68\x40\xb3\x63\x2b\xea\xbd\x3f\xf0\xd2\xcd\xc6\xb4\xd3\xb3\x1a\x14\x1b\x0e\xec\xd6\x25\x58\xcd\xe9\x86\xf7\xfd\x0e\x04\x8e\xa2\x0b\xa8\xc7\x7b\xba\xb4\x5d\x70\xb8\x27\xf0\xd0\x8f\x44\x2c\xd9\xd2\xc3\x41\x4f\x57\xc2\x03\x2e\x93\xdb\x1d\x3d\xdb\x5b\x3f\x0b\xe6\xd4\x1c\x56\xfd\x84\x0e\xeb\x9e\xed\x1e\x25\x70\x8a\x83\x86\x7c\x7c\x63\xfb\xb5\xb0\x66\x08\x1b\xdb\x91\x10\x6f\xe0\x5d\x4c\x02\xbf\xa7\x9c\x1f\xaf\xed\x25\x2e\x0f\xfc\xda\x41\x89\x37\x33\xb2\x2c\x12\xb4\xe0\xc8\x30\x39\xec\x98\xaf\x80\xa1\x22\xeb\x8a\xca\xc7\xc6\x59\x5b\x15\x93\x19\x9e\xc7\xb0\x76\xca\xd4\xf4\xbe\xca\x65\x26\x62\xb1\x6b\x2d\x09\x5f\xcb\x21\xc2\x62\x64\xc2\x60\xef\x6d\x16\xb1\xdc\xec\x39\x39\x5b\x6a\x57\xce\x89\xfd\x46\x33\x8d\xc3\x95\x2d\xe0\xc6\xe8\x39\xa8\xed\xee\x3b\x2c\xe0\xa0\x13\x23\x19\xa1\x05\x70\x0f\xa8\xc4\x1b\x98\xad\xd8\x3d\x1c\x4c\x57\x44\x4c\xa6\x35\x87\x08\xa3\x4b\xc9\xb1\x84\x4d\xbf\x8f\xca\x44\x4c\x66\x90\x59\x30\x56\xcf\x41\xdb\xf9\xe9\x66\x3a\x4a\x40\x31\xe9\xa9\x4d\xfe\x1d\xc5\xda\x38\xc6\x76\x51\x0e\x68\x03\xcc\xbb\xa0\x1b\xd5\xf1\x3e\x27\x98\xe7\xe1\xd4\xcf\x93\xfc\xe7\xa9\xfb\x49\xf5\xa6\xce\x6a\x09\xb6\x4a\x2f\xb7\xa3\xd3\x32\x3b\x86\xf3\xe4\xc5\x54\x96\xf3\x4e\x6c\x7e\xfe\x2c\x73\x0e\x09\x73\x20\x8a\xa5\x0c\xb3\x30\x27\x4a\x6f\x27\xa7\x49\xda\x7e\xf9\xb2\x5e\x1d\x58\x37\x2c\x9f\x98\x87\x83\x43\xf2\xbf\xe9\xf7\x53\x70\x85\x07\xa4\x60\x1f\xe4\x9f\x55\x39\x64\xa8\x3d\x69\x17\xf4\x2a\x79\x6c\xc9\xbc\x2a\x11\x2c\x75\x21\xb6\x01\x64\x90\x54\x42\x29\x71\x9a\x96\x05\xc4\x21\xa3\x1b\xbd\xd8\xee\xcb\xd7\x21\x42\x7b\x9f\x06\x18\xbe\x43\xbb\xb4\x3a\xd9\xe2\xfd\xd4\x34\x0b\xd9\x88\xbe\x41\x0c\xa2\xc7\xa8\xe4\x2c\x10\xb5\xb9\xd0\x90\x9e\x76\x09\xf7\xb9\xd2\xb4\x58\xb4\xe5\x0f\x6e\xbb\xbf\x80\xf5\xdb\x79\x25\x25\xf0\x3e\x42\xaf\x15\x3a\x6f\xdc\x37\x7d\x97\x13\x58\x60\x69\xdd\x7b\x35\xfa\x08\x2c\xe6\x5e\xb9\x00\xe2\xfc\x8f\x3b\xe3\xd3\x17\xf4\x5a\x7b\x56\xb1\x18\xb5\x65\xd5\x42\xbb\x70\x06\xde\x43\x68\x23\xb2\x3f\x78\x51\x5e\xe1\x75\x0a\xe2\x90\xf8\x49\x17\xea\xa5\x29\x74\x55\xaf\xc4\x62\xbf\x65\xc6\xc2\x90\xc8\xac\xc5\x05\xa6\x64\x0d\xa2\x7e\xb2\xc2\x69\x42\xe9\xc4\xda\xa0\x71\xc1\xe3\x7c\x81\x8a\x03\xf6\xaf\xa8\xfd\xf2\xcf\x01\x37\xe8\x95\x65\xfe\x01\x82\xda\xa9\xe9\x81\xb6\xfa\x36\x6d\xd5\x94\x60\x94\xa1\x89\x4f\x93\x58\x06\x99\x25\x5d\xaa\xc9\x28\xa4\x67\xc5\x77\xf2\x3a\x68\x77\x00\x51\xa9\x78\x5e\x72\x6b\x19\x2a\xa5\x64\xd4\xd2\x2c\x76\xd4\x3b\x4e\x9d\x9b\x61\x38\x2b\xcd\x4e\x43\x3d\x55\xdb\xe4\x64\xb1\x8c\x62\xe9\xb0\x40\x74\xc5\xff\x3d\x19\xe6\xa3\x38\x35\x8b\xfb\xc4\x17\x48\xd3\x4e\x4d\x63\x1b\x1b\xc5\x38\x34\xb4\x7d\x90\x98\x04\x69\xfd\xa3\xdf\x62\xe2\xdd\x09\x89\xb9\xcc\x6a\xc9\xe6\xa5\x92\x40\xbd\x51\x85\x0c\xf6\x73\x8c\x0d\x50\xb3\xe9\x58\xac\x94\xc0\x7b\x5d\x2e\xcc\x65\xaf\x2f\xc6\x31\xb5\x87\x94\x7b\x01\x0c\x42\x4c\x86\x5d\x5d\xd6\x41\xfc\x38\xf8\xe4\x8a\xb0\xdc\x3e\x03\x2f\xac\xc8\x51\x72\x8c\x68\xb9\xfc\xc1\xcd\xdb\xec\x36\xde\x98\x0f\xab\x94\x58\xd8\x23\xec\x47\xb2\x22\x6a\x08\xe3\x1a\x76\x6b\x3a\x35\x21\xa7\xca\x78\x0d\xaf\x8d\x7a\x78\xf2\x85\xb6\x5a\x87\x6d\x7f\x87\x2f\xa9\xe3\x76\x9c\x45\xb4\xbd\xd7\x92\x8d\x59\xd6\xbe\x8e\xdf\x1a\x27\xbf\x83\x9d\xf1\xbb\x83\x36\xf3\x94\xbe\x7f\x94\x13\x88\x36\x5e\x0e\xad\x46\x5b\x8f\x1f\x7e\xbc\x58\x22\xc8\xa5\x94\x95\x20\xee\x5e\x49\xa6\x1b\xf5\x92\xae\x7a\x94\x9e\x28\x28\xd3\x32\xaf\x6b\x31\x22\x8a\xe6\x8b\xec\xea\xa9\xf2\xaa\xf4\x27\x4b\xb2\x0f\x8e\x3a\x0f\xb7\x85\xcc\xab\x4c\xd5\xdf\x5e\x7d\x7b\xf5\xcf\x00\x00\x00\xff\xff\x37\xcf\x75\xe8\xe7\x8e\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0x24, 0x40, 0xed, 0x57, 0xb9, 0x66, 0xe2, 0x92, 0x24, 0x0, 0xbc, 0xd9, 0x5, 0xb1, 0x32, 0xb1, 0x28, 0x2d, 0x84, 0xbb, 0x5, 0x34, 0x7e, 0xc2, 0x66, 0x67, 0xaa, 0x51, 0xf6, 0x78, 0x2c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
