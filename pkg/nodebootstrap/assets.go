// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x41\x4f\xf3\x46\x10\xbd\xfb\x57\xac\x44\x0e\xad\x94\xb5\x21\x5f\xfa\x1d\x90\x7c\x48\x89\x41\x88\x14\x50\x12\x04\x52\x5b\x45\x93\xdd\x71\x58\xc5\x9e\xb5\x66\xc7\x09\x10\xf1\xdf\x2b\xc7\x31\x0a\x50\x55\x55\x2e\xd9\x79\xb3\x33\x6f\xde\xbc\xf5\x89\xc2\x75\x30\x52\xe8\x50\xa1\x71\xb9\x33\x2a\xbc\x06\xc1\xd2\x2a\xcb\xbe\xd2\x8e\x54\x4d\x4e\x54\xee\x59\xad\xeb\x25\x16\x28\xfd\xfd\x61\x54\xc2\x9b\x27\x35\x71\x54\xbf\xa8\x81\xfa\x65\x34\x19\xfc\x1a\x45\x7f\xce\x90\x37\xce\xe0\xdf\xd1\x89\x9a\x78\x03\x85\x2a\x51\xc0\x82\x80\xaa\x80\xa1\x44\x41\x0e\xe7\x6a\x9a\x5d\x5d\xdf\xdd\xf6\xd5\xe8\x71\xb6\x18\x67\x97\xa3\x87\xc9\x7c\xd1\xc6\xa2\x8c\x36\x8e\x3d\x95\x48\x72\xe9\x0a\x4c\x13\x14\x93\xb4\x14\x93\xae\x56\x8c\xb4\x89\x4e\xd4\x55\xe1\x97\x50\x28\x20\xab\x82\x80\x38\xf3\xa9\xc7\x1f\xa3\xa7\xc5\xfd\xdd\x78\xd6\x57\x17\x93\x87\xd9\x3c\x9b\x2e\xc6\xb7\xb3\xbe\xba\x79\xf8\x3d\x9b\x64\xf3\x45\xf6\x34\x9f\x8e\x16\xa3\xe9\xd5\xec\x3f\x5b\x1e\x66\x3e\x74\x6c\x47\x22\x4f\xfa\x5f\x1a\xde\xde\x8d\xb3\xc5\xf5\xfd\xff\x2a\x57\x34\x85\xf6\x45\xa3\xec\x05\xcd\x4c\x80\x25\x3d\xfa\x9b\xd4\x81\x93\xa5\xa3\xee\x82\xfa\x2b\x52\x4a\x6b\xb0\x96\x31\x84\xf4\x34\xde\xff\x0e\x51\xf2\x16\xb5\xab\xd2\xde\xee\x40\xe1\xfd\x00\x98\xa2\x0e\x82\xac\x2d\x85\xb4\xb7\x3b\x92\xa1\x4b\x28\xe1\x45\x57\xde\x36\x68\x27\x57\x07\x41\x2d\xcf\x48\xe2\x0c\x88\xf3\xa4\xc5\xaf\x91\xf4\x16\x97\xcf\xde\xaf\x8f\x52\x3c\xbb\xb7\x36\xa3\xf4\x16\xd3\xc7\xcf\x09\x45\xe1\xb7\xba\x62\xb7\x71\x05\xae\xd0\xa6\xc2\x35\x1e\xb0\xca\x5b\xed\x28\x67\xd0\xc6\x93\x80\x23\x64\xed\x4a\x58\x61\xfa\xf3\x74\x30\x3c\x3d\x3b\x1b\xfe\x18\xfe\x36\x88\xed\x9a\x63\x34\x1c\xf7\x76\xdf\xbd\xf2\x1e\xc3\xde\x84\xb0\x0d\xb1\xf1\x65\xa3\x71\x52\x41\x1d\x50\x43\x69\x7f\x0e\xcf\x7f\xc4\x67\x1f\x42\xf8\xda\xea\x8a\xfd\xc6\x59\xe4\x14\xb6\xe1\xab\x42\xbe\x04\x47\xe9\xe1\xd8\xae\xa7\x4b\x21\xa7\x97\x8e\xb4\x75\x9c\x26\xbe\x92\xc4\x90\x6b\x56\x73\x04\x1b\x4f\x79\x8b\x37\xab\x6e\x70\x42\x89\x6d\x97\xf1\x31\x1f\xd7\x24\xae\xc4\xd4\x7a\xb3\x46\xee\xb6\x87\xb2\xf5\xbc\xd6\x55\x51\xaf\x1a\x0a\xe4\xba\x7b\x2b\xf6\x75\xa5\x2d\xbb\x0d\x72\xda\x9e\xf2\x8e\x38\xe3\xca\xed\x99\x37\xcb\x3f\xd6\xb5\x31\x4c\xc3\xc7\xad\xbe\x19\xaf\x0d\xc7\xaf\x50\x76\xb3\xe5\x08\x52\x33\xea\x15\x08\x86\x74\xea\x05\x04\x6f\x5a\xc7\x35\x0f\x19\xf9\x02\x59\x9a\x8f\x02\xc8\xa7\x26\x40\x9e\x5e\x4b\x5f\x87\xbd\x07\xd2\x1c\x8a\x80\x1f\x8a\x3a\x24\xd1\x06\x74\xfe\xd5\xfc\x06\x62\xc3\xa2\x7a\xbb\xef\x6f\xf0\x3d\xfa\x27\x00\x00\xff\xff\x8c\x13\x0f\x37\x88\x04\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 1160, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x0e\xc2\x30\x0c\x46\xe1\x3d\xa7\x30\x85\x01\x86\x34\x27\x80\x09\x06\x16\xe0\x06\xc8\x49\x7f\x29\x55\x9d\x44\xaa\x5d\x24\x6e\xcf\x82\xaa\xae\xdf\xd3\xdb\xef\x42\x1c\x6b\xd0\x4c\x1e\x8b\x73\x48\xb9\x51\xf7\x78\x5e\x6f\xef\xfb\xeb\x7c\x38\xe6\xa6\x56\xb9\x80\xfc\x78\xea\xe8\x42\x01\x96\x02\x26\x4d\x26\x61\x5a\x22\x04\xd6\x4b\x4b\x2c\x3d\xea\xc7\x39\xfd\xaa\xa1\x24\x13\x1a\x18\xa5\x55\x3f\x43\x1a\x0f\x1b\x47\xe5\x28\xa0\xff\xbb\x09\x6a\x3c\xdb\xea\xbf\x00\x00\x00\xff\xff\xef\x6e\xff\x33\x97\x00\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 151, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x51\x6f\xdb\x36\x10\xc7\xdf\xf5\x29\x6e\x6e\x80\x25\x40\x29\x27\x69\xd6\x87\x02\x1a\xe6\x35\x5e\x51\x34\x8b\x0b\xc7\x41\x0b\x0c\x83\x71\x26\x4f\x16\x61\x8a\x27\x90\x27\x6b\x69\x90\xef\x3e\xd0\xb2\x5c\x27\xc0\x56\xf8\xc5\xe4\xff\x77\xa7\xe3\xdd\x9f\x7c\xf5\xd3\x78\x65\xfd\x78\x85\xb1\x02\x45\x6d\x96\x91\xae\x18\x46\xb7\xb3\xeb\xe9\xf2\xe3\xe7\xe2\xe4\xb4\xe2\x28\x1e\x6b\x02\x65\xcf\x46\xf0\x2b\x8c\x49\xf4\x98\x36\x51\x8b\x1b\x6f\xda\x15\x39\x92\xdc\xb1\x46\x97\x93\xdf\x66\x59\xf4\xd8\x00\x3a\x8b\x11\xf6\xaa\xa2\x4d\xcc\xf7\xff\x87\xbd\x97\x98\x16\x77\xc0\xb4\xb8\x61\xaf\xc7\xa2\x70\x73\x9c\x2c\x8b\x0f\x51\xa8\x4e\x5c\xa0\x48\xa2\x4a\xb4\x8e\x4c\x96\x9d\x66\x00\xaf\x60\x31\xbb\x9e\xbd\x03\xa9\x28\x12\xc4\x8a\x5b\x67\x60\x45\xe0\x98\x37\x64\x00\x05\x68\x4b\xe1\x01\xc4\xd6\x34\x24\x85\x28\x18\x24\x42\xdb\xbc\xde\x65\xe8\x2a\xab\x2b\xb0\x11\xba\x0a\x05\x3a\x02\xc3\x60\x3d\x4c\x6e\x2e\xe1\xf4\xa0\xad\x30\x92\x01\xf6\xd0\x38\xb4\x1e\xfa\x9a\x4c\x9f\x00\xbd\x81\x9a\xd0\x0b\x08\xa7\x8f\x37\x1c\x04\x57\x8e\xd2\xb2\xe6\x28\x03\x0d\xc6\x46\x09\x1c\xcf\x5e\xc3\xaa\x15\xb0\xf2\x73\xdc\xc5\x7b\x16\xd0\x8e\x30\x40\xc5\x5d\x0a\x72\x8c\x66\x7f\xa4\x32\x70\xfd\xbd\xf0\xd4\x9f\xce\x4a\xc5\xad\x40\x85\x5b\xeb\xd7\xbb\x04\xc2\xa0\xdb\x28\x5c\xdb\x48\x29\xae\x07\xad\x44\x72\x65\x06\x10\xb9\x0d\x9a\x7e\x30\xca\xff\xc5\xfe\x13\xa8\x49\xd0\xa0\x60\xef\x06\x80\xd2\xe1\x3a\x16\x69\x32\x00\x23\x34\x26\x50\x8c\xc5\x79\xbe\xfb\x8d\xfa\x5d\xcf\x86\x94\x6d\x8a\x93\xc7\xbd\xeb\x9e\xf6\x82\x76\x6d\x14\x0a\xca\xf8\x58\x9c\x3c\xbe\xbf\xb9\xbf\x5b\x4c\xe7\xcb\xeb\xdb\xbb\x01\xa8\xf1\x1f\xd5\xb0\x49\xea\x9f\x93\xaf\xcb\xcf\xb3\xeb\x83\x84\xad\x54\xe4\xc5\x6a\x14\xcb\x5e\x09\x6f\xc8\xab\x8e\x56\x15\xf3\xa6\x90\xd0\xd2\x11\xc7\xc1\x7e\xeb\xb1\x9a\x0d\x15\x5f\x7a\x6a\x00\x9c\xe3\x4e\x35\xc1\x6e\xad\xa3\x35\x99\xe3\xe0\x86\x8d\xb2\xbe\x0c\xa8\x34\x7b\x41\xeb\x29\x28\x5b\xe3\x9a\x8a\xb7\xe7\x97\x57\xe7\x17\x17\x57\x6f\xae\x7e\xb9\xcc\xcd\x26\xe4\xa4\x43\x7e\xf2\x38\xf9\x72\xb7\xbc\x9e\xfe\x31\xb9\xbf\x59\x2c\xe7\xd3\x0f\x1f\x67\xb7\x4f\x39\xd6\xf8\x8d\x3d\x76\x31\xd7\x5c\xa7\x36\x8e\x1b\x6c\x23\x29\xac\xcd\xdb\xab\x77\x6f\xf2\x8b\x43\x37\xb8\x35\xaa\x09\xbc\xb5\x86\x42\x81\x5d\x7c\xd9\x26\xae\xd1\xfa\x62\xbf\xec\x27\x39\x20\xde\xaa\x95\xf5\xca\xd8\x50\x8c\xb9\x91\xb1\xf6\x36\xdd\xfb\x23\x59\xb3\x2f\x7b\x3d\x4d\x33\xe9\x9e\x24\x37\x03\x71\x38\x5f\x68\x7d\xba\x3b\x85\x61\xbd\xa1\x30\x8c\x90\xa4\xe3\xb0\x51\x8d\x6b\xd7\xa9\x04\x6f\x87\xb8\x75\xe0\xb6\x51\x26\xd8\x2d\x85\xa2\x5f\x95\x43\xe1\x81\xd6\x76\x57\x79\x72\xc0\x71\x5f\x77\xd7\x9f\x7d\x69\xd7\xc5\x4b\xf3\xf5\xdb\xf9\x03\xd6\xc3\xd9\x4a\x42\x69\x03\xa9\x35\x0a\xc5\x62\xce\x82\x42\x9f\x7a\x9b\xde\x51\xd8\x52\x78\x4f\x41\x6c\x99\x9c\xf0\xec\x23\xe8\xd9\x3f\xd4\xdc\x46\x95\x3c\x50\x94\xe8\x22\x1d\x3a\x6a\xc9\x8b\xd2\xa8\x4a\xeb\xe8\x59\x0d\x1a\x73\x1d\x24\x71\x67\xc9\xde\xfd\x03\xf5\xfd\x61\x4b\xef\x13\x8c\x4e\x1e\x77\xb6\xff\xeb\xb7\xbf\x9f\x46\x69\xf5\xe9\xfe\xf7\xe9\xcd\x74\xb1\x9c\x7e\x5d\xcc\x27\xcb\xc9\xfc\x43\xb2\xe9\x59\x36\x3c\x6f\x18\x9e\xc5\x67\xff\x06\x00\x00\xff\xff\x6a\x77\xb9\x7b\x94\x05\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 1428, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

