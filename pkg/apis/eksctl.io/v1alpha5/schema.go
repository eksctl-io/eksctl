// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (20.535kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x6f\xdb\x3c\x12\xbe\xe7\x57\x08\x7e\xf7\xb4\xe8\xdb\xec\x02\xdd\x1e\x72\x73\xec\x34\x35\xda\x24\x46\x5c\x74\x81\x2d\x7a\x18\x51\x63\x99\x0d\x45\x6a\x49\xca\xb1\xbb\xe8\x7f\x5f\xc8\xb2\x62\xc9\x12\x65\x99\xfa\xb0\xb3\xdb\x43\x81\x42\xd6\x90\xcf\x0c\xe7\x9b\xa3\xfc\xe7\xc2\x71\x06\x7f\x51\x64\x81\x01\x0c\xae\x9c\xc1\x42\xeb\xf0\xea\xf2\xf2\x87\x12\xfc\xcf\xe4\xe9\x5b\x21\xfd\x4b\x4f\xc2\x5c\xff\xf9\xb7\x77\x97\xc9\xb3\x3f\x06\x6f\x36\x74\x12\xe7\x31\xd1\x1f\x97\x1e\xce\x29\xa7\x9a\x0a\xae\x2e\x47\x2c\x52\x1a\xe5\x48\xf0\x39\xf5\x93\x17\x33\x3f\x0f\xae\x9c\x78\x4f\xc7\x19\xa4\xef\x31\x11\x79\xff\x04\x4d\x16\x2f\x3f\x39\xce\x20\x94\x22\x44\xa9\x29\xaa\xcc\x53\xc7\x19\x90\x84\xe8\xb3\xf0\x7d\xca\xfd\xdc\x6f\xf6\x8c\xec\xe8\x2b\x19\x7a\x01\x9a\xee\xfe\x42\xfa\x6b\xfb\xbf\x5f\xe9\x6a\x03\xf0\xbc\x0d\x35\xb0\x69\x96\x93\x39\x30\x85\x2f\x2f\xe9\x75\x88\xf1\x76\xc2\xfd\x81\x44\x27\xcb\x6d\x97\x28\x4a\xa7\xc8\xb2\x51\x48\xc8\xc1\x65\xf8\x65\x1d\xee\xfd\xe0\x38\x03\xaa\x31\xd8\x7f\x98\x41\xa2\xb4\xcc\x31\x96\x61\x29\xf7\x1e\x48\x09\xeb\x5e\xf8\x4f\xb4\x28\xc3\xb4\xc4\x7f\x47\x54\xa2\x37\xb8\x72\xbe\xed\x58\x0e\x50\x83\x07\x1a\x52\x4c\xdf\xdf\x1c\x12\xd2\x13\xe5\xde\xbe\x74\xf6\xc4\x90\x63\x1d\x57\x10\x84\x6c\xb3\xca\xb7\xbc\xf0\xf2\x50\x33\xbf\x7d\xbf\x28\x91\xe2\x00\x42\xfa\x15\xa5\xa2\x82\xb7\xb3\x3d\x3e\x29\xa2\xd9\x5b\x2a\x2e\x97\x7f\x07\x16\x2e\xe0\x1f\x87\x31\xbc\x88\xab\x4f\x03\xba\xc3\xdd\xf9\xe4\xe1\x50\x08\x7a\x45\x32\x19\xde\x95\x03\x59\x86\xa4\x57\x20\x5f\xa7\xa3\x72\x20\x5c\x78\x78\x2b\x45\x14\xd6\xb5\xe0\x86\x30\x8d\x40\xef\x53\x20\xc7\x3b\x85\xac\xbe\x01\x07\x1f\xbd\xfb\x73\xe1\xea\x6e\x0f\x4f\x23\xe6\xe6\x20\x7d\xd0\x38\x95\x62\x4e\x59\x6d\x97\xdb\x15\x6b\x1f\x72\x68\x1a\x31\x06\x4b\xa0\x0c\x5c\xca\xa8\x5e\xff\x4b\xf0\xde\xa2\xc9\x9b\x6c\xbc\x2f\xc9\x0e\xda\x90\x5f\xdd\x58\x5f\x0e\x4b\x21\x91\xa8\xd5\x0d\x27\x72\x1d\xea\x12\x57\xde\x0d\xba\x59\x61\xdb\x72\x74\x1a\x74\x54\x38\xac\x4e\x05\x36\x4b\xb6\x2c\x85\xe3\x53\xdd\x0f\x96\x5b\xaa\xfb\xc8\x49\x6e\xb8\x17\x0a\xca\xb5\xaa\x93\x8b\x85\x92\x2e\x41\xe3\x90\x10\x54\x85\x23\x49\x37\x73\x85\x60\x08\x86\xd3\x0c\x23\x97\x51\x72\xec\x02\x9d\x71\x1f\xc7\xce\x1a\x7c\x2b\x94\x4b\x4a\xf0\x51\x30\x1c\x3e\xde\x1f\xc8\x74\x0c\x36\xf6\xb2\xc2\x14\x65\x40\x55\x9c\x32\xa9\x6b\x11\x71\x0f\xe4\xda\x66\xc5\xd4\x51\x0b\xef\x66\x85\x24\x8a\xa5\xd1\x00\x9f\x61\xb5\x96\xb0\x3e\x53\xbd\x78\x98\x8c\x47\x56\x2a\xb3\x15\xdd\x90\x10\x11\xe5\xf5\xd4\x39\x41\x44\xda\x29\xce\x2c\x87\xeb\x8c\xca\x8c\xc9\xf0\x6e\x93\x9d\xd6\x50\x6c\x0e\x01\xda\x1c\x68\x4c\xa7\x42\x20\x56\xc4\x0c\x5c\x64\x85\x73\x0c\x41\x6b\x94\x7c\x5a\x8e\x74\xf3\xca\xdb\xbf\x16\x9e\x55\x06\xe8\x9d\x90\xcd\xa7\x92\x95\xe3\x3e\x50\xe0\x5c\x68\xc8\x57\xfa\x67\x86\xb6\x4b\x25\xda\x53\xf0\x1a\xea\x74\x92\x4a\x2c\x55\xf7\xf2\x23\xd4\x1a\xc8\x62\x2a\x18\x25\xeb\xe1\xe3\xfd\x09\x92\xbe\x2c\x82\xd6\xb4\xc8\x70\xca\x5a\x46\xd8\xa2\xfe\x87\xed\x78\xff\x13\x64\x70\x05\xed\xad\x4a\xe9\x34\xf8\xbf\xed\x3b\x95\x50\x0d\x2b\x97\x47\xa6\x19\x9d\xf1\xb0\x1f\xe5\xca\xbb\x69\x9b\x18\x97\x39\x6e\x89\x7e\xa6\xd8\x38\xdc\x5b\xb3\x8d\x91\xdb\x7d\x2c\x28\x97\xb5\x3a\x6a\xbf\x75\x39\xd5\x83\xfb\xe1\x97\x3a\x7a\x1b\x27\xb8\xcf\x50\xdf\x85\x75\x86\xb7\xbe\xa9\xe1\xb6\x3a\xb3\x51\x05\x12\x2f\x38\xa7\x24\x2e\xd8\x22\xbd\x10\x92\xea\xf5\xb8\x24\x38\x57\x35\x6a\x03\xf4\xe8\x3e\x81\xe3\x0c\x5c\xca\x41\xae\x6f\x38\x11\x5e\xd2\xc5\x1f\xb8\xa0\xf0\xfd\xbb\x5c\xa0\x2c\x8f\x86\xd2\x4a\xad\x95\x06\xf2\x74\x7f\x8c\x21\x76\x77\x78\x91\xcb\xf1\xa8\x72\xb9\x35\x7b\x6c\x5c\xd3\x98\x1b\xa3\xa8\x9f\x85\x7c\x6a\x33\x79\x4e\x2a\xfd\xf6\x78\xef\x14\x77\x67\xda\xf2\x75\x3a\xaa\xa3\x29\xf4\xd0\xed\x4d\xb9\x85\x53\x4f\xda\x35\x23\x48\x14\x7b\x83\xa4\x5b\x6c\xb3\x40\xc1\x06\x9c\xce\x53\xba\xd4\xee\x4a\x01\xe1\x4a\x4b\x18\x4d\xc6\x8f\x27\x48\xf0\xd5\x02\x64\xd2\x7d\x9f\x35\x95\x2b\x44\x5a\x0c\x19\x13\xb1\xcf\x9e\x4c\x97\xef\xad\xfa\x25\x1c\x7a\xea\x50\x66\xa2\x6f\xb9\x7a\x9a\x3b\x8c\xdd\xa3\xda\xed\x5a\xe1\x9d\x92\x3e\x64\x9f\x7a\xd3\xbe\xa3\xd9\xbb\x22\xa9\x97\x0e\x77\x9e\xfc\x86\xed\xb4\x25\x15\x32\x24\x5a\xc8\x53\x77\xfd\xf2\x42\x9e\x6d\x51\x35\x73\x1b\xe5\x3e\xb4\x7b\x7f\xf5\xff\x55\x22\x18\x4e\xae\x96\x99\x24\x1d\xce\xa3\x6c\xe5\x7f\xb4\x29\xda\xfe\xb9\xdc\xd2\x5a\x1d\x45\x89\xa1\xe8\x27\x6e\x3c\xc6\x3b\x95\x1e\x4d\x8c\x0c\xf2\x4a\xd3\x21\x8e\x87\x74\xb7\x52\x2c\xae\x10\x5a\x69\x09\x61\xd1\xdf\x77\x88\xa9\x70\xff\xde\x81\x42\x14\xa6\x18\xce\x24\x92\x41\x40\x3f\x40\x40\x99\x55\xeb\x93\x72\xa5\x81\x93\xcd\xf8\x9a\x0d\xbd\x87\x2a\xe6\x7b\x04\x21\x10\xaa\x8d\x10\x28\xd7\xe8\xa3\x41\x65\x02\xca\x67\xf4\xa7\x71\xfb\x6a\x5a\x58\x59\xd3\x2e\x05\x8b\x02\xb4\x26\x3f\x83\x79\x0d\xa5\x8a\x83\x1a\xd5\x73\x45\xb3\xd9\xc7\xd7\xe8\xde\xb3\x89\x5b\xd2\xb3\xd8\x16\xd6\x25\x63\xa9\xb5\x6a\x90\x73\xce\x31\xb2\xe6\x59\x32\xaa\x57\x7d\xc0\xf9\x61\xbb\x0e\xbc\x20\x6a\x49\x89\x1a\x09\x16\x27\x2a\xf9\x26\xb0\xc1\x0d\xfa\x12\x78\xc4\x20\x2e\x3c\xeb\x7b\xc3\x2c\x91\x85\x5f\x0a\x12\x98\xaf\xb6\x68\x4a\xfb\x46\xe7\xd1\x9a\xe9\x80\xbf\x33\x8c\xa2\xaf\x2e\xf8\xa6\xf4\x6a\x4c\xe3\xd7\xdc\xa8\xbf\xd9\xb8\x9d\xbf\x29\xc5\x50\x09\x77\x2a\x71\x4e\x57\x4d\x18\x3e\xaa\xd1\x7e\x5e\x21\xfb\x95\x04\x9e\x76\xa2\x6c\xae\x8f\xdb\x53\x7b\x6d\x97\xea\xdc\x1a\x5a\x6b\xaf\x39\x67\x05\xe5\x57\x45\x60\xa7\x42\x89\x3b\x9b\xee\x2e\xe0\x69\x62\x1f\xe8\xaa\x87\x50\xd3\x80\xfe\x44\x63\x5c\xab\xd4\xb9\x86\x59\x7d\x42\x6e\xeb\x91\x13\x6a\x5b\xf7\x94\x50\x6f\xe7\x8d\x1b\xb1\xff\x29\x50\x9f\x70\x3d\x19\xdb\xa3\x98\x3c\x4c\x67\xb6\xda\x3d\x15\x9e\x9a\xa2\x8c\x2d\xd1\x6a\x89\x57\x53\x8b\x68\x28\xbb\x36\x38\x43\xa0\x84\x81\x52\x94\x7c\x16\xe0\x5d\x03\x8b\x43\xa8\x8c\x95\xf4\x24\xf1\x4f\xfa\xa8\x37\x0e\xfa\x34\xe3\x6e\x65\x35\x73\xc7\x81\xc8\x54\x73\xf7\xf6\x21\x96\xa1\x3a\xcc\xb5\xed\xb4\x66\x28\x05\x79\xc2\x9e\x2e\xe7\x5e\x30\x5d\x67\xb7\x36\x24\x23\x78\x9d\xb6\x15\x47\x22\x08\x80\x7b\x27\x50\x1c\xb1\x44\x29\xa9\x57\x80\x62\x55\x7d\x25\x77\x80\xe3\x7b\xa3\x8f\xad\xa2\x7e\x8a\x5c\x64\xa8\x6f\x36\x77\xca\xfb\x9f\x6c\x3a\x8d\x5c\x50\x87\x73\x9b\x17\x7b\x6f\xb7\x58\x44\x5e\x97\x6b\xef\x81\x4f\x76\x87\x5e\x40\xf9\x48\xf0\xd8\x8b\xa3\xb1\x18\x3e\x90\xe0\x6a\x4d\x79\x8b\x19\xfd\xeb\x94\x7f\xcd\xaf\x54\x4e\x3f\xeb\xbc\x2b\x41\x37\xf7\x05\x96\x97\xbe\xe9\x2a\x0d\xee\x8d\xb3\x4b\xd8\xa6\x8b\xd9\x35\x5a\xfc\x0e\x66\xe8\x79\x82\x6f\x0e\xa9\xa8\xb7\x3d\xc4\xa7\xfc\xf6\x7d\xa9\xaf\x89\x69\x73\xd7\x2d\x00\x1f\xaf\x23\xca\x3c\x4b\xd7\x01\x91\x16\x33\x02\xcc\x92\x1c\x57\xb1\x83\x01\x56\x11\x42\x2a\xe9\x09\x4a\x9d\xdc\x68\x59\xc2\x0f\xc3\x3b\x2c\xa6\x52\xf5\xb0\xbb\x76\xdf\xe6\xcd\x95\xb1\x6b\x54\xbd\xdf\xdc\x6e\x3f\x60\xee\x84\xfb\xd2\xf6\x53\xc2\xd5\xa3\x79\x96\xb7\xfa\x6c\x8c\x9f\xe1\x9a\xc9\xbb\x34\x8f\x03\x6d\x46\x43\xdf\x36\xdb\xdd\x54\xf5\x1b\xb8\x79\xb2\xde\x23\x44\x5c\xbe\x4a\x6a\x1e\x91\xe0\x51\xe0\x9a\xea\x56\xc1\xc7\x18\x67\x84\xd7\xa0\xb0\x51\x77\x29\x5d\x68\x8a\x92\x20\xd7\xe0\xe3\xd0\x15\x4b\x6c\xbc\xae\x0a\x85\x4e\x4f\x73\x2a\x44\xb1\xc6\xae\xbd\xca\x76\x08\x90\x0a\x3e\xd3\x12\x34\xfa\xa7\x9c\x5a\xcf\xb5\xfc\x6a\xe7\x21\x93\xf1\x09\xd4\x2b\x0e\xb0\xb3\xcd\x3c\xa6\x95\x67\x88\xc9\x3f\x0b\x02\xec\x2c\x1c\x43\x5c\xd8\xd6\x11\x37\x63\xe2\xd9\x8a\xdd\x64\x08\xf2\x13\xae\xa7\xa0\x8d\xbe\xb0\x72\xca\x2f\x5d\xa0\x11\xb1\x6d\x82\xa6\x44\x24\x49\x7e\xe8\x76\xd2\x5b\xe5\xda\xfe\xb9\x3f\x14\xc7\x8c\x8c\x67\xbe\x69\xe1\xd9\xc8\xac\xd1\x8c\x5a\x6c\x1e\x1f\x91\x15\xba\x2a\x7d\x5a\x47\xc9\x9c\xab\xf1\xab\xfd\x8d\x7e\xd8\x30\x2a\x71\x49\x6d\xbf\xc0\x12\x91\x0e\x23\x7d\x94\x45\xb5\x2f\xa5\xc7\xfc\xd8\x9c\x51\x44\x91\xb4\xd2\x22\x57\x02\x37\x67\x4f\x95\x46\x0f\x7a\x71\x82\xb8\x30\x67\xd1\xca\xd6\xc9\x45\xca\x9c\xc3\x57\xd1\x61\x00\xd4\x4a\xba\xdb\xcb\xc1\xd9\xec\xe3\xb1\xae\xb9\x7d\x45\x2a\xfe\x91\x96\x83\x89\xe9\x13\xae\xe3\xaa\x7d\xfb\xa0\xc6\xdf\x2e\x4b\xde\x3f\x01\x8f\x17\xf1\xbf\x5f\x17\xff\x0d\x00\x00\xff\xff\x72\x45\x40\x94\x37\x50\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0xeb, 0xc7, 0x9, 0xf6, 0xd7, 0x1c, 0x3a, 0x3a, 0x11, 0x2a, 0xa0, 0x62, 0xde, 0x6a, 0x99, 0x5c, 0xc0, 0x47, 0xf8, 0x47, 0xf7, 0xe, 0x45, 0x43, 0x48, 0x29, 0x95, 0xf8, 0x18, 0x7, 0x59}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
