// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (36.581kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5d\xff\x6f\xdb\xb8\x92\xff\xbd\x7f\x05\xe1\x3e\xdc\xdb\x02\x76\xfc\xee\x80\xfb\x82\xde\x5e\x00\x37\xe9\x76\x7d\x6d\x12\x23\xde\xdb\x87\xdb\xa4\xc0\xd2\xd2\xd8\xe6\x46\x22\xb5\x24\x95\xc4\xdd\xf6\x7f\x7f\x20\xf5\xc5\xfa\x42\x4a\x94\x2c\x67\x93\xf7\x53\x1b\x4b\x1c\x0e\x67\x3e\x1c\x0e\x67\xc8\xd1\x1f\xaf\x10\x1a\xfd\x85\xc3\x7a\xf4\x16\x8d\x5e\x4f\x7d\x58\x13\x4a\x24\x61\x54\x4c\xcf\x82\x58\x48\xe0\x67\x8c\xae\xc9\x66\x34\x56\x2f\xca\x5d\x04\xea\x45\xb6\xfa\x0d\x3c\x99\xfc\xf6\x17\xe1\x6d\x21\xc4\xea\xe7\xad\x94\xd1\xdb\xe9\xf4\x37\xc1\xe8\x24\xf9\x75\xc2\xf8\x66\xea\x73\xbc\x96\x93\xbf\xfd\xe7\x34\xf9\xed\x75\xd2\xae\xd0\xd5\xe8\x2d\x52\x7c\x20\x34\xca\xfa\x0c\x58\xec\xff\x1d\x4b\x6f\x9b\x3f\x42\x68\x14\x71\x16\x01\x97\x04\x44\xe1\x57\x84\x46\x5e\xd2\xe8\x13\xdb\x6c\x08\xdd\x94\x9e\xb5\x0e\x2e\xef\x28\x6b\x9d\x37\xfd\x96\xfe\xef\xdb\x78\xdf\x3f\xac\x81\x73\xf0\xaf\xb8\x0f\x7c\xf4\x16\xdd\x58\x79\x48\x1f\x7c\xce\xdb\x62\xdf\xd7\x3d\xe3\x60\x51\x1c\xc5\x1a\x07\x02\xf2\x97\x7c\x10\x1e\x27\x91\x7a\x4f\x71\xec\x31\x2a\x31\xa1\x02\x79\x5a\x05\x28\xc2\x1c\x87\x20\x81\x0b\xc4\x21\xc0\x12\x7c\x24\x19\x2a\xc8\x2a\x27\xf4\x38\x21\x54\x42\x10\x90\xdf\x26\x5b\x19\x06\x93\x43\x09\xbf\x2a\x08\xa2\xae\xa3\xba\xe0\xad\xaa\x02\x8a\x57\x01\xfc\xb4\x8b\x2a\x0f\x10\x1a\x11\x09\x61\xf5\xc7\x02\xe4\x84\xe4\xaa\x8f\x71\xf9\xa9\x0f\x6b\x1c\x07\x52\xbd\x30\x2a\x3c\xf9\x56\x7c\x2d\x27\x81\x39\xc7\xbb\xbe\x0a\x2e\x72\x3e\xa4\x76\x81\x37\x6b\x21\x05\x16\x0a\x52\x21\x77\xd4\x71\x57\xf2\x46\x4d\x27\x16\xa0\xa0\x5e\x0e\xbf\xc7\x84\x83\x5f\x16\x51\x08\x12\xfb\x58\xe2\xba\x7c\x6c\x70\xc0\x11\xf9\x19\xb8\x48\x58\xfe\xc3\xa4\x33\x83\xda\x4b\x4a\x2f\x3d\x80\x47\x1c\x46\x81\xee\xe4\xa6\x8c\x13\xb8\x13\x9e\x0c\x4e\x08\x9b\xde\xff\x2b\x0e\xa2\x2d\xfe\xf7\x22\x5c\x3e\xbf\x32\x00\x67\x84\xef\x31\x09\xf0\x8a\x04\x44\xee\x7e\x61\xf4\x39\x20\x76\x5c\x34\x38\x06\x13\x89\x3a\x18\x3c\x33\xd9\x35\xe6\x1b\x2c\x61\xc1\xd9\x9a\x04\xce\x43\x36\x77\xf9\x43\x89\xd6\x41\xa3\xdd\x10\xe9\x36\xcc\x0f\x44\x9a\x29\x10\x1c\x76\x12\xd4\x7c\x76\x61\x26\x74\x47\xa8\x7f\x64\xb4\x96\xe7\x5d\x2b\x50\x43\x4c\xf1\x06\xfc\x4b\xe6\xc3\x07\xce\xe2\xe8\x30\xad\x5d\x54\xa8\xb9\xea\xad\x32\xe8\x92\x31\x5a\x02\xa0\x1b\x45\x71\xa3\xf9\x43\xb1\xc0\x1b\xf8\xfc\xdd\x54\xff\x3b\xd5\xfc\x13\xba\x99\xd0\xfc\x8d\x37\x08\x53\x1f\xdd\xa4\x23\x43\xfb\x07\x79\x23\xb8\x13\x93\xf4\xb1\x6e\x27\xa6\x6f\xca\x2c\xb4\xd8\x47\xc5\xd2\xf7\x18\x6d\x39\xac\xff\xe7\x76\x64\xe7\xe4\x76\x74\x5a\x65\xfc\xfb\x29\x3e\xd5\xfc\xd5\xda\xd7\x99\xba\x1d\x9d\xd6\x07\xa1\x08\x98\xc1\x95\x9b\xd0\x2e\x50\xbd\x80\xbd\xcd\x2d\x93\xa3\xc3\x40\x62\x50\x2c\xfc\xc0\x38\x22\x74\xcd\x78\x88\xd5\x4f\x5a\x90\xd9\x54\x40\x42\x01\xc5\xa0\x6d\x13\x44\x3a\xa9\xbb\xb5\x57\x47\x2c\xb8\x28\x51\x80\xc7\x41\x8a\xf7\xd4\xe3\xbb\x8c\x01\x07\x6d\x2e\x6b\xcd\xcc\xd4\x25\x96\x71\x4d\x9f\x8d\x00\x59\x26\x4d\x8c\xe4\xee\x23\xaf\x13\xad\x9f\x17\x67\x7d\x5d\x28\x6d\x39\xc7\xc6\xd5\xdf\x34\x05\x2a\xc6\xbb\xc2\xb3\x19\xe5\x8d\x56\xb1\x61\x99\x6b\x5c\xf6\xcd\xab\x6e\xa3\xc2\xeb\xfa\xaa\x2c\x66\x83\xb8\x90\x18\x09\xa2\x10\x9c\xba\x78\x63\xe5\xd0\xad\x00\x71\x88\x02\xec\x81\x8f\x1e\x88\xdc\xa2\x54\x6f\x68\xb6\x98\x3b\x3b\x8f\x9d\x09\x9b\xdc\xc6\xf7\xd4\x8f\x18\xa1\x52\xb8\x6c\x0c\x22\x4e\xee\xb1\x84\x99\xe7\x81\xa8\x81\x3b\x33\x2e\x2b\xc6\x02\xc0\x96\x79\x11\xc5\xab\x80\x78\x5d\x09\x74\x02\x70\x99\x49\x5b\xdf\x83\xa8\x76\xcb\x02\x5f\xe4\xde\x39\x8e\x08\x12\xc0\xef\x81\x23\x48\xa5\x8a\xb0\xee\xad\x68\xd4\x9c\xd5\xdb\x8b\xb8\x49\xc5\xca\x49\x72\x50\x6e\x36\xdb\x98\xff\xfe\x11\xbc\x58\x91\xbb\x66\x01\xcc\xae\x2f\x5b\x1c\xa9\x46\x17\xb5\x42\x6d\x01\x3c\x24\x42\x59\x13\xf1\x8e\xc5\xd4\xc7\x7c\xd7\x87\xba\x92\x04\xf1\x94\x8e\x59\x5c\xc6\x2e\xea\xbc\x6e\xee\xa5\xb4\x2c\x51\x3d\xc8\x15\x4e\x19\x3c\x40\x80\x05\x0a\x03\x09\x4d\xd9\x83\xab\xf9\xf9\xd9\x91\xe6\x5d\x65\xc8\xee\x43\x69\x47\x4d\x85\x5e\x07\x6c\x99\x86\xdf\x80\xa3\x01\xad\x02\x0e\x02\x34\x9f\x5d\x20\x2c\x25\x27\xab\x58\x82\x40\x6c\x8d\x70\x36\xa1\x3b\x9a\x81\x36\x6a\x96\x79\x5f\x41\xb4\x83\x15\xc0\x94\x32\x89\xcb\x01\xbf\x66\x59\x1c\x6f\x63\x5d\x08\x60\x9a\x08\xfc\xf1\xcd\x8c\x73\x2c\x25\xf6\xb6\x0b\x16\x10\xaf\x36\x4f\xcc\x26\x60\x4e\x03\x42\xe1\x9c\x79\x71\x08\xb4\xd6\xa1\x49\x1d\x28\xd2\xe4\x91\x9f\xb6\x51\x6b\x6f\xd2\xaf\xfa\x9f\xdc\x12\x81\x52\x6c\x29\x2b\xad\x85\xdf\xc5\x11\xee\xdf\x4b\xab\x44\x66\xd7\x97\xcf\x2b\x46\x12\xe0\x15\x04\x2f\x16\x6c\x14\x87\xd0\x37\xd0\x60\x25\x28\x22\xec\x0d\x4b\x35\xea\xbc\x84\x74\xa3\xdf\x63\xbf\x53\x33\x4f\x4d\x1b\x20\x89\x37\x2f\x0b\x22\x9d\x96\x4e\x0d\x22\x23\x06\xea\xf3\x64\x6c\xb6\xd5\x4d\xb3\xdd\x66\x1b\x5b\xf0\xd1\xb8\x3d\xd2\x0a\x19\x72\xb9\xa4\x88\xe0\x30\xb5\x66\xa9\x31\x43\xd9\x2e\x53\x07\x02\x92\x5d\x4e\xcc\xfb\x78\xd1\x5d\xa9\x3b\x2d\xa7\xcb\x2a\xe6\xad\x8b\x2a\xef\xe8\x06\x76\x02\x4f\x46\x7c\x40\x65\x24\xea\x56\x1e\x46\x4d\x6a\x1d\x05\xdf\x44\xc9\x24\x64\x1d\x25\x6b\xcd\x61\x54\xe7\x0b\x87\x4d\x21\x12\xd3\x9e\xd1\x18\xdc\x68\xa7\x0c\x0c\x49\xf2\xc5\x59\xbc\x62\xe8\xe7\xb0\x74\xd1\x40\x56\x34\x55\x8a\x81\xaf\xa3\xd8\xb1\x3c\x5f\xbb\x01\x0a\x1c\x07\xf9\xd6\xbd\xcf\xe6\xdf\x89\x98\x69\x02\x5d\xce\x7e\x72\xb1\x48\x6a\xff\xf4\x80\xdd\xb7\x91\x9d\x14\x91\x11\x1f\xd0\x22\x5d\xce\x7e\x42\x29\xd9\xb2\xa9\x46\x2c\x2a\x2f\x80\x6e\x76\xa9\x9d\x9e\x49\xb8\xee\x16\x1f\xf3\x61\xad\x81\xa7\x3a\x59\x13\x0f\x4b\x98\xc5\x72\xcb\x38\x91\xbb\x73\x43\x0a\xc2\xcd\x93\x3f\xc4\x5d\xcf\xa2\x4f\x43\xbb\x8f\xde\xdd\xe5\x20\x56\xb9\x13\x52\xf3\xc1\xb8\x88\x7a\x5c\x56\xaf\x91\xfd\xc1\x20\x8f\x38\x60\x7f\xc2\x68\xb0\x1b\x24\x82\xe0\x40\xce\x08\xf8\x78\x45\xa1\x53\x6c\xb8\xdf\x92\x65\xc9\x68\x81\x7c\x60\xfc\xee\x68\xcb\x54\x12\x10\x7e\xf6\x1c\x77\x42\x74\xa6\x86\xfa\x30\x07\xb4\xc6\x69\x27\xda\x71\x4e\xa8\x23\x91\x22\xa5\x9b\x19\x6e\x20\x64\x82\xe3\xcf\x8b\x33\x27\xe3\x1b\x4b\x36\x0b\x02\xa6\xa6\xf0\x7c\x71\xff\x1f\xbd\x32\x15\x1e\xf1\xb9\xdb\x7e\x76\x43\xe4\x36\x5e\x9d\x78\x2c\xfc\xfa\x00\xf8\x1e\x14\x02\xc4\xd7\xe4\x30\xcb\xd7\xe8\x6e\xf3\x35\x96\x24\x10\x5f\x49\x44\x41\x9e\xcc\x17\x97\x60\x89\xd2\x78\xf6\x8c\x4c\x43\xef\xb5\x3c\x8e\xd9\x6a\x3f\x4a\x8e\xcf\xe6\xe7\xd7\x87\xc5\xca\x0f\x19\x6a\xff\x64\xf4\x9a\x71\xb4\x07\x2b\x52\xc3\x40\x58\x08\xe6\x91\x64\xf3\x3b\x46\x70\xb2\x39\x41\x92\xa1\x58\x40\x92\xf6\x12\x10\x61\xae\x90\xa5\x5f\x56\x04\x32\xa8\xa5\xf8\x42\x8a\x26\xdd\x21\xec\x4f\xb6\xac\x0e\x5f\x17\x08\x3f\x21\x5b\x46\x9d\x92\xde\x27\x5c\x8c\xe4\x28\x76\x3c\xbd\x53\xf0\x34\x1b\xcc\x6a\x92\x67\xeb\x02\xb9\xa7\x09\x37\x0a\xf0\x62\xb5\xa4\x27\x47\x25\x06\x75\x62\xb6\x98\x27\xa9\xec\x65\xff\x3e\x6a\x08\x8b\x38\x4c\xb4\xf4\xc1\x47\x49\x0f\xfa\x8c\x0a\x5a\x7e\xe8\x0c\x56\x57\x52\xed\x23\xad\xb9\x05\xed\x70\x59\x9a\x66\x58\x85\xc9\x6c\x12\x60\x0e\x08\x88\xdc\x02\xcf\x56\x85\xc2\x4c\x51\x23\xa9\x4f\xa8\xfd\x91\x8f\x31\x92\x5b\x10\xa0\x89\xdc\xc1\x0e\x7c\xb4\xda\xa1\xd9\x2f\xba\x9d\xc7\xe8\x3d\x50\x02\xb4\x14\x5a\x6b\x97\xde\x93\x32\xd6\x73\xe5\x27\xa5\x63\x1b\x7a\xf9\xb2\xc2\xde\xa0\x4b\xf3\x62\xe1\x00\xef\x71\xc3\xc2\x5b\x31\x2f\x4d\x8b\x5d\xa3\x01\x19\xd0\x77\xd9\x04\x6c\x85\x83\xd4\xb2\x6a\xc7\x03\x07\x01\xf2\xb6\x24\xc8\x5c\x90\x69\xd9\x26\x77\x74\x69\xba\xd3\x2f\x79\x3a\x95\xe3\x98\x6e\xa1\xb0\x9a\x78\x86\x0b\x7c\x95\x46\xc8\xd6\x0a\xc2\x28\xe5\x11\x45\x09\x93\x27\x9d\xa6\x92\x13\x8d\xf6\x7c\x46\xe7\x53\x0a\x4d\xe3\x9a\xcf\x2e\x10\x67\x01\xfc\x55\xa0\xd9\xf5\x65\xb6\x62\x4b\x86\x78\x4c\x51\xc4\x7c\x81\x18\x95\x2c\xe3\xb9\xdb\x78\x0f\xa2\xdd\x6e\x89\x21\x00\x4f\x32\x3e\xe4\x19\xe0\x65\x4a\x73\x08\xd7\x2d\x59\x6e\xb4\xc6\x79\x1c\x80\x50\x03\x4f\x78\x46\xca\x77\x0c\x18\xd6\x07\xdc\x85\xb7\x05\x3f\x0e\xe0\x00\x39\x1f\xd6\x53\x97\x65\xee\xa9\xdc\x97\x26\xb9\x3e\x6c\x89\xb7\xcd\x27\x91\xd8\xb2\x38\xf0\x33\x60\xf9\x0c\xd1\x64\x1f\x8a\xf4\x49\x30\x9d\x39\x4e\xa7\x5d\x22\x11\xf0\x73\x99\x9c\xa0\xf9\x1a\x51\x46\xf5\x4c\xbc\x27\x3e\xf8\x63\x6d\xb0\xb2\x15\x4f\x2d\x4e\xaa\x61\x16\x7f\x7c\x20\x41\x80\x56\xa0\xfa\xf2\xbb\x29\xe8\x99\xb0\x6c\xd4\xf4\x8b\x0b\xb6\x77\xf2\x0c\xaa\x81\x71\x93\xf1\x34\xda\x94\x66\x37\x61\xb8\xd0\x79\x32\x77\x45\xaa\x6e\x29\x09\xdd\x08\xad\xae\xd2\x8c\xcd\xa7\xb1\xd9\x48\xb8\x19\x88\x9e\x9d\x34\xac\xd1\xb9\xb9\x74\x5a\xab\x93\xb4\xae\xf3\x82\xfd\xac\x0f\x47\x94\xc4\xfb\x31\x5e\x01\xa7\x20\x41\x20\xcd\x34\xca\x61\x54\x58\xf3\x2a\x06\xb9\x9b\x01\x19\xa0\x07\xc7\x03\x1d\x3d\xce\x5f\xd8\x38\xcd\xc9\xa1\x35\x67\x21\x4a\x8c\xe0\x80\x92\xe8\x47\x7f\xa0\x6c\x9b\xed\x8c\xc2\xa0\x46\xe1\x00\xbf\xc1\xd5\x24\xf4\x75\x18\x32\x83\xf0\x81\x38\x9d\xad\x5b\x31\x26\x85\xe4\x38\xaa\x7b\xf7\xc8\xee\x9c\xd5\x6e\x66\x15\xd1\xaa\x3a\xc2\x65\xe3\xd3\x40\xea\x2a\x7b\xdb\x48\x8b\x43\xc4\xdc\xe8\x5c\xab\x37\x7b\xe2\x46\xf7\x62\x1a\xc1\xb8\x41\x50\x83\x00\x2a\xbd\x1d\xa4\xb7\x63\xa6\x94\x5f\xf1\xc6\xa5\xbe\x48\x4a\xe8\x06\x7d\x20\xf2\x2a\x52\x3e\xfa\x3e\x53\xa2\x37\x75\x01\xa1\x77\xea\x39\x49\x0e\xe5\xa9\xf7\x90\x1a\x9a\x20\x92\xf1\x9d\x3b\x04\x9f\x94\xa9\x12\x68\x2b\x87\x1e\x0b\xf8\xb5\x2d\x2f\x7b\x05\x5b\xd6\x05\xdb\xd1\x9e\x1d\xc2\x7c\x45\x24\xc7\x7c\x87\xfe\x77\x79\x75\x39\xfd\xff\xd9\xc5\xa7\xfc\x54\xa3\x18\x23\x11\x7b\x5b\x84\x05\xd2\x91\x07\xc3\x5d\x58\xc6\xf5\xe9\x57\x7d\x1c\x92\x40\xd7\x2c\xc3\x31\x19\x30\xac\x28\x99\x80\x6b\x77\xf4\x06\xde\xcc\xe3\x90\xfc\x80\x43\x12\x0c\x7b\x92\xef\x79\x5f\xa8\xf5\x41\x28\xb1\x9d\xe1\x08\x7b\x44\x5a\x47\xae\x40\xb1\x01\x8b\x9d\x73\xbe\x64\x9a\x6b\xce\x7a\xcd\x94\x50\x21\x31\xf5\xf4\x8d\xf3\x41\xb5\xf0\xac\xfd\xbe\x56\x1f\x2a\xc4\x8f\x4b\xf2\xc5\x2a\x91\x46\xed\x84\x84\xf6\x6e\x3b\xf8\xb9\xae\x34\x52\x97\xa6\x75\x0d\x75\x2b\xaa\xa9\x44\x1b\x79\xbd\x30\x59\xa2\x0c\xc2\xf1\x72\x78\x0e\xc7\xe5\xf2\xc7\x7f\x92\x6d\x6c\x81\xf7\x7b\x16\xc4\x21\xb8\xa8\xbe\xc9\xf3\xde\x90\x0d\x5e\xed\x24\x74\xcb\xe4\x59\x5a\x15\xb8\xfe\xaf\xbf\x0d\xb5\xf9\xde\x5b\x6d\x9b\x1d\x69\x30\x77\x86\x79\x62\x98\x76\x66\xa9\x36\xda\xf8\x0a\x1e\xeb\x96\xa8\x71\x52\x54\x21\x58\x31\xb6\x83\x6e\x07\x30\x45\xef\x3f\x2e\x27\xb5\xfb\xda\xe8\xa7\xab\xf3\x2b\xf4\x33\x0e\x88\x9f\x27\x63\x68\x88\xa3\x08\x7c\xb4\x26\x90\xf8\x01\x3e\x92\x5b\xce\x1e\x14\x11\xe0\x9c\xb9\x9f\xa1\x39\x4e\xef\x65\x77\x01\x24\x27\x9e\x38\x63\x81\xda\x83\x94\x8f\x4f\x5a\xfc\x85\x0d\xc7\x34\x0e\x30\x57\xd0\x70\x76\x1b\x8a\x8d\x86\xb4\x95\x61\xc2\xff\x9f\xef\x2e\x74\x9a\x9e\x45\x69\x18\x06\x33\x08\x74\x75\x90\x69\xb5\x4b\x22\x4f\x1e\xd6\x2e\x7c\x76\x67\x57\xdf\xa5\xd7\x17\x96\xf7\xd7\xde\x7d\xe6\x89\xcf\xdf\x6d\xa5\x8c\xc4\xdb\xe9\x54\xfd\x75\x82\x1f\xc4\x09\x0e\xf1\x17\x46\x4f\x3c\x16\x4e\x67\x7f\x5f\xea\x1a\x21\x3f\x64\x6d\xa6\x6a\x93\x20\xe4\xf4\xff\x04\xf0\x0f\x31\xf1\x61\x8a\x1f\xc4\x64\x0f\x81\x09\x16\x93\x74\x4c\x5e\x0e\xb0\x13\x85\xf4\x37\xce\x73\xa0\x6d\x18\xfb\xcb\xf9\x4f\xc4\xfa\xed\xe8\xd4\x20\xb9\xfd\x95\xff\x6c\x66\x65\xa7\xb2\x1c\xb6\xe8\x4f\x7f\xea\x67\x88\x53\x1c\x9d\x10\x6f\xc8\x13\x0f\x82\xf2\x64\xaf\x35\x3f\xd7\x86\xee\x6c\x7e\x7e\xdd\x71\x97\x56\x6c\x59\x56\xdf\x11\x37\x50\x07\x04\xf9\x96\x11\x78\x64\xbd\x43\x37\x5e\x2c\x24\x0b\xd1\xec\x62\x2e\x3e\x7f\x97\x94\xa5\x48\x7e\x9a\xe0\x90\x4c\x44\x1c\x45\x8c\xcb\xe9\x9b\x31\xba\xd5\x09\xf2\x89\x10\xe1\xed\x28\xfb\x4b\xfd\x8f\x71\x74\xab\xaf\xd8\x10\xef\x76\xd4\xc9\x71\xc9\x78\xd8\x4f\x3d\x6b\xff\x6a\xb2\xec\x19\x55\x93\x64\x8c\xfe\xe5\xf7\x98\xc9\xff\xce\x98\x4a\xfe\x2a\xfe\x9a\xfd\xc2\x78\xfa\x63\xc2\x64\xf2\xff\xae\xfb\xca\xe3\xec\x56\xc5\xa6\x69\xdd\x44\x0d\x2b\x90\xa5\xb0\x4e\x8d\x5a\xe7\xf5\xe7\x39\x6e\xa6\x9b\x80\xfc\x89\x84\x44\x26\x05\x5d\x92\x20\xa8\x06\x15\xf1\xd0\xec\x97\x7d\x6d\x17\x05\x87\xd4\xe8\x4f\x5f\x7f\x61\x14\x26\xf8\x01\x73\x98\x24\xe0\x49\x1e\x74\x2b\xf6\x92\x74\x5b\xab\xe8\xe2\xd2\x51\x5a\xe2\xa5\xc6\xad\xbd\xda\xcb\x8a\x49\x19\x00\x67\xde\x1d\x38\x9e\x72\xcb\xad\xce\xbb\x62\x53\x23\x71\x2f\xc0\x42\x10\xef\x13\xc3\xfe\x3b\x1c\x28\x3f\x9e\x5f\xe2\xf0\x79\x2a\x7b\x96\x1e\x50\x04\xa4\x03\xdc\xab\x94\x5f\x91\x9c\x5a\x52\x42\xce\xd7\xf6\x4d\xe5\x78\x4f\xbb\x4a\x3b\x13\xb7\x88\x53\x47\x34\xcf\x2f\x97\x07\x58\xe7\x9b\xb3\xc4\xd8\x61\xdf\xe7\x20\xf6\x38\xbe\x8f\xbc\x09\xcd\x77\x2e\xd3\xd7\xa9\xa5\x4c\xfb\x9c\xf8\x54\x4c\xd2\x26\x6f\x92\xe4\xa0\x72\xe5\xcf\x2f\x97\x28\x60\xec\xae\x5c\x9f\xa6\x5d\x1e\x35\x70\xbb\xf7\x7e\x3b\x3a\x2d\x8f\x40\xd7\xb3\x6a\xe7\xa8\xd5\x62\x0e\x11\x41\x83\x95\xb8\x8a\x24\x09\xc9\x17\xb0\x7a\x2f\x96\x88\x48\x49\x3e\x49\xb9\x46\x81\x6e\xde\xbf\x5b\xea\x80\x77\x48\xbe\x68\x47\xae\xd5\xfb\x7d\x7f\xf6\x6f\x75\xbf\x11\x56\x62\xc2\x32\xbe\x2a\xce\xad\x8b\xba\x32\x76\x9c\x1d\x59\x47\x2e\x6e\x47\xa7\xd5\x01\xda\x2d\xd5\x11\xa2\x93\xc3\x5c\xac\x31\x10\x5e\x70\x58\x93\xc7\xa3\x90\x1e\x3c\xa2\x9a\x11\x16\xe7\x44\x24\x17\x60\x9c\x6b\x7e\xed\x25\x6d\xa4\x61\xec\xee\x2e\x5e\x41\x00\xf2\xbd\x3e\x4a\x59\x2d\xcd\xd9\xd0\x57\x87\x52\x14\xa9\x89\x23\x5f\x00\xfd\x9a\x76\xf7\x6b\xba\x21\xcb\xcd\x9d\x97\xbe\x42\xe8\x66\x22\xb7\x30\x49\xdf\xeb\x58\x86\xaf\x66\xc7\x6c\x64\x73\xab\xa5\x98\xfa\xde\x63\x3e\x9c\xa6\x8f\xbe\x9f\xea\xbf\x52\xfe\xec\xf0\x7f\xf1\x81\xef\x05\xf3\xc5\x02\xb8\xc2\x4c\xbf\xf8\xf7\x3f\x4b\xec\x9c\xdd\x03\xe7\xc4\x87\x77\x59\x32\xf7\x8c\x85\x21\xee\x5a\x96\xb3\x84\xc3\xab\x94\x24\xfa\x35\xd9\x67\xff\xfa\x57\x81\xf2\x5c\x71\xa4\xdc\x8a\xe4\xf5\x4e\xe0\xce\x89\x26\x78\x4d\x28\xa7\x70\xb5\xd1\x37\x0e\x38\xe2\xb5\xb1\x3e\x4b\x17\x10\xf4\xd9\x2f\xf0\xd1\x0a\xd6\x8c\x43\x65\x84\xb9\x9d\x4c\x4a\xcc\x40\xed\xba\xa1\x8b\x4c\x7b\x76\x61\x11\xeb\x61\x39\x98\x12\x63\xef\xf5\x12\x8f\x6e\xb2\x23\xd8\x7b\x67\xcc\xea\x21\xc6\x02\x26\xe9\xeb\x93\xf4\x14\xdc\x64\xcd\xf8\x44\x9b\x6c\x1c\xec\x2b\x4f\xbe\xd1\x9e\x59\xfe\x67\x27\x81\xa5\x7c\xb5\x3a\x8c\xce\xcc\xdc\x8e\x4e\xeb\x63\xd4\x3e\x64\x03\x93\x8e\x09\xab\xe2\xf1\x7f\xc7\x4b\x20\xfb\xdc\xd5\x07\xcb\x6d\xa6\x7e\x69\xb0\x26\x5d\x67\xe7\x29\x40\x20\x21\xb6\x59\xb5\xbc\xe4\x74\x28\x11\x3d\x15\xe5\x4c\xd4\x38\xc8\x97\x9c\xa0\x93\xd8\x74\x29\xf1\xe5\x70\xcf\x37\x20\x35\x6e\xfe\xcc\x0a\x58\x6e\x5b\xf3\x84\xd9\x64\x8f\x3c\xf0\xc6\xdc\x89\xb4\x51\x82\x49\x2a\x31\x2d\x9f\xda\xbe\xef\x6b\xa0\x31\xbf\x5a\x58\xb7\xf6\x8d\x3e\x4a\xd2\xfc\x63\x28\x3e\xc2\x6e\x7e\xee\x5c\xbc\xa2\x46\xc1\x61\x43\xd4\xd0\xfa\x45\xe4\xa8\x6b\x5c\x3b\x6c\xa8\xf6\xad\x5f\x55\xa8\x74\xcd\x70\xf7\x4e\x78\x9b\x77\x69\xf6\xad\xa7\x6d\xb7\xeb\x9a\xec\xae\xa6\xab\x1b\x73\xdb\x95\x85\xaf\x21\xa8\x62\xf0\xc9\x0d\x2e\x7e\x5b\x1c\xdb\x16\x71\x31\x23\xd2\xac\x71\x33\xf6\x1b\xa6\xb5\x7d\xba\x99\xe7\xb1\x7d\xf7\x53\xdf\xd5\xd5\x57\x13\x97\x28\x6a\x83\x15\xaf\xf8\x0f\x95\x30\x8a\x2d\xfe\xdb\xe6\xb3\xbb\x6c\x62\xcc\xf1\xca\xe6\x00\x40\xfa\x70\x90\x9a\xc3\xa5\xb3\xa2\x85\x92\x1e\x72\x8b\xa5\xbe\x61\x9a\xc7\xc5\xf5\x49\xd0\xba\xb3\xe3\x58\x7e\xb8\x77\x3f\xba\x9b\x5a\x0a\xef\x9d\x39\x0e\xdf\xf2\x29\x9a\x99\x1f\x12\x7a\x96\x7d\x2b\xa5\xd7\xca\x93\xdd\xf8\x18\x3c\x0a\x93\x57\x6a\xc2\x74\x87\x6e\x8a\x38\xcb\x6f\x99\xec\xa3\x99\xfb\xa4\xf1\xb4\xf8\xe6\x84\x89\xd2\xdf\xd3\xd7\x85\x4e\x26\x6c\x3d\xc9\x28\x75\x0b\xdb\x94\x58\xab\x07\x35\x0f\x65\xe6\x76\x74\x6a\x1c\x6e\x25\xb8\xd3\x69\x2d\x31\xea\xdb\xa4\xc6\x01\xe7\x92\xde\x81\x96\x70\xae\xdc\xf9\x22\x52\xd1\x0a\x0b\xf0\xd1\xbe\x4a\xbd\xfb\xf9\xee\x03\xba\x30\xcf\x20\xc7\x6a\xde\xcf\xba\xe4\xeb\x7e\x11\xd7\xc7\xfb\x3b\x5f\xde\x75\x0c\xf5\xf6\xba\x18\xdc\x81\xf6\xd1\xe2\xea\xfd\x8a\x7e\x77\xeb\x4b\xf9\xfe\x33\xdf\x67\x74\x91\x9d\x69\xef\x9c\x75\x28\x37\xef\x39\xe3\x9b\xaa\x95\x1a\x70\xd2\xa0\xe6\x26\x2d\x75\x10\x72\xa3\x8c\x06\x34\x3b\xb6\x92\xde\xfb\xe3\x2e\xdd\x6c\x4c\x3b\x3d\xab\x41\xb1\xe1\xc0\x6e\x5d\x82\xd5\x9c\x6e\x78\xdf\xaf\x40\xe0\x28\xba\x80\x7a\xbc\xa7\x4b\xdb\x05\x87\x7b\x02\x0f\xfd\x48\xc4\x92\x2d\x3d\x1c\xf4\x74\x25\x3c\xe0\x32\xb9\xdb\xd1\xb3\xbd\xf5\xa3\x60\x4e\xcd\x61\xd5\x4f\xe8\xb0\xee\xd9\xee\x51\x02\xa7\x38\x68\xc8\xc7\x37\xb6\x5f\x0b\x6b\x86\xb0\xb1\x1d\x09\xf1\x06\xde\xc5\x24\xf0\x7b\xca\xf9\xf1\xda\x5e\xe0\xf2\xc0\x6f\x1d\x94\x78\x33\x23\xcb\x22\x41\x0b\x8e\x0c\x93\xc3\x8e\xf9\x0a\x18\x2a\xb2\xae\xa8\x7c\x6c\x9c\xb5\x55\x31\x99\xe1\x79\x0c\x6b\xa7\x4c\x4d\xef\x8b\x5c\x66\x22\x16\xbb\xd6\x92\xf0\xb5\x1c\x21\x2c\x46\x26\x0c\xf6\xde\x66\x11\xcb\xcd\x9e\x93\xb3\xa5\x76\xe5\x9c\xd8\xef\x33\xd3\x38\x5c\xd9\x02\x6e\x8c\x9e\x83\xda\xee\xbe\xc3\x02\x0e\x3a\x31\x92\x11\x5a\x00\xf7\x80\x4a\xbc\x81\xd9\x8a\xdd\xc3\xc1\x74\x45\xc4\x64\x5a\x71\x88\x30\xba\x94\x1c\x4b\xd8\xf4\xfb\xa4\x4c\xc4\x64\x06\x99\x05\x63\xf5\x1c\xb4\x9d\x9f\x6e\xa6\xa3\x04\x14\x93\x9e\xda\xe4\xdf\x51\xac\x8d\x63\x6c\x17\xe5\x80\x36\xc0\xbc\x0b\xba\x51\x1d\xef\x73\x82\x79\x1e\x4e\xfd\x3c\xc9\x7f\x9e\xba\x9f\x53\x6f\xea\xac\x96\x60\xab\xf4\x72\x3b\x3a\x2d\xb3\x63\x38\x4d\x5e\x4c\x65\x39\xef\xc4\xe6\xe7\xcf\x32\xe7\x90\x30\x07\xa2\x58\xc8\x30\x0b\x73\xa2\xf4\x6e\x72\x9a\xa4\xed\x97\x2f\xeb\xd5\x81\x75\xc3\xf2\x89\x79\x38\x38\x24\xff\x9b\x7e\x3d\x05\x57\x78\x40\x0a\xf6\x41\xfe\x51\x95\x43\x86\xda\x93\x76\x41\xaf\x92\xc7\x96\xcc\xab\x12\xc1\x52\x97\x61\x1b\x40\x06\x49\x1d\x94\x12\xa7\x69\x51\x40\x1c\x32\xba\xd1\x8b\xed\xbe\x78\x1d\x22\xb4\xf7\x69\x80\xe1\x3b\xb4\x4b\xab\x93\x2d\xde\x4f\x4d\xb3\x90\x8d\xe8\x1b\xc4\x20\x7a\x8c\x4a\xce\x02\x51\x9b\x0b\x0d\xe9\x69\x97\x70\x9f\x2b\x4d\x8b\x45\x5b\xfe\xe8\xb6\xfb\x0b\x58\xbf\x9d\x57\x52\x00\xef\x23\xf4\x5a\xa1\xf3\xc6\x7d\xd3\x77\x39\x81\x05\x96\xd6\xbd\x57\xa3\x8f\xc0\x62\xee\x95\xcb\x1f\xce\xff\xbc\x33\x3e\x7d\x41\xaf\xb5\x67\x15\x8b\x51\x5b\x56\x2d\xb4\x0b\x67\xe0\x3d\x84\x36\x22\xfb\x83\x17\xe5\x15\x5e\xa7\x20\x0e\x89\x9f\x74\xa1\x5e\x9a\x42\x57\xf5\x3a\x2c\xf6\x3b\x66\x2c\x0c\x89\xcc\x5a\x5c\x60\x4a\xd6\x20\xea\x27\x2b\x9c\x26\x94\x4e\xac\x0d\x1a\x17\x3c\xce\xf7\xa7\x38\x60\xff\x8a\xda\x2f\xff\x1c\x70\x7f\x5e\x59\xe6\x1f\x21\xa8\x9d\x9a\x1e\x68\xab\x6f\xd3\x56\x4d\x09\x46\x19\x9a\xf8\x34\x89\x65\x90\x59\xd2\xa5\x96\x8c\x42\x7a\x56\x7a\x27\xaf\x82\x76\x07\x10\x95\x4a\xe7\x25\x77\x96\xa1\x52\x48\x46\x2d\xcd\x62\x47\xbd\xe3\x54\xb9\x19\x86\xb3\xd2\xec\x34\x54\x53\xb5\x4d\x4e\x16\xcb\x28\x96\x0e\x0b\x44\x57\xfc\xdf\x93\x61\x3e\x89\x53\xb3\xb8\x4f\x7c\x7d\x34\xed\xd4\x34\xb6\xb1\x51\x8c\x43\x43\xdb\x07\x89\x49\x90\x56\x3f\xfa\x3d\x26\xde\x9d\x90\x98\xcb\xac\x92\x6c\x5e\x28\x09\xd4\x1b\x55\xc8\x60\x3f\xc7\xd8\x00\x15\x9b\x8e\xc5\x4a\x09\xbc\xd7\xe5\xb2\x5c\xf6\xea\x62\x1c\x53\x7b\x48\xb9\x17\xc0\x20\xc4\x64\xd8\xd5\x65\x1d\xc4\x8f\x83\x4f\xae\x08\xcb\xed\x33\xf0\xc2\x8a\x1c\x25\xc7\x88\x96\xcb\x1f\xdd\xbc\xcd\x6e\xe3\x8d\xf9\xb0\x4a\x89\x85\x3d\xc2\x7e\x24\x2b\xa2\x86\x30\xae\x61\xb7\xa6\x53\x13\x72\xaa\x8c\xd7\xf0\xda\xa8\x87\x27\x5f\x68\xab\x55\xd8\xf6\x77\xf8\x92\x2a\x6e\xc7\x59\x44\xdb\x7b\x2d\xd9\x98\x65\xed\xdb\xf8\xad\x71\xf2\x3b\xd8\x19\xbf\x3a\x68\x33\x4f\xe9\xfb\x47\x39\x81\x68\xe3\xe5\xd0\x5a\xb4\xf5\xf8\xe1\xc7\x8b\x25\x82\x5c\x4a\x59\x01\xe2\xee\x75\x64\xba\x51\x2f\xe9\xaa\x47\xe1\x89\x82\x32\x2d\xf3\xba\x16\x23\xa2\x68\xbe\xc8\xae\x9e\x2a\xaf\x4a\x7f\xb0\x24\xfb\xdc\xa8\xf3\x70\x5b\xc8\xbc\xca\x54\xfd\xed\xd5\xb7\x57\xff\x08\x00\x00\xff\xff\xf0\x35\x43\x23\xe5\x8e\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xee, 0x1f, 0x72, 0x2b, 0x3c, 0x49, 0x37, 0xfd, 0xae, 0x68, 0x1b, 0xd3, 0x5b, 0x8c, 0x71, 0xa3, 0xeb, 0xe5, 0x6d, 0x87, 0x8b, 0xe9, 0x4f, 0x84, 0xa1, 0x1b, 0x10, 0xe6, 0xba, 0x7, 0xdc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
