// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet-config.json
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x6b\xdb\x30\x14\x85\xdf\xfd\x2b\x04\xed\xc3\x06\x91\xdd\xa6\x59\x1f\x0a\x7e\xf0\x16\xb7\x14\xbc\xb6\xd4\x2d\x1b\x6c\x23\xdc\x48\x37\xe1\x2e\xf2\x95\x91\xe4\xa4\x5d\xc8\x7f\x1f\x8e\xed\x2e\xa3\x65\xec\xcd\xd6\x77\x7d\x8e\xee\x39\x3e\x12\xb8\xf2\x2a\x18\xe9\x6b\x54\xb4\x20\x25\xfc\xb3\x0f\x58\x69\xa1\x9d\xad\x25\xb1\x68\x98\x82\x58\x58\x27\x56\xcd\x1c\x0d\x86\xd1\xfe\x25\xab\xe0\x97\x65\x51\x10\x37\x4f\x62\x2c\xde\x65\xc5\xf8\x7d\x14\x7d\x2b\xd1\xad\x49\xe1\x8f\xe8\x48\x14\x56\x81\x11\x15\x06\xd0\x10\x40\xd4\xe0\xa0\xc2\x80\xce\x5f\x88\xfb\xfc\xea\xfa\xf6\x66\x24\xb2\x2f\xe5\x6c\x9a\x5f\x66\x8f\xc5\xc3\xac\x3b\x8b\x72\x5e\x93\xb3\x5c\x21\x87\x4b\x32\x98\x26\x18\x54\xd2\x5d\x31\x19\xb4\x62\xe4\x75\x74\x24\xae\x8c\x9d\x83\x11\xc0\x5a\xf8\x00\x81\xd4\x5f\x1e\x9f\xb3\xaf\xb3\xbb\xdb\x69\x39\x12\x9f\x8a\xc7\xf2\x21\xbf\x9f\x4d\x6f\xca\x91\xb8\xb9\x9d\xe6\xb3\x22\xfb\x98\x17\xe5\x3f\xbd\xfa\x65\x7b\xab\x6e\x17\xb6\x2c\xdf\x70\xda\x4b\x5e\xdf\xfd\x97\x9c\x69\x85\xf6\xa2\x51\xfe\x84\xaa\x0c\xe0\x42\x7a\xf0\x98\x34\xde\x25\x73\xe2\xe1\x03\xf1\x3d\x12\x42\x4a\xb6\x1a\x25\xd5\xe9\xf1\xb6\x37\xdb\xf5\x40\x99\xc6\x07\x74\x52\xb3\x4f\x8f\xb7\x07\x9b\x0e\x03\x15\x3c\xc9\xda\xea\x96\x0e\x89\xec\x0e\x45\x0d\xcc\xd1\xf8\x41\xb8\x0b\x66\x18\x00\x63\xec\x46\xd6\x8e\xd6\x64\x70\x89\x3a\x0d\xae\xc1\x9e\xd5\x56\x4b\xe2\x85\x03\xa9\x2c\x07\x20\x46\x27\xa9\x82\x25\xa6\xe7\x27\xe3\xc9\xc9\xe9\xe9\xe4\x6c\xf2\x61\x1c\xeb\x95\x8b\x51\xb9\xf8\x78\xfb\xba\xeb\x5d\x0c\xfb\x9f\x08\x36\x3e\x56\xb6\x6a\xa3\x4a\x6a\x68\x3c\x4a\xa8\xf4\xf9\xe4\xe2\x2c\x3e\x7d\xd9\xd2\x36\x5a\xd6\xce\xae\x49\xa3\x4b\x61\xe3\x07\xc0\x24\xe7\xc4\x52\x93\x4b\x13\x5b\x87\x44\x31\xb5\xf1\x1d\x60\x65\x79\xd1\xf1\xb6\x8e\x96\x33\x86\x58\x0f\x13\x2f\x97\x77\x0d\x07\xaa\x30\xd5\x56\xad\xd0\x0d\x11\x61\xd8\x58\xb7\x92\xb5\x69\x96\xc4\xa9\x62\xea\x81\xc3\x25\xed\x83\x6f\x43\x3c\xcc\xa5\xed\xad\xb5\xa4\xe5\xab\xfe\xbb\xe3\xf8\x19\x2a\xf3\xc7\xfd\xad\x41\x83\xa1\x47\xf1\x4f\x6f\x39\xfa\x1d\x00\x00\xff\xff\x8a\xde\x69\x62\xa4\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 932, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x0e\xc2\x30\x0c\x46\xe1\x3d\xa7\x30\x85\x01\x86\x34\x27\x80\x09\x06\x16\xe0\x06\xc8\x49\x7f\x29\x55\x9d\x44\xaa\x5d\x24\x6e\xcf\x82\xaa\xae\xdf\xd3\xdb\xef\x42\x1c\x6b\xd0\x4c\x1e\x8b\x73\x48\xb9\x51\xf7\x78\x5e\x6f\xef\xfb\xeb\x7c\x38\xe6\xa6\x56\xb9\x80\xfc\x78\xea\xe8\x42\x01\x96\x02\x26\x4d\x26\x61\x5a\x22\x04\xd6\x4b\x4b\x2c\x3d\xea\xc7\x39\xfd\xaa\xa1\x24\x13\x1a\x18\xa5\x55\x3f\x43\x1a\x0f\x1b\x47\xe5\x28\xa0\xff\xbb\x09\x6a\x3c\xdb\xea\xbf\x00\x00\x00\xff\xff\xef\x6e\xff\x33\x97\x00\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 151, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x51\x6f\xdb\x46\x0c\xc7\xdf\xf5\x29\x38\x37\xc0\x1a\xa0\x27\x27\x69\xd6\x87\x02\x1a\xe6\xd5\xde\x50\xcc\x8b\x8b\x24\x45\x07\x0c\x83\x41\xdd\x51\xd6\xc1\xa7\xa3\x70\x47\x59\x4b\x83\x7c\xf7\xe1\x2c\xcb\x75\x02\x6c\x83\x5f\x7c\xfc\xff\x48\xf1\x48\x1e\x5f\x7d\x37\x2d\xad\x9f\x96\x18\x6b\x50\xd4\x65\x19\xe9\x9a\x61\x72\xb3\x9a\x2f\xd6\x1f\x3f\x15\x67\xaf\x6b\x8e\xe2\xb1\x21\x50\xf6\x7c\x02\x3f\xc2\x94\x44\x4f\x69\x1b\xb5\xb8\xe9\xb6\x2b\xc9\x91\xe4\x8e\x35\xba\x9c\xfc\x2e\xcb\xa2\xc7\x16\xd0\x59\x8c\x70\x50\x15\x6d\x63\x7e\xf8\x3f\xda\x5e\x62\x5a\xdc\x11\xd3\xe2\x46\xdb\x80\x45\xe1\xf6\x34\x58\x16\x1f\xa2\x50\x93\xb8\x40\x91\x44\x55\x68\x1d\x99\x2c\x7b\x9d\x01\xbc\x82\xfb\xd5\x7c\xf5\x1e\xa4\xa6\x48\x10\x6b\xee\x9c\x81\x92\xc0\x31\x6f\xc9\x00\x0a\xd0\x8e\xc2\x03\x88\x6d\x68\x0c\x0a\x51\x30\x48\x84\xae\x7d\xb3\x8f\xd0\xd7\x56\xd7\x60\x23\xf4\x35\x0a\xf4\x04\x86\xc1\x7a\x98\x2d\xaf\xe0\xf5\x51\x2b\x31\x92\x01\xf6\xd0\x3a\xb4\x1e\x86\x9c\xcc\x10\x00\xbd\x81\x86\xd0\x0b\x08\xa7\x8f\xb7\x1c\x04\x4b\x47\xe9\xd8\x70\x94\x91\x06\x63\xa3\x04\x8e\xe7\x6f\xa0\xec\x04\xac\x7c\x1f\xf7\xfe\x9e\x05\xb4\x23\x0c\x50\x73\x9f\x9c\x1c\xa3\x39\x5c\xa9\x0a\xdc\x7c\x4b\x3c\xd5\xa7\xb7\x52\x73\x27\x50\xe3\xce\xfa\xcd\x3e\x80\x30\xe8\x2e\x0a\x37\x36\x52\xf2\x1b\x40\x2b\x91\x5c\x95\x01\x44\xee\x82\xa6\xff\x69\xe5\x7f\x62\xff\x0a\x34\x24\x68\x50\x70\x98\x06\x80\xca\xe1\x26\x16\xa9\x33\x00\x13\x34\x26\x50\x8c\xc5\x45\xbe\xff\x4d\x06\xab\x67\x43\xca\xb6\xc5\xd9\xe3\x61\xea\x9e\x0e\x82\x76\x5d\x14\x0a\xca\xf8\x58\x9c\x3d\x7e\x58\x7e\xbe\xbb\x5f\xdc\xae\xe7\x37\x77\x23\xd0\xe0\xdf\xaa\x65\x93\xd4\xdf\x67\x7f\xac\x3f\xad\xe6\x47\x69\x1f\xd4\x61\x49\x2e\x8e\x81\x97\xb3\x9f\x17\xcb\x23\x80\x9d\xd4\xe4\xc5\x6a\x14\xcb\x5e\x09\x6f\xc9\xab\x9e\xca\x9a\x79\x5b\x48\xe8\xe8\x84\xe3\x60\xbf\x0e\x58\xc3\x86\x8a\x2f\x03\x35\x02\xce\x71\xaf\xda\x60\x77\xd6\xd1\x86\xcc\xa9\x73\xcb\x46\x59\x5f\x05\x54\x9a\xbd\xa0\xf5\x14\x94\x6d\x70\x43\xc5\xbb\x8b\xab\xeb\x8b\xcb\xcb\xeb\xb7\xd7\x3f\x5c\xe5\x66\x1b\x72\xd2\x21\x3f\x7b\x9c\x7d\xb9\x5b\xcf\x17\xbf\xcc\x3e\x2f\xef\xd7\xb7\x8b\x5f\x3f\xae\x6e\x9e\x72\x6c\xf0\x2b\x7b\xec\x63\xae\xb9\x49\x75\x9e\xb6\xd8\x45\x52\xd8\x98\x77\xd7\xef\xdf\xe6\x97\xc7\x72\x71\x67\x54\x1b\x78\x67\x0d\x85\x02\xfb\xf8\xb2\x8e\xdc\xa0\xf5\xc5\xe1\x38\xb4\x7a\x44\xbc\x55\xa5\xf5\xca\xd8\x50\x4c\xb9\x95\xa9\xf6\x36\x2d\x86\x13\x59\xb3\xaf\x06\x3d\xb5\x3b\xe9\x9e\x24\x37\x23\x71\xbc\x5f\xe8\x7c\x7a\x5c\x85\x61\xbd\xa5\x30\xb6\x83\xa4\xe7\xb0\x55\xad\xeb\x36\x29\x05\x6f\x47\xbf\x4d\xe0\xae\x55\x26\xd8\x1d\x85\x62\x38\x55\x63\xe2\x81\x36\x76\x9f\x79\xea\xe6\x69\x5d\xf7\xfb\x81\x7d\x65\x37\xc5\xcb\xe9\x1c\xcc\xf9\x03\x36\xe3\xdd\x2a\x42\xe9\x02\xa9\x0d\x0a\xc5\xe2\x96\x05\x85\x7e\x1b\xe6\xf8\x8e\xc2\x8e\xc2\x07\x0a\x62\xab\x34\x09\xcf\x3e\x82\x9e\xfd\x43\xc3\x5d\x54\x69\x06\x8a\x0a\x5d\xa4\x63\x45\x2d\x79\x51\x1a\x55\x65\x1d\x3d\xcb\x41\x63\xae\x83\x24\xee\x3c\xcd\xff\xb0\xc1\xbe\x6d\xbe\xb4\xc0\x60\x72\xf6\xb8\x7f\x17\x7f\xfe\xf4\xd7\xd3\x24\x3b\xcf\xc6\x3d\x87\xe1\x19\x97\xfd\x13\x00\x00\xff\xff\xe6\xbd\xd9\x7d\x9d\x05\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 1437, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6f\xf2\x30\x10\x84\xef\xfc\x8a\xc8\x67\x94\x84\xf7\x15\x52\xcb\x8d\x82\xda\x43\x39\x15\xda\x9e\x1d\x67\x03\x56\x1c\x2f\x5a\xaf\xe9\x97\xf8\xef\x95\x3f\x5a\x0a\x3d\x54\x39\x79\xf4\xec\x78\x36\xe3\x8f\x51\x51\x88\x5e\xdb\x56\xcc\x0a\x71\xef\x1b\x30\xc0\x0b\xb4\x9d\xde\x7a\x92\xac\xd1\x8a\x71\x20\xe4\x5e\x3f\x01\xb9\x70\x9e\x15\xa2\x4f\x5c\xa9\x22\x58\xf6\x57\xae\xd4\x58\x1d\x26\x0d\xb0\x9c\xe4\x81\xb6\x25\x70\x2e\xd0\x75\x19\xbf\xac\x7b\xde\x81\x65\xad\x92\xf9\xac\x08\x01\x82\x6e\xd1\xbe\x0d\xe8\xdd\xb7\x54\x14\x02\xac\x6c\x0c\x84\x68\x9d\x34\x0e\xa2\x7c\x1c\xa7\x81\x17\x68\x76\x88\xfd\x4f\x5c\x49\xb5\x83\xcd\x66\x15\x2e\xfd\x37\xd4\x4e\x8c\x7f\x1b\x31\xf9\x73\x9f\xd7\x69\x7d\x7d\x66\x62\x34\x58\x5e\xcc\x6f\xb5\x81\x60\x54\x01\xab\x0a\x7a\xa7\xd8\x54\x4a\x96\x8a\x58\xa4\xf9\x51\xf6\x88\x2b\x21\xe9\xf7\x8b\x8d\x06\x6c\xa3\xc1\x73\x0e\xfa\x47\xee\x79\x76\x81\x36\x6f\x30\x3d\xdb\x20\x32\x8f\x56\x5e\x52\xff\x6b\x77\x99\x47\x19\xef\x18\x68\x89\x83\xd4\xb1\xae\x2c\x94\x06\x95\x34\xa9\x06\xb5\x25\xf4\xfb\x25\xe9\x03\x50\x44\xe2\xb9\x4b\x17\x8a\x0e\x24\x7b\x82\x3b\xc9\x70\xea\x43\x3c\x20\x4b\x86\xfc\x46\xd6\x40\x07\xa0\x05\x10\xeb\x2e\x94\x09\xa7\x7f\x9b\x52\xb8\x08\x6c\x56\xeb\x1b\x44\x76\x4c\x72\xff\x45\x1c\x3f\x03\x00\x00\xff\xff\xbb\x62\xda\x19\x74\x02\x00\x00")

func kubeletConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubeletConfigJson,
		"kubelet-config.json",
	)
}

func kubeletConfigJson() (*asset, error) {
	bytes, err := kubeletConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet-config.json", size: 628, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet-config.json": kubeletConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet-config.json": &bintree{kubeletConfigJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

