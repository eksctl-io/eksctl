// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/eksctl/pkg/outposts"
)

type FakeClusterToExtend struct {
	FindNodeGroupOutpostARNStub        func() (string, bool)
	findNodeGroupOutpostARNMutex       sync.RWMutex
	findNodeGroupOutpostARNArgsForCall []struct {
	}
	findNodeGroupOutpostARNReturns struct {
		result1 string
		result2 bool
	}
	findNodeGroupOutpostARNReturnsOnCall map[int]struct {
		result1 string
		result2 bool
	}
	IsControlPlaneOnOutpostsStub        func() bool
	isControlPlaneOnOutpostsMutex       sync.RWMutex
	isControlPlaneOnOutpostsArgsForCall []struct {
	}
	isControlPlaneOnOutpostsReturns struct {
		result1 bool
	}
	isControlPlaneOnOutpostsReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClusterToExtend) FindNodeGroupOutpostARN() (string, bool) {
	fake.findNodeGroupOutpostARNMutex.Lock()
	ret, specificReturn := fake.findNodeGroupOutpostARNReturnsOnCall[len(fake.findNodeGroupOutpostARNArgsForCall)]
	fake.findNodeGroupOutpostARNArgsForCall = append(fake.findNodeGroupOutpostARNArgsForCall, struct {
	}{})
	stub := fake.FindNodeGroupOutpostARNStub
	fakeReturns := fake.findNodeGroupOutpostARNReturns
	fake.recordInvocation("FindNodeGroupOutpostARN", []interface{}{})
	fake.findNodeGroupOutpostARNMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClusterToExtend) FindNodeGroupOutpostARNCallCount() int {
	fake.findNodeGroupOutpostARNMutex.RLock()
	defer fake.findNodeGroupOutpostARNMutex.RUnlock()
	return len(fake.findNodeGroupOutpostARNArgsForCall)
}

func (fake *FakeClusterToExtend) FindNodeGroupOutpostARNCalls(stub func() (string, bool)) {
	fake.findNodeGroupOutpostARNMutex.Lock()
	defer fake.findNodeGroupOutpostARNMutex.Unlock()
	fake.FindNodeGroupOutpostARNStub = stub
}

func (fake *FakeClusterToExtend) FindNodeGroupOutpostARNReturns(result1 string, result2 bool) {
	fake.findNodeGroupOutpostARNMutex.Lock()
	defer fake.findNodeGroupOutpostARNMutex.Unlock()
	fake.FindNodeGroupOutpostARNStub = nil
	fake.findNodeGroupOutpostARNReturns = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeClusterToExtend) FindNodeGroupOutpostARNReturnsOnCall(i int, result1 string, result2 bool) {
	fake.findNodeGroupOutpostARNMutex.Lock()
	defer fake.findNodeGroupOutpostARNMutex.Unlock()
	fake.FindNodeGroupOutpostARNStub = nil
	if fake.findNodeGroupOutpostARNReturnsOnCall == nil {
		fake.findNodeGroupOutpostARNReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
		})
	}
	fake.findNodeGroupOutpostARNReturnsOnCall[i] = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeClusterToExtend) IsControlPlaneOnOutposts() bool {
	fake.isControlPlaneOnOutpostsMutex.Lock()
	ret, specificReturn := fake.isControlPlaneOnOutpostsReturnsOnCall[len(fake.isControlPlaneOnOutpostsArgsForCall)]
	fake.isControlPlaneOnOutpostsArgsForCall = append(fake.isControlPlaneOnOutpostsArgsForCall, struct {
	}{})
	stub := fake.IsControlPlaneOnOutpostsStub
	fakeReturns := fake.isControlPlaneOnOutpostsReturns
	fake.recordInvocation("IsControlPlaneOnOutposts", []interface{}{})
	fake.isControlPlaneOnOutpostsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClusterToExtend) IsControlPlaneOnOutpostsCallCount() int {
	fake.isControlPlaneOnOutpostsMutex.RLock()
	defer fake.isControlPlaneOnOutpostsMutex.RUnlock()
	return len(fake.isControlPlaneOnOutpostsArgsForCall)
}

func (fake *FakeClusterToExtend) IsControlPlaneOnOutpostsCalls(stub func() bool) {
	fake.isControlPlaneOnOutpostsMutex.Lock()
	defer fake.isControlPlaneOnOutpostsMutex.Unlock()
	fake.IsControlPlaneOnOutpostsStub = stub
}

func (fake *FakeClusterToExtend) IsControlPlaneOnOutpostsReturns(result1 bool) {
	fake.isControlPlaneOnOutpostsMutex.Lock()
	defer fake.isControlPlaneOnOutpostsMutex.Unlock()
	fake.IsControlPlaneOnOutpostsStub = nil
	fake.isControlPlaneOnOutpostsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeClusterToExtend) IsControlPlaneOnOutpostsReturnsOnCall(i int, result1 bool) {
	fake.isControlPlaneOnOutpostsMutex.Lock()
	defer fake.isControlPlaneOnOutpostsMutex.Unlock()
	fake.IsControlPlaneOnOutpostsStub = nil
	if fake.isControlPlaneOnOutpostsReturnsOnCall == nil {
		fake.isControlPlaneOnOutpostsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isControlPlaneOnOutpostsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeClusterToExtend) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findNodeGroupOutpostARNMutex.RLock()
	defer fake.findNodeGroupOutpostARNMutex.RUnlock()
	fake.isControlPlaneOnOutpostsMutex.RLock()
	defer fake.isControlPlaneOnOutpostsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClusterToExtend) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ outposts.ClusterToExtend = new(FakeClusterToExtend)
