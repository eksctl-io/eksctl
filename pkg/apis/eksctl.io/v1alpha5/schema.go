// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (20.487kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x08\xee\x7b\x7a\xd1\x36\xbb\x40\xb7\x87\xde\x1c\x3b\x4d\x8d\x36\x89\x11\x17\x5d\x60\x17\x3d\x8c\xa8\xb1\xcc\x86\x22\xb5\x24\xe5\xd8\x5d\xf4\xbf\x2f\x64\x59\x89\x64\x89\xb2\x4c\x7d\xd8\xd9\xed\xa1\x40\x21\x6b\xc8\x67\x38\xdf\xc3\x51\xfe\x3e\x73\x9c\xc1\xff\x14\x59\x60\x00\x83\x77\xce\x60\xa1\x75\xf8\xee\xfc\xfc\x9b\x12\xfc\x55\xf2\xf4\xb5\x90\xfe\xb9\x27\x61\xae\x5f\xfd\xf2\xe6\x3c\x79\xf6\x62\xf0\x72\x43\x27\x71\x1e\x13\xbd\x38\xf7\x70\x4e\x39\xd5\x54\x70\x75\x3e\x62\x91\xd2\x28\x47\x82\xcf\xa9\x9f\xbc\x98\xf9\x79\xf0\xce\x89\xf7\x74\x9c\x41\xfa\x1e\x13\x91\xf7\x3b\x68\xb2\x78\xfc\xc9\x71\x06\xa1\x14\x21\x4a\x4d\x51\x65\x9e\x3a\xce\x80\x24\x44\x9f\x84\xef\x53\xee\xe7\x7e\xb3\x67\xe4\x89\xbe\x92\xa1\x47\xa0\xe9\xee\x8f\xa4\x3f\xb6\xff\xfb\x91\xae\x36\x00\xcf\xdb\x50\x03\x9b\x66\x39\x99\x03\x53\xf8\xf8\x92\x5e\x87\x18\x6f\x27\xdc\x6f\x48\x74\xb2\xdc\x76\x89\xe2\xe9\x14\x59\x36\x1e\x12\x72\x70\x19\x7e\x5e\x87\x3b\x3f\x38\xce\x80\x6a\x0c\x76\x1f\x66\x90\x28\x2d\x73\x8c\x65\x58\xca\xbd\x07\x52\xc2\xba\x17\xfe\x13\x2d\xaa\xc1\xf4\x3d\xe5\xde\x2e\xb7\x3b\x6c\xe5\x58\xc1\x15\x04\x21\xdb\xac\xf2\x67\xfe\x30\xf2\x5b\x67\x7e\xfb\x7a\x56\x72\x2a\x03\x08\xe9\x17\x94\x8a\x0a\xde\xce\xf6\x78\xaf\x88\x66\xaf\xa9\x38\x5f\xfe\x0a\x2c\x5c\xc0\x6f\xfb\x31\x04\xa8\xc1\x03\x0d\xbd\x1a\xc4\x35\x6a\x18\x94\xc2\xa1\x10\xf4\x8a\x64\x32\xbc\x2e\x07\xb2\x0c\x49\xaf\x40\xbe\x4c\x47\xe5\x40\xb8\xf0\xf0\x4a\x8a\x28\xac\x6b\x91\x0d\x61\x1a\x81\xde\xa4\x40\x0e\x37\xf2\xac\xbe\x01\x07\x1f\xbd\x9b\x53\xe1\xea\x7a\x07\x4f\x23\xe6\xe6\x20\x7d\xd0\x38\x95\x62\x4e\x59\x6d\x17\xda\x15\x6b\xef\x73\x68\x1a\x31\x06\x4b\xa0\x0c\x5c\xca\xa8\x5e\xff\x21\x78\x6f\xd1\xe1\x65\x36\x7e\x97\x44\xfb\x36\xce\xaf\x6e\xec\x2e\x87\xa5\x90\x48\xd4\xea\x92\x13\xb9\x0e\x75\x89\x2b\xef\x06\xdd\xac\xb0\x6d\x39\x3a\x0d\x3a\x2a\x08\xab\xd3\x03\x9b\x25\x5b\x96\xc2\xf1\xa9\xee\x07\xcb\x15\xd5\x7d\xe4\x18\x97\xdc\x0b\x05\xe5\x5a\xd5\x49\x33\x42\x49\x97\xa0\x71\x48\x08\xaa\x82\x48\xd2\xcd\x5c\x21\x18\x82\x41\x9a\x61\xe4\x32\x4a\x0e\x5d\xa0\x33\xee\xe3\xd8\x59\x83\x6f\x85\x72\x49\x09\xde\x09\x86\xc3\xbb\x9b\x3d\x99\x8e\xc1\xc6\x1e\x57\x98\xa2\x0c\xa8\x8a\x53\x26\x75\x21\x22\xee\x81\x5c\xdb\xac\x98\x3a\x6a\xe1\x5d\xae\x90\x44\xf1\x69\x34\xc0\x67\x58\xad\x25\xac\x0f\x54\x2f\x6e\x27\xe3\x91\x95\xca\x6c\x8f\x6e\x48\x88\x88\xf2\x7a\xea\x1c\x21\x22\x3d\x29\xce\x2c\x87\xeb\x84\xca\x86\xc9\xf0\x7a\x93\x9d\xd6\x50\x6c\x0e\x01\xda\x08\x34\xa6\x53\x21\x10\x2b\x62\x06\x2e\xb2\x82\x1c\x43\xd0\x1a\x25\x9f\x96\x23\xdd\xbc\xf2\xfa\xff\x85\x67\x95\x01\xfa\xe9\x90\xcd\x52\xc9\x9e\xe3\x2e\x50\xe0\x5c\x68\xc8\x57\xee\x27\x86\xb6\x4b\x25\xda\x51\xf0\x1a\xea\x74\x94\x4a\x2c\x55\xf7\x72\x11\x6a\x0d\x64\x31\x15\x8c\x92\xf5\xf0\xee\xe6\x08\x49\x5f\x16\x41\x6b\x5a\x64\x90\xb2\x96\x11\xb6\xa8\xff\x61\x3b\xde\xff\x08\x19\x5c\x41\x7b\xab\x52\x3a\x0d\xfe\x4f\xfb\x4e\x4f\xa8\x86\x95\xcb\x03\xd3\x8c\xce\x78\xd8\x8d\x72\x12\xff\x8a\xa8\x44\x2f\xd7\x56\x4a\x62\x5c\x46\xdc\x12\xfd\x4c\xb1\xf1\xf5\x65\x57\x31\x72\xbb\x8f\x05\xe5\xb2\x56\x47\xed\xa7\x2e\xa7\x7a\x70\x33\xfc\x5c\x47\x6f\xe3\x04\xf7\x01\xea\xbb\xb0\xce\xf0\xd6\x37\x35\xdc\x56\x67\x36\xaa\x40\xe2\x05\xe7\x94\xc4\x05\x5b\xa4\x17\x42\x52\xbd\x1e\x97\x04\xe7\xaa\x46\x6d\x80\x1e\xdd\x25\x70\x9c\x81\x4b\x39\xc8\xf5\x25\x27\xc2\x4b\xba\xf2\x03\x17\x14\xbe\x7d\x93\x0b\x94\xe5\xd1\x50\x5a\xa9\xb5\xd2\x40\xee\x6f\x0e\x31\xc4\xee\x84\x17\xb9\x1c\x0f\x2a\x97\x5b\xb3\xc7\xc6\x35\x8d\xb9\x31\x8a\xfa\x41\xc8\xfb\x36\x93\xe7\xa4\xd2\x6f\x8f\xf7\x4e\x71\x77\xa6\x2d\x5f\xa6\xa3\x3a\x9a\x42\xf7\xdd\xde\x94\x5b\x38\xf5\xa4\x5d\x33\x82\x44\xb1\x37\x48\xba\xc5\x36\x0b\x14\x6c\xc0\xe9\x3c\xa5\x4b\xed\xae\x14\x10\xae\xb4\x84\xd1\x64\x7c\x77\x84\x04\x5f\x2d\x40\x26\xdd\xf7\x59\xd3\x73\x85\x48\x8b\x21\x63\x22\xf6\xd9\x93\xe9\xf2\xad\x55\xbf\x84\x43\x4f\x1d\xca\x4c\xf4\x2d\x57\x4f\x73\x87\xb1\x7b\x54\x4f\xbb\x56\x78\xa7\xa4\x0f\xd9\xa7\xde\xb4\xef\x68\x76\xae\x48\xea\xa5\xc3\x9d\x27\xbf\x61\x3b\x6d\x49\x85\x0c\x89\x16\xf2\xd8\x5d\xbf\xfc\x21\xcf\xb6\xa8\x9a\xb9\x8d\x72\x1f\xda\xbd\xbf\xfa\x6f\x95\x08\x06\xc9\xd5\x32\x93\xa4\xc3\x79\x90\xad\xfc\x4b\x9b\xa2\xed\xcb\xe5\x8a\xd6\xea\x28\x4a\x0c\x45\x3f\x71\xe3\x2e\xde\xa9\x54\x34\x31\x32\xc8\x2b\x4d\x87\x38\x6e\xd3\xdd\x4a\xb1\xb8\x42\x68\xa5\x25\x84\x45\x7f\xdf\x21\xa6\xc2\xfd\x7b\x07\x0a\x51\x98\x62\x38\x91\x48\x06\x01\x7d\x0f\x01\x65\x56\xad\x4f\xca\x95\x06\x4e\x36\xe3\x68\x36\xf4\x1e\xaa\x98\xef\x11\x84\x40\xa8\x36\x42\xa0\x5c\xa3\x8f\x06\x95\x09\x28\x9f\xd1\xef\xc6\xed\xab\x69\x61\x65\x4d\xbb\x14\x2c\x0a\xd0\x9a\xfc\x04\xe6\x35\x94\x2a\x0e\x6a\x54\xcf\x15\xcd\x66\x1f\x9e\xa3\x7b\xcf\x26\x6e\x49\xcf\x62\x5b\x58\x97\x8c\x99\xd6\xaa\x41\x4e\x39\xc7\xc8\x9a\x67\xc9\xa8\x5e\xb5\x80\xf3\xc3\x76\x1d\x78\x41\xd4\x92\x12\x35\x12\x2c\x4e\x54\xf2\x4d\x60\x83\x1b\xf4\x25\xf0\x88\x41\x5c\x78\xd6\xf7\x86\x59\x22\x0b\xbf\x14\x24\x30\x9f\x6d\xd1\x94\xf6\x8d\x4e\xa3\x35\xd3\x01\x7f\x27\x18\x45\x9f\x5d\xf0\x4d\xe9\xd5\x98\xc6\xaf\xb9\x51\x7f\xb3\x71\x4f\xfe\xa6\x14\x43\x25\xdc\xa9\xc4\x39\x5d\x35\x61\xf8\xa0\x46\xfb\x69\x85\xec\x67\x12\x78\xda\x89\xb2\xb9\x3e\x6e\x4f\xed\xb5\xa7\x54\xe7\xca\xd0\x5a\x7b\xce\x39\x2b\x28\xbf\x2a\x02\x3b\x15\x4a\xdc\xd9\x74\x77\x01\x4f\x13\xfb\x40\x57\xdd\x86\x9a\x06\xf4\x3b\x1a\xe3\x5a\xa5\xce\x35\xcc\xea\x13\x72\x5b\x8f\x9c\x50\xdb\xba\xa7\x84\x7a\x3b\x6f\xdc\x88\xfd\x8f\x81\xfa\x88\xeb\xc9\xd8\x1e\xc5\xe4\x76\x3a\xb3\xd5\xee\xa9\xf0\xd4\x14\x65\x6c\x89\x56\x4b\x3c\x9b\x5a\x44\x43\xd9\xb5\xc1\x09\x02\x25\x0c\x94\xa2\xe4\x93\x00\xef\x02\x58\x1c\x42\x65\xac\xa4\x47\x89\x7f\xd2\x47\xbd\x71\xd0\xc7\x19\x77\x2b\xab\x99\x3b\x0e\x44\xa6\x9a\xbb\xb7\x0f\xb1\x0c\xd5\x61\xae\x6d\xa7\x35\x43\x29\xc8\x3d\xf6\x74\x39\xf7\x88\xe9\x22\xbb\xb5\x21\x19\xc1\x8b\xb4\xad\x38\x12\x41\x00\xdc\x3b\x82\xe2\x88\x25\x4a\x49\xbd\x02\x14\xab\xea\x2b\xb9\x03\x1c\xdf\x18\x7d\x6c\x15\xf5\x7d\xe4\x22\x43\x7d\xb9\xb9\x53\xde\xfd\x04\xd3\x69\xe4\x82\x3a\x9c\xdb\x3c\xdb\x79\xbb\xc5\x22\xf2\xa2\x5c\x7b\xf7\x7c\x82\x3b\xf4\x02\xca\x47\x82\xc7\x5e\x1c\x8d\xc5\xf0\x9e\x04\x57\x6b\xca\x5b\xcc\xe8\x9f\xe7\xf9\xd7\xfc\x4a\xe5\xf8\xb3\xce\x4f\x25\xe8\xe6\xbe\xc0\xf2\xd2\x37\x5d\xa5\xc1\xbd\x71\x76\x09\xdb\x74\x31\xbb\x46\x8b\xdf\xc1\x0c\x3d\x4f\xf0\x8d\x90\x8a\x7a\xdb\x43\x7c\xca\x6f\xdf\x97\xfa\x9a\x98\x36\x77\xdd\x02\xf0\xf1\x22\xa2\xcc\xb3\x74\x1d\x10\x69\x31\x23\xc0\x2c\xc9\x71\x15\x3b\x18\x60\x15\x21\xa4\x92\x9e\xa0\xd4\xc9\x8d\x96\x25\xfc\x30\xbc\xc6\x62\x2a\x55\x0f\xbb\x6b\xf7\x6d\xde\x5c\x19\xbb\x46\xd5\xfb\xcd\xed\xf6\x03\xe6\x4e\xb8\x2f\x6d\x3f\x25\x5c\xdd\x99\x67\x79\xab\x65\x63\xfc\x0c\xd7\x4c\xde\xa5\x79\xec\x69\x33\x1a\xfa\xb6\xd9\xee\xa6\xaa\xdf\xc0\xcd\x93\xf5\x1e\x21\xe2\xf2\x55\x52\xf3\x88\x04\x8f\x02\xd7\x54\xb7\x0a\x3e\xc6\x38\x23\xbc\x00\x85\x8d\xba\x4b\xe9\x42\x53\x94\x04\xb9\x06\x1f\x87\xae\x58\x62\xe3\x75\x55\x28\x74\x2a\xcd\xa9\x10\xc5\x1a\xbb\xf6\x2a\xdb\x21\x40\x2a\xf8\x4c\x4b\xd0\xe8\x1f\x73\x6a\x3d\xd7\xf2\xab\x9d\x87\x4c\xc6\x47\x50\xaf\x38\xc0\xce\x36\xf3\x98\x56\x9e\x21\x26\xff\x24\x08\xb0\x93\x70\x0c\x71\x61\x5b\xe7\xb8\x19\x13\x0f\x56\xec\x26\x43\x90\x1f\x71\x3d\x05\x6d\xf4\x85\x95\x53\x7e\xe9\x02\x8d\x88\x6d\x13\x34\x25\x22\x49\xf2\x43\xb7\x93\xde\x2a\xd7\xf6\xe5\x7e\x5b\x1c\x33\x32\xca\x7c\xd3\xc2\xb3\x39\xb3\x46\x33\x6a\xb1\x79\x7c\x40\x56\xe8\xaa\xf4\x69\x1d\x25\x73\xae\xc6\xaf\xf6\x37\xfa\x61\xc3\xa8\xc4\x25\xb5\xfd\x02\x4b\x44\x3a\x8c\xf4\x41\x16\xd5\xfe\x29\xdd\xe5\xc7\xe6\x8c\x47\x14\x49\x2b\x2d\x72\x25\x70\x73\xf6\x54\x69\xf4\xa0\x17\x47\x88\x0b\x73\x16\xad\x6c\x9d\x5c\xa4\xcc\x39\x7c\x15\x1d\x06\x40\xad\x4e\x77\x7b\x39\x38\x9b\x7d\x38\xd4\x35\xb7\xaf\x48\xc5\x3f\xd2\xb2\x37\x31\xbd\xc7\x75\x5c\xb5\x6f\x1f\xec\xcf\x48\xb7\xef\x1f\x81\xc7\xb3\xf8\xdf\x8f\xb3\x7f\x02\x00\x00\xff\xff\x53\xf5\xe2\xa5\x07\x50\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0xfe, 0x35, 0xbf, 0x8f, 0xec, 0x68, 0xd9, 0x31, 0xd4, 0x1e, 0x3e, 0x26, 0x99, 0xf5, 0x52, 0x52, 0x8d, 0x54, 0x25, 0xbd, 0x21, 0x79, 0x61, 0xb0, 0x14, 0x1a, 0x9c, 0x66, 0x19, 0x6a, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
