// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (36.479kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5d\x7b\x6f\xdb\xb8\xb2\xff\xbf\x9f\x82\xf0\x1e\xe0\x6c\x81\x38\x3e\xf7\x02\xf7\x81\x62\x6f\x00\x37\xe9\x76\x7d\xdb\x24\x46\xbd\x77\x0f\xee\xa6\x05\x96\x96\xc6\x36\x37\x12\xa9\x43\x52\x49\xdd\x6d\xbf\xfb\x01\xa9\x87\xf5\x20\x25\x52\x96\xbb\xe9\xf9\xab\x8d\x25\x0e\x87\x33\x3f\x0e\x87\x33\xe4\xe8\x8f\x67\x08\x4d\xfe\xc2\x61\x33\x79\x81\x26\xdf\xcd\x42\xd8\x10\x4a\x24\x61\x54\xcc\x2e\xa3\x54\x48\xe0\x97\x8c\x6e\xc8\x76\x72\xa6\x5e\x94\xfb\x04\xd4\x8b\x6c\xfd\x3b\x04\x32\xfb\xed\x2f\x22\xd8\x41\x8c\xd5\xcf\x3b\x29\x93\x17\xb3\xd9\xef\x82\xd1\x69\xf6\xeb\x94\xf1\xed\x2c\xe4\x78\x23\xa7\x7f\xfb\xaf\x59\xf6\xdb\x77\x59\xbb\x4a\x57\x93\x17\x48\xf1\x81\xd0\xa4\xe8\x33\x62\x69\xf8\x77\x2c\x83\x5d\xf9\x08\xa1\x49\xc2\x59\x02\x5c\x12\x10\x95\x5f\x11\x9a\x04\x59\xa3\xb7\x6c\xbb\x25\x74\x5b\x7b\xd6\x3b\xb8\xb2\xa3\xa2\x75\xd9\xf4\x4b\xfe\xbf\x2f\x67\x87\xfe\x61\x03\x9c\x43\x78\xcb\x43\xe0\x93\x17\xe8\xce\xca\x43\xfe\xe0\x43\xd9\x16\x87\xa1\xee\x19\x47\xcb\xea\x28\x36\x38\x12\x50\xbe\x14\x82\x08\x38\x49\xd4\x7b\x8a\xe3\x80\x51\x89\x09\x15\x28\xd0\x2a\x40\x09\xe6\x38\x06\x09\x5c\x20\x0e\x11\x96\x10\x22\xc9\x50\x45\x56\x25\xa1\x8f\x53\x42\x25\x44\x11\xf9\x7d\xba\x93\x71\x34\x3d\x96\xf0\xb3\x8a\x20\xda\x3a\x6a\x0b\xde\xaa\x2a\xa0\x78\x1d\xc1\xcf\xfb\xa4\xf1\x00\xa1\x09\x91\x10\x37\x7f\xac\x40\x4e\x48\xae\xfa\x38\xab\x3f\x0d\x61\x83\xd3\x48\xaa\x17\x26\x95\x27\x5f\xaa\xaf\x95\x24\x30\xe7\x78\x3f\x54\xc1\x55\xce\xc7\xd4\x2e\xf0\x6e\x2d\xe4\xc0\x42\x51\x2e\x64\x4f\x1d\xfb\x92\x37\x6a\x3a\xb3\x00\x15\xf5\x72\xf8\x47\x4a\x38\x84\x75\x11\xc5\x20\x71\x88\x25\x6e\xcb\xc7\x06\x07\x9c\x90\x5f\x80\x8b\x8c\xe5\x3f\x4c\x3a\x33\xa8\xbd\xa6\xf4\xda\x03\xf8\x88\xe3\x24\xd2\x9d\xdc\xd5\x71\x02\xf7\x22\x90\xd1\x39\x61\xb3\x87\x7f\xc3\x51\xb2\xc3\xff\x51\x85\xcb\x87\x67\x06\xe0\x4c\xf0\x03\x26\x11\x5e\x93\x88\xc8\xfd\xaf\x8c\x3e\x05\xc4\x9e\x55\x0d\x8e\xc1\x44\x22\x0f\x83\x67\x26\xbb\xc1\x7c\x8b\x25\x2c\x39\xdb\x90\xc8\x79\xc8\xe6\x2e\x7f\xac\xd1\x3a\x6a\xb4\x5b\x22\xdd\x86\xf9\x9a\x48\x33\x05\x82\x63\x2f\x41\x2d\xe6\xd7\x66\x42\xf7\x84\x86\x27\x46\x6b\x7d\xde\xf5\x02\x35\xc6\x14\x6f\x21\xbc\x61\x21\xbc\xe6\x2c\x4d\x8e\xd3\xda\x75\x83\x9a\xab\xde\x1a\x83\xae\x19\xa3\x15\x00\xba\x53\x14\xb7\x9a\x3f\x94\x0a\xbc\x85\x0f\xdf\xcf\xf4\xbf\x33\xcd\x3f\xa1\xdb\x29\x2d\xdf\x78\x8e\x30\x0d\xd1\x5d\x3e\x32\x74\x78\x50\x36\x82\x7b\x31\xcd\x1f\xeb\x76\x62\xf6\xbc\xce\x42\x8f\x7d\x54\x2c\xfd\x80\xd1\x8e\xc3\xe6\x7f\xde\x4f\xec\x9c\xbc\x9f\x5c\x34\x19\xff\x61\x86\x2f\x34\x7f\xad\xf6\x6d\xa6\xde\x4f\x2e\xda\x83\x50\x04\xcc\xe0\x2a\x4d\xa8\x0f\x54\xaf\xe1\x60\x73\xeb\xe4\xe8\x38\x90\x18\x15\x0b\x3f\x32\x8e\x08\xdd\x30\x1e\x63\xf5\x93\x16\x64\x31\x15\x90\x50\x40\x31\x68\xdb\x04\x11\x2f\x75\xf7\xf6\xea\x88\x05\x17\x25\x0a\x08\x38\x48\xf1\x8a\x06\x7c\x5f\x30\xe0\xa0\xcd\x55\xab\x99\x99\xba\xc4\x32\x6d\xe9\xb3\x13\x20\xab\xac\x89\x91\xdc\x43\x12\x78\xd1\xfa\x65\x79\x39\xd4\x85\xd2\x96\xf3\xcc\xb8\xfa\x9b\xa6\x40\xc3\x78\x37\x78\x36\xa3\xbc\xd3\x2a\x76\x2c\x73\x9d\xcb\xbe\x79\xd5\xed\x54\x78\x5b\x5f\x8d\xc5\x6c\x14\x17\x12\x23\x41\x14\x82\x73\x17\xef\x4c\x39\x74\x6b\x40\x1c\x92\x08\x07\x10\xa2\x47\x22\x77\x28\xd7\x1b\x9a\x2f\x17\xce\xce\xa3\x37\x61\x93\xdb\xf8\x8a\x86\x09\x23\x54\x0a\x97\x8d\x41\xc2\xc9\x03\x96\x30\x0f\x02\x10\x2d\x70\x17\xc6\x65\xcd\x58\x04\xd8\x32\x2f\x92\x74\x1d\x91\xc0\x97\x80\x17\x80\xeb\x4c\xda\xfa\x1e\x45\xb5\x3b\x16\x85\xa2\xf4\xce\x71\x42\x90\x00\xfe\x00\x1c\x41\x2e\x55\x84\x75\x6f\x55\xa3\xe6\xac\xde\x41\xc4\x4d\x2a\x56\x4e\x92\x83\x72\x8b\xd9\xc6\xc2\x57\x1f\x21\x48\x15\xb9\x77\x2c\x82\xf9\xbb\x9b\x1e\x47\xaa\xd3\x45\x6d\x50\x5b\x02\x8f\x89\x50\xd6\x44\xbc\x64\x29\x0d\x31\xdf\x0f\xa1\xae\x24\x41\x02\xa5\x63\x96\xd6\xb1\x8b\xbc\xd7\xcd\x83\x94\x56\x35\xaa\x47\xb9\xc2\x39\x83\x47\x08\xb0\x42\x61\x24\xa1\x29\x7b\x70\xbb\xb8\xba\x3c\xd1\xbc\x6b\x0c\xd9\x7d\x28\xfd\xa8\x69\xd0\xf3\xc0\x96\x69\xf8\x1d\x38\x1a\xd1\x2a\xe0\x28\x42\x8b\xf9\x35\xc2\x52\x72\xb2\x4e\x25\x08\xc4\x36\x08\x17\x13\xda\xd3\x0c\xf4\x51\xb3\xcc\xfb\x06\xa2\x1d\xac\x00\xa6\x94\x49\x5c\x0f\xf8\x75\xcb\xe2\x74\x1b\xeb\x4a\x00\xd3\x44\xe0\x8f\x2f\x66\x9c\x63\x29\x71\xb0\x5b\xb2\x88\x04\xad\x79\x62\x36\x01\x0b\x1a\x11\x0a\x57\x2c\x48\x63\xa0\xad\x0e\x4d\xea\x40\x89\x26\x8f\xc2\xbc\x8d\x5a\x7b\xb3\x7e\xd5\xff\xe4\x8e\x08\x94\x63\x4b\x59\x69\x2d\x7c\x1f\x47\x78\x78\x2f\xbd\x12\x99\xbf\xbb\x79\x5a\x31\x92\x08\xaf\x21\xfa\x66\xc1\x46\x71\x0c\x43\x03\x0d\x56\x82\x22\xc1\xc1\xb8\x54\x13\xef\x25\xc4\x8f\xfe\x80\xfd\x4e\xcb\x3c\x75\x6d\x80\x24\xde\x7e\x5b\x10\xf1\x5a\x3a\x35\x88\x8c\x18\x68\xcf\x93\x33\xb3\xad\xee\x9a\xed\x36\xdb\xd8\x83\x8f\xce\xed\x91\x56\xc8\x98\xcb\x25\x45\x04\xc7\xb9\x35\xcb\x8d\x19\x2a\x76\x99\x3a\x10\x90\xed\x72\x52\x3e\xc4\x8b\xf6\xa5\xee\xb4\x9c\xae\x9a\x98\xb7\x2e\xaa\xdc\xd3\x0d\xf4\x02\x4f\x41\x7c\x44\x65\x64\xea\x56\x1e\x46\x4b\x6a\x9e\x82\xef\xa2\x64\x12\xb2\x8e\x92\xf5\xe6\x30\x9a\xf3\x85\xc3\xb6\x12\x89\xe9\xcf\x68\x8c\x6e\xb4\x73\x06\xc6\x24\xf9\xcd\x59\xbc\x6a\xe8\xe7\xb8\x74\xd1\x48\x56\x34\x57\x8a\x81\xaf\x93\xd8\xb1\x32\x5f\xbb\x05\x0a\x1c\x47\xe5\xd6\x7d\xc8\xe6\xdf\x89\x98\x69\x02\xdd\xcc\x7f\x76\xb1\x48\x6a\xff\xf4\x88\xdd\xb7\x91\x5e\x8a\x28\x88\x8f\x68\x91\x6e\xe6\x3f\xa3\x9c\x6c\xdd\x54\x23\x96\xd4\x17\x40\x37\xbb\xd4\x4f\xcf\x24\x5c\x77\x8b\x8f\xf9\xb8\xd6\x20\x50\x9d\x6c\x48\x80\x25\xcc\x53\xb9\x63\x9c\xc8\xfd\x95\x21\x05\xe1\xe6\xc9\x1f\xe3\xae\x17\xd1\xa7\xb1\xdd\xc7\xe0\xfe\x66\x14\xab\xec\x85\xd4\x72\x30\x2e\xa2\x3e\xab\xab\xd7\xc8\xfe\x68\x90\x47\x1c\x70\x38\x65\x34\xda\x8f\x12\x41\x70\x20\x67\x04\x7c\xba\xa6\xe0\x15\x1b\x1e\xb6\x64\x59\x32\x5a\x20\x1f\x19\xbf\x3f\xd9\x32\x95\x05\x84\x9f\x3c\xc7\x5e\x88\x2e\xd4\xd0\x1e\xe6\x88\xd6\x38\xef\x44\x3b\xce\x19\x75\x24\x72\xa4\xf8\x99\xe1\x0e\x42\x26\x38\xfe\xb2\xbc\x74\x32\xbe\xa9\x64\xf3\x28\x62\x6a\x0a\x2f\x96\x0f\xff\x39\x28\x53\x11\x90\x90\xbb\xed\x67\xb7\x44\xee\xd2\xf5\x79\xc0\xe2\xcf\x8f\x80\x1f\x40\x21\x40\x7c\xce\x0e\xb3\x7c\x4e\xee\xb7\x9f\x53\x49\x22\xf1\x99\x24\x14\xe4\xf9\x62\x79\x03\x96\x28\x4d\x60\xcf\xc8\x74\xf4\xde\xca\xe3\x98\xad\xf6\x47\xc9\xf1\xe5\xe2\xea\xdd\x71\xb1\xf2\x63\x86\x3a\x3c\x19\xbd\x61\x1c\x1d\xc0\x8a\xd4\x30\x10\x16\x82\x05\x24\xdb\xfc\x9e\x21\x38\xdf\x9e\x23\xc9\x50\x2a\x20\x4b\x7b\x09\x48\x30\x57\xc8\xd2\x2f\x2b\x02\x05\xd4\x72\x7c\x21\x45\x93\xee\x11\x0e\xa7\x3b\xd6\x86\xaf\x0b\x84\xbf\x22\x5b\x46\x9d\x92\xc1\x27\x5c\x8c\xe4\x28\x76\x3c\xbd\x53\xf1\x34\x3b\xcc\x6a\x96\x67\xf3\x81\xdc\xd7\x09\x37\x0a\x08\x52\xb5\xa4\x67\x47\x25\x46\x75\x62\x76\x98\x67\xa9\xec\xd5\xf0\x3e\x5a\x08\x4b\x38\x4c\xb5\xf4\x21\x44\x59\x0f\xfa\x8c\x0a\x5a\xbd\xf6\x06\xab\x2b\xa9\xfe\x91\xb6\xdc\x82\x7e\xb8\xac\x4c\x33\xac\xc1\x64\x31\x09\x30\x07\x04\x44\xee\x80\x17\xab\x42\x65\xa6\xa8\x91\xb4\x27\xd4\xe1\xc8\xc7\x19\x92\x3b\x10\xa0\x89\xdc\xc3\x1e\x42\xb4\xde\xa3\xf9\xaf\xba\x5d\xc0\xe8\x03\x50\x02\xb4\x16\x5a\xeb\x97\xde\x57\x65\x6c\xe0\xca\x4f\x6a\xc7\x36\xf4\xf2\x65\x85\xbd\x41\x97\xe6\xc5\xc2\x01\xde\x67\x1d\x0b\x6f\xc3\xbc\x74\x2d\x76\x9d\x06\x64\x44\xdf\x65\x1b\xb1\x35\x8e\x72\xcb\xaa\x1d\x0f\x1c\x45\x28\xd8\x91\xa8\x70\x41\x66\x75\x9b\xec\xe9\xd2\xf8\xd3\xaf\x79\x3a\x8d\xe3\x98\x6e\xa1\xb0\x96\x78\xc6\x0b\x7c\xd5\x46\xc8\x36\x0a\xc2\x28\xe7\x11\x25\x19\x93\xe7\x5e\x53\xc9\x89\x46\x7f\x3e\xc3\xfb\x94\x42\xd7\xb8\x16\xf3\x6b\xc4\x59\x04\x7f\x15\x68\xfe\xee\xa6\x58\xb1\x25\x43\x3c\xa5\x28\x61\xa1\x40\x8c\x4a\x56\xf0\xec\x37\xde\xa3\x68\xf7\x5b\x62\x88\x20\x90\x8c\x8f\x79\x06\x78\x95\xd3\x1c\xc3\x75\xcb\x96\x1b\xad\x71\x9e\x46\x20\xd4\xc0\x33\x9e\x91\xf2\x1d\x23\x86\xf5\x01\x77\x11\xec\x20\x4c\x23\x38\x42\xce\xc7\xf5\xe4\xb3\xcc\x7d\x2d\xf7\xa5\x4b\xae\x8f\x3b\x12\xec\xca\x49\x24\x76\x2c\x8d\xc2\x02\x58\x21\x43\x34\xdb\x87\x22\x7d\x12\x4c\x67\x8e\xf3\x69\x97\x49\x04\xc2\x52\x26\xe7\x68\xb1\x41\x94\x51\x3d\x13\x1f\x48\x08\xe1\x99\x36\x58\xc5\x8a\xa7\x16\x27\xd5\xb0\x88\x3f\x3e\x92\x28\x42\x6b\x50\x7d\x85\x7e\x0a\x7a\x22\x2c\x1b\x35\xfd\xcd\x05\xdb\xbd\x3c\x83\x66\x60\xdc\x64\x3c\x8d\x36\xa5\xdb\x4d\x18\x2f\x74\x9e\xcd\x5d\x91\xab\x5b\x4a\x42\xb7\x42\xab\xab\x36\x63\xcb\x69\x6c\x36\x12\x6e\x06\x62\x60\x27\x1d\x6b\x74\x69\x2e\x9d\xd6\xea\x2c\xad\xeb\xbc\x60\x3f\xe9\xc3\x11\x35\xf1\xbe\x49\xd7\xc0\x29\x48\x10\x48\x33\x8d\x4a\x18\x55\xd6\xbc\x86\x41\xf6\x33\x20\x23\xf4\xe0\x78\xa0\x63\xc0\xf9\x0b\x1b\xa7\x25\x39\xb4\xe1\x2c\x46\x99\x11\x1c\x51\x12\xc3\xe8\x8f\x94\x6d\xb3\x9d\x51\x18\xd5\x28\x1c\xe1\x37\xb8\x9a\x84\xa1\x0e\x43\x61\x10\x5e\x13\xa7\xb3\x75\x6b\xc6\xa4\x90\x1c\x27\x6d\xef\x1e\xd9\x9d\xb3\xd6\xcd\xac\x2a\x5a\x55\x47\xb8\x6e\x7c\x3a\x48\xdd\x16\x6f\x1b\x69\x71\x48\x98\x1b\x9d\x77\xea\xcd\x81\xb8\xd1\xbd\x98\x46\x70\xd6\x21\xa8\x51\x00\x95\xdf\x0e\xd2\xdb\x31\x53\xca\xaf\x7a\xe3\x52\x5f\x24\x25\x74\x8b\x5e\x13\x79\x9b\x28\x1f\xfd\x90\x29\xd1\x9b\xba\x88\xd0\x7b\xf5\x9c\x64\x87\xf2\xd4\x7b\x48\x0d\x4d\x10\xc9\xf8\xde\x1d\x82\x5f\x95\xa9\x1a\x68\x1b\x87\x1e\x2b\xf8\xb5\x2d\x2f\x07\x05\x5b\xd6\x05\xdb\xd1\x9e\x3d\xc2\x7c\x4d\x24\xc7\x7c\x8f\xfe\x77\x75\x7b\x33\xfb\xff\xf9\xf5\xdb\xf2\x54\xa3\x38\x43\x22\x0d\x76\x08\x0b\xa4\x23\x0f\x86\xbb\xb0\x8c\xeb\xd3\xaf\xfa\x38\x24\x01\xdf\x2c\xc3\x29\x19\x30\xac\x28\x85\x80\x5b\x77\xf4\x46\xde\xcc\xe3\x98\xfc\x88\x63\x12\x8d\x7b\x92\xef\x69\x5f\xa8\x0d\x41\x28\xb1\x5d\xe2\x04\x07\x44\x5a\x47\xae\x40\xb1\x05\x8b\x9d\x73\xbe\x64\x5a\x6a\xce\x7a\xcd\x94\x50\x21\x31\x0d\xf4\x8d\xf3\x51\xb5\xf0\xa4\xfd\xbe\x5e\x1f\x2a\xc6\x1f\x57\xe4\x93\x55\x22\x9d\xda\x89\x09\x1d\xdc\x76\xf4\x73\x5d\x79\xa4\x2e\x4f\xeb\x1a\xea\x56\x34\x53\x89\x36\xf2\x7a\x61\xb2\x44\x19\x84\xe3\xe5\xf0\x12\x8e\xab\xd5\x4f\xff\x22\xdb\xd8\x0a\xef\x0f\x2c\x4a\x63\x70\x51\x7d\x97\xe7\xbd\x25\x5b\xbc\xde\x4b\xf0\xcb\xe4\x59\x5a\x55\xb8\xfe\xef\xbf\x8d\xb5\xf9\x3e\x58\x6d\x9b\x1d\xe9\x30\x77\x86\x79\x62\x98\x76\x66\xa9\x76\xda\xf8\x06\x1e\xdb\x96\xa8\x73\x52\x34\x21\xd8\x30\xb6\xa3\x6e\x07\x30\x45\xaf\xde\xac\xa6\xad\xfb\xda\xe8\xe7\xdb\xab\x5b\xf4\x0b\x8e\x48\x58\x26\x63\x68\x8c\x93\x04\x42\xb4\x21\x90\xf9\x01\x21\x92\x3b\xce\x1e\x15\x11\xe0\x9c\xb9\x9f\xa1\x39\x4d\xef\x75\x77\x01\x24\x27\x81\xb8\x64\x91\xda\x83\xd4\x8f\x4f\x5a\xfc\x85\x2d\xc7\x34\x8d\x30\x57\xd0\x70\x76\x1b\xaa\x8d\xc6\xb4\x95\x71\xc6\xff\x9f\xef\x2e\x78\x4d\xcf\xaa\x34\x0c\x83\x19\x05\xba\x3a\xc8\xb4\xde\x67\x91\xa7\x00\x6b\x17\xbe\xb8\xb3\xab\xef\xd2\xeb\x0b\xcb\x87\x6b\xef\x21\x0b\xc4\x87\xef\x77\x52\x26\xe2\xc5\x6c\xa6\xfe\x3a\xc7\x8f\xe2\x1c\xc7\xf8\x13\xa3\xe7\x01\x8b\x67\xf3\xbf\xaf\x74\x8d\x90\x1f\x8b\x36\x33\xb5\x49\x10\x72\xf6\x7f\x02\xf8\xeb\x94\x84\x30\xc3\x8f\x62\x7a\x80\xc0\x14\x8b\x69\x3e\xa6\xa0\x04\xd8\xb9\x42\xfa\x73\xe7\x39\xd0\x37\x8c\xc3\xe5\xfc\xaf\xc4\xfa\xfb\xc9\x85\x41\x72\x87\x2b\xff\xc5\xcc\x2a\x4e\x65\x39\x6c\xd1\xbf\xfe\xa9\x9f\x31\x4e\x71\x78\x21\xde\x90\x27\x1e\x05\xe5\xd9\x5e\x6b\x71\xa5\x0d\xdd\xe5\xe2\xea\x9d\xe7\x2e\xad\xda\xb2\xae\xbe\x13\x6e\xa0\x8e\x08\xf2\xad\x12\x08\xc8\x66\x8f\xee\x82\x54\x48\x16\xa3\xf9\xf5\x42\x7c\xf8\x3e\x2b\x4b\x91\xfd\x34\xc5\x31\x99\x8a\x34\x49\x18\x97\xbe\x85\x4f\x72\xe2\x87\x39\x65\x25\xac\x66\xc1\x81\x03\x8d\x7e\xcf\x1d\xdf\x69\xf6\x91\x62\xdb\xb5\xa2\xa1\x8e\xb5\xc1\x52\xf2\xa6\x45\xcd\x7b\x65\x78\x8a\xdb\xdc\x2e\x88\xbd\x25\x31\x91\x59\xa9\x95\x2c\x3c\xa9\x51\x41\x02\x34\xff\xf5\x50\x75\x05\xa7\x92\xe5\xe6\x78\xf6\xdd\x27\x46\x61\x8a\x1f\x31\x87\xa9\xfa\x7d\x9a\x3f\xf0\x03\x5f\xd6\x6d\xab\xd6\x8a\x4b\x47\x79\xf1\x95\x16\xb7\xf6\x3a\x2c\x6b\x26\x65\x04\x9c\x05\xf7\xe0\x78\xfe\xac\xb4\x07\x2f\xab\x4d\x8d\xc4\x83\x08\x0b\x41\x82\xb7\x0c\x87\x2f\x71\xa4\x3c\x6c\x7e\x83\xe3\xa7\xa9\xec\x79\x7e\x74\x10\x90\x0e\x3d\xaf\x73\x7e\x45\x76\x9e\x48\x09\xb9\x5c\x75\xb7\x8d\x83\x37\xfd\x2a\xf5\x26\x6e\x11\xa7\x8e\x35\x5e\xdd\xac\x8e\xb0\x9b\x77\x97\x99\xb5\xc2\x61\xc8\x41\x1c\x70\xfc\x90\x04\x53\x5a\xee\x29\x66\xdf\xe5\xa6\x2e\xef\x73\x1a\x52\x31\xcd\x9b\x3c\xcf\xd2\x76\xca\xc9\xbe\xba\x59\xa1\x88\xb1\xfb\x7a\xe5\x98\x7e\x79\xb4\xc0\xed\xde\xfb\xfb\xc9\x45\x7d\x04\xba\xd2\x54\x3f\x47\xbd\x16\x73\x8c\xd8\x16\xac\xc5\x6d\x22\x49\x4c\x3e\x81\xd5\xaf\xb0\xc4\x2a\x6a\xf2\xc9\x0a\x29\x0a\x74\xf7\xea\xe5\x4a\x87\xa2\x63\xf2\x49\xbb\x58\xbd\x7e\xe9\xab\xcb\x7f\x6f\x7b\x74\xb0\x16\x53\x56\xf0\xd5\x70\x3b\x5d\xd4\x55\xb0\xe3\xec\x62\x3a\x72\xf1\x7e\x72\xd1\x1c\xa0\xdd\x52\x9d\x20\x6e\x38\xce\x95\x17\x03\xe1\x25\x87\x0d\xf9\x78\x12\xd2\xa3\xc7\x3a\x0b\xc2\xe2\x8a\x88\xec\x6a\x8a\x73\x35\xae\x83\xa4\x8d\x34\x8c\xdd\xdd\xa7\x6b\x88\x40\xbe\xd2\x87\x1c\x9b\x45\x33\x3b\xfa\xf2\x28\x12\x91\x9b\x38\xf2\x09\xd0\x6f\x79\x77\xbf\xe5\x5b\xa5\xd2\xdc\x05\xf9\x2b\x84\x6e\xa7\x72\x07\xd3\xfc\x3d\x4f\x3f\xb1\x65\xc7\x6c\x64\x4b\xab\xa5\x98\xfa\x21\x60\x21\x5c\xe4\x8f\x7e\x98\xe9\xbf\x72\xfe\xec\xf0\xff\xe6\x43\xd2\x4b\x16\x8a\x25\x70\x85\x99\x61\x91\xe9\x7f\x95\xa8\x36\x7b\x00\xce\x49\x08\x2f\x8b\x34\xeb\x25\x8b\x63\xec\x5b\x30\xb3\x86\xc3\xdb\x9c\x24\xfa\x2d\xdb\x01\xff\xf6\x57\x81\xca\x2c\x6e\xa2\xdc\x8a\xec\x75\x2f\x70\x97\x44\x33\xbc\x66\x94\x73\xb8\xda\xe8\x1b\x07\x9c\xf0\xd6\x58\x9f\xa4\x0b\x08\xfa\x54\x16\x84\x68\x0d\x1b\xc6\xa1\x31\xc2\xd2\x4e\x66\xc5\x5f\xa0\x75\x11\xd0\x45\xa6\x03\xbb\xb0\x88\xf5\xb8\xec\x48\x8d\xb1\x57\x7a\x89\x47\x77\xc5\xe1\xe8\x83\x33\x66\xf5\x10\x53\x01\xd3\xfc\xf5\x69\x7e\x3e\x6d\xba\x61\x7c\xaa\x4d\x36\x8e\x0e\x35\x21\x9f\x6b\xcf\xac\xfc\xd3\x4b\x60\x39\x5f\xbd\x0e\xa3\x33\x33\xef\x27\x17\xed\x31\x6a\x1f\xb2\x83\x49\xc7\x54\x52\xf5\x60\xbe\xe3\xf5\x8c\x43\x56\xe9\xb5\xe5\x9e\xd1\xb0\x04\x55\x97\xae\x8b\x93\x0e\x20\x90\x10\xbb\xa2\x8e\x5d\x76\x6e\x93\x88\x81\x8a\x72\x26\x6a\x1c\xe4\xb7\x9c\x3a\x93\xd8\x74\x5d\xf0\xdb\xe1\x9e\x6f\x41\x6a\xdc\xfc\x99\xb5\xa9\xdc\xb6\xe6\x19\xb3\xd9\x1e\x79\xe4\x8d\xb9\x13\x69\xa3\x04\xb3\x24\x5f\x5e\xd8\xb4\x7f\xdf\xd7\x41\x63\x71\xbb\xb4\x6e\xed\x3b\x7d\x94\xac\xf9\x9b\x58\xbc\x81\xfd\xe2\xca\xb9\xac\x44\x8b\x82\xc3\x86\xa8\xa3\xf5\x37\x91\x3d\x6e\x71\xed\xb0\xa1\x3a\xb4\x7e\xd6\xa0\xe2\x9b\x7b\x1e\x9c\x8a\x36\xef\xd2\xec\x5b\x4f\xdb\x6e\xd7\x35\x0d\xdd\x4c\x24\x77\x66\x9d\x1b\x0b\x5f\x47\x50\xc5\xe0\x93\x1b\x5c\xfc\xbe\x38\xb6\x2d\xe2\x62\x46\xa4\x59\xe3\x66\xec\x77\x4c\x6b\xfb\x74\x33\xcf\x63\xfb\xee\xa7\xbd\xab\x6b\xaf\x26\x2e\x51\xd4\x0e\x2b\xde\xf0\x1f\x1a\x61\x14\x5b\xfc\xb7\xcf\x67\x77\xd9\xc4\x98\xe3\x95\xdd\x01\x80\xfc\xe1\x28\xd5\x80\x6b\xa7\x38\x2b\xc5\x36\xe4\x0e\x4b\x7d\xf7\xb3\x8c\x8b\xeb\x33\x9a\x6d\x67\xc7\xb1\x30\xf0\xe0\x7e\x74\x37\xad\xe4\xda\x4b\x73\x1c\xbe\xe7\x23\x31\xf3\x30\x26\xf4\xb2\xf8\x8a\xc9\xa0\x95\xa7\xb8\x8b\x31\x7a\x14\xa6\xac\xa1\x84\xe9\x1e\xdd\x55\x71\x56\xde\xff\x38\x44\x33\x0f\xe9\xdc\x59\xf5\xcd\x29\x13\xb5\xbf\x67\xdf\x55\x3a\x99\xb2\xcd\xb4\xa0\xe4\x17\xb6\xa9\xb1\xd6\x0e\x6a\x1e\xcb\xcc\xfb\xc9\x85\x71\xb8\x8d\xe0\x8e\xd7\x5a\x62\xd4\xb7\x49\x8d\x23\xce\x25\xbd\x03\xad\xe1\x5c\xb9\xf3\x55\xa4\xa2\x35\x16\x10\xa2\x43\xfd\x78\xf7\x93\xd7\x47\x74\x61\x9e\x41\x8e\x75\xb6\x9f\x74\x31\xd6\xc3\x22\xae\x0f\xde\x7b\x5f\xab\x75\x0c\xf5\x0e\xba\xb2\xeb\x41\xfb\x64\x71\xf5\x61\xe5\xb8\xfd\xfa\x52\xbe\xff\x3c\x0c\x19\x5d\x16\xa7\xcd\xbd\xb3\x0e\xf5\xe6\x03\x67\x7c\x57\x1d\x51\x03\x4e\x3a\xd4\xdc\xa5\x25\x0f\x21\x77\xca\x68\x44\xb3\x63\x2b\xb6\x7d\x38\x88\xe2\x67\x63\xfa\xe9\x59\x0d\x8a\x0d\x07\x76\xeb\x12\xad\x17\x74\xcb\x87\x7e\x9f\x01\x27\xc9\x35\xb4\xe3\x3d\x3e\x6d\x97\x1c\x1e\x08\x3c\x0e\x23\x91\x4a\xb6\x0a\x70\x34\xd0\x95\x08\x80\xcb\xec\xd6\xc5\xc0\xf6\xd6\xcf\x75\x39\x35\x87\xf5\x30\xa1\xc3\x66\x60\xbb\x8f\x12\x38\xc5\x51\x47\x3e\xbe\xb3\xfd\x46\x58\x33\x84\x9d\xed\x48\x8c\xb7\xf0\x32\x25\x51\x38\x50\xce\x1f\xdf\xd9\x4b\x4f\x1e\xf9\x15\x82\x1a\x6f\x66\x64\x59\x24\x68\xc1\x91\x61\x72\xd8\x31\xdf\x00\x43\x43\xd6\x0d\x95\x9f\x19\x67\x6d\x53\x4c\x66\x78\x9e\xc2\xda\x29\x53\x33\xf8\x8a\x95\x99\x88\xc5\xae\xf5\x24\x7c\x2d\x87\xfb\xaa\x91\x09\x83\xbd\xb7\x59\xc4\x7a\xb3\xa7\xe4\x6c\xa9\x5d\x39\x27\xf6\x9b\xc6\x34\x8d\xd7\xb6\x80\x1b\xa3\x57\xa0\xb6\xbb\x2f\xb1\x80\xa3\x4e\x8c\x14\x84\x96\xc0\x03\xa0\x12\x6f\x61\xbe\x66\x0f\x70\x34\x5d\x91\x30\x99\xd7\x02\x22\x8c\xae\x24\xc7\x12\xb6\xc3\x3e\xf6\x92\x30\x59\x40\x66\xc9\x58\x3b\x07\x6d\xe7\xc7\xcf\x74\xd4\x80\x62\xd2\x53\x9f\xfc\x3d\xc5\xda\x39\xc6\x7e\x51\x8e\x68\x03\xcc\xbb\xa0\x3b\xd5\xf1\x21\x27\x58\xe6\xe1\xd4\xcf\xd3\xf2\xe7\x99\xfb\x09\xf2\xae\xce\x5a\x09\xb6\x46\x2f\xef\x27\x17\x75\x76\x0c\xe7\xbc\xab\xa9\x2c\xe7\x9d\xd8\xe2\xea\x49\xe6\x1c\x32\xe6\x40\x54\x4b\x0c\x16\x61\x4e\x94\xdf\x1a\xce\x93\xb4\xc3\xf2\x65\x83\x3a\xb0\x6e\x58\xde\xb2\x00\x47\xc7\xe4\x7f\xf3\xef\x9a\xe0\x06\x0f\x48\xc1\x3e\x2a\x3f\x77\x72\xcc\x50\x07\xd2\xae\xe8\x55\xf2\xd4\x92\x79\x55\x22\x58\xe9\x02\x69\x23\xc8\x20\xab\x50\x52\xe3\x34\x2f\xd7\x87\x63\x46\xb7\x7a\xb1\x3d\x94\x95\x43\x84\x0e\x3e\x0d\x30\x7e\x87\x76\x69\x79\xd9\xe2\xc3\xd4\x34\x0b\xd9\x88\xbe\x51\x0c\x62\xc0\xa8\xe4\x2c\x12\xad\xb9\xd0\x91\x9e\x76\x09\xf7\xb9\xd2\xb4\x58\xb4\xd5\x4f\x6e\xbb\xbf\x88\x0d\xdb\x79\x65\xa5\xe9\xde\xc0\xa0\x15\xba\x6c\x3c\x34\x7d\x57\x12\x58\x62\x69\xdd\x7b\x75\xfa\x08\x2c\xe5\x41\xbd\x30\xe1\xe2\xcf\x3b\xe3\x33\x14\xf4\x5a\x7b\x56\xb1\x18\xb5\x65\xd5\x42\xbf\x70\x46\xde\x43\x68\x23\x72\x38\x78\x51\x5f\xe1\x75\x0a\xe2\x98\xf8\x89\x0f\xf5\xda\x14\xba\x6d\x57\x48\xb1\xdf\xfe\x62\x71\x4c\x64\xd1\xe2\x1a\x53\xb2\x01\xd1\x3e\x59\xe1\x34\xa1\x74\x62\x6d\xd4\xb8\xe0\x69\xbe\x0c\xc5\x01\x87\xb7\xd4\x7e\xf9\xe7\x88\x9b\xed\xca\x32\xff\x04\x51\xeb\xd4\xf4\x48\x5b\x7d\x9b\xb6\x5a\x4a\x30\xca\xd0\xc4\xa7\x49\x2c\xa3\xcc\x12\x9f\x2a\x2f\x0a\xe9\x45\x51\x9c\xb2\x3e\xd9\x3d\x40\x52\x2b\x6a\x97\xdd\x26\x86\x46\x89\x17\xb5\x34\x8b\x3d\x0d\x4e\x53\x7f\x66\x1c\xce\x6a\xb3\xd3\x50\xe7\xd4\x36\x39\x59\x2a\x93\x54\x3a\x2c\x10\xbe\xf8\x7f\x20\xe3\x7c\xac\xa6\x65\x71\xbf\xf2\xc5\xce\xbc\x53\xd3\xd8\xce\x8c\x62\x1c\x1b\xda\x21\x48\x4c\xa2\xbc\x2e\xd1\x3f\x52\x12\xdc\x0b\x89\xb9\x2c\x6a\xbc\x96\x25\x8c\x40\xbd\xd1\x84\x0c\x0e\x4b\x8c\x8d\x50\x4b\xe9\x54\xac\xd4\xc0\xfb\xae\x5e\x30\xcb\x5e\xf7\x8b\x63\x6a\x0f\x29\x0f\x02\x18\xc4\x98\x8c\xbb\xba\x6c\xa2\xf4\xe3\xe8\x93\x2b\xc1\x72\xf7\x04\xbc\xb0\x2a\x47\xd9\x31\xa2\xd5\xea\x27\x37\x6f\xd3\x6f\xbc\x29\x1f\x57\x29\xa9\xb0\x47\xd8\x4f\x64\x45\xd4\x10\xce\x5a\xd8\x6d\xe9\xd4\x84\x9c\x26\xe3\x2d\xbc\x76\xea\xe1\xab\x2f\xb4\xcd\xfa\x68\x87\x3b\x7c\x59\x7d\xb5\xd3\x2c\xa2\xfd\xbd\xd6\x6c\xcc\xaa\xf5\xd5\xfa\xde\x38\xf9\x3d\xec\x8d\xdf\x03\xb4\x99\xa7\xfc\xfd\x93\x9c\x40\xb4\xf1\x72\x6c\x95\xd8\x76\xfc\xf0\xcd\xf5\x0a\x41\x29\xa5\xa2\x34\xb0\x7f\x85\x17\x3f\xea\x35\x5d\x0d\x28\x09\x51\x51\xa6\x65\x5e\xb7\x62\x44\x14\x2d\x96\xc5\xd5\x53\xe5\x55\xe9\x4f\x89\x14\x1f\x02\x75\x1e\x6e\x0f\x99\x67\x85\xaa\xbf\x3c\xfb\xf2\xec\x9f\x01\x00\x00\xff\xff\xdd\x8a\x07\x2c\x7f\x8e\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x2f, 0x90, 0xd8, 0x8, 0x64, 0x58, 0x4b, 0x35, 0x1f, 0xe5, 0x19, 0x8b, 0x12, 0x86, 0xb0, 0x15, 0x5a, 0x3d, 0x3a, 0x7b, 0x97, 0x7c, 0xc1, 0x91, 0x1c, 0x4e, 0x19, 0x66, 0x34, 0x50, 0x3c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
