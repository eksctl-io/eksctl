// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (985B)
// assets/bootstrap.al2.sh (1.094kB)
// assets/bootstrap.ubuntu.sh (2.139kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x21\x68\x1f\x36\x88\x6c\xda\xbd\x15\xfc\xe0\x25\x6e\x31\x73\x9d\x12\xa7\xdb\x60\x1b\x46\x91\x2e\xe9\x11\xf9\x64\x24\x39\x6d\x57\xf2\xbf\x0f\xc5\xf1\x96\xb2\x32\xf6\x26\xdd\x77\xf7\x7d\xdf\xfd\x38\x63\xb0\x75\xd2\x6b\xee\x3a\x90\xb8\x46\xc9\xdc\xb3\xf3\xd0\x2a\xa6\xac\xe9\x38\x12\xeb\x09\x3d\x5b\x1b\xcb\xb6\xfd\x0a\x34\xf8\xc9\xe1\x93\xb5\xe2\xa7\x21\x56\x22\xf5\x4f\xec\x92\xbd\xcb\xca\xcb\xf7\x51\xf4\xad\x06\xbb\x43\x09\x3f\xa2\x33\x56\x1a\x29\x34\x6b\xc1\x0b\x25\xbc\x60\x9d\xb0\xa2\x05\x0f\xd6\x5d\xb1\x45\x7e\x53\xcc\xab\x09\xcb\xbe\xd4\xcd\x2c\xbf\xce\xee\xcb\x65\x33\xc4\xa2\x9c\x76\x68\x0d\xb5\x40\xfe\x1a\x35\xa4\x09\x78\x99\x0c\x16\x93\x91\x2b\x06\xda\x45\x67\xec\x46\x9b\x95\xd0\x4c\x90\x62\xce\x0b\x8f\xf2\x95\xc6\xb4\xbc\xaf\x97\xf9\xa2\x99\x55\xf5\x84\x55\xf3\x59\xde\x94\xd9\xc7\xbc\x1c\x3f\xcb\xac\xa8\x96\xf5\x3f\xe5\x8e\xfd\x1e\xd5\x86\x76\xc8\x10\x7f\x43\xec\x40\x59\xdc\x4d\x58\x51\xd5\xcb\xac\x9a\xe6\x4d\x31\xfb\x2f\x6e\x1d\x58\x0f\x0a\x51\xfe\x04\xb2\xf6\xc2\xfa\xf4\xe4\x99\xf4\xce\x26\x2b\xa4\xb1\x80\x7d\x8f\x18\xe3\x9c\x8c\x02\x8e\x5d\x7a\xfe\x72\x54\xde\x9f\x02\x5a\xac\x40\xbb\x11\x1c\xda\xde\x4f\x84\xee\x1e\x44\x3c\xe8\xc7\x68\x12\x24\xe7\x05\x49\xe0\xa8\xd2\xf3\x97\x13\xe3\x23\x57\x2b\x9e\x78\x67\x54\x20\xba\xcd\xbe\x36\x77\xf3\x59\x3d\x42\x16\x36\xe8\x3c\xd8\x83\x5e\xea\x6d\x0f\xa7\xc1\x47\xf4\x0f\xdc\x0b\x24\xff\xdb\xc4\x30\xee\xb1\x5c\x6a\xd3\x2b\xde\x59\xb3\x43\x05\x36\x15\x8f\x6e\x04\x0c\x85\x3a\xb0\xdc\xf6\xe4\xb1\x85\x54\x19\xb9\x05\x3b\x76\x07\xfe\xd1\xd8\x2d\xef\x74\xbf\x41\x4a\x25\xe1\x58\x47\xc8\x57\x48\x5c\xa1\x4d\x13\xd3\xf9\x44\x12\x86\xb1\x9d\xc0\xd2\xd0\x7a\xc0\xc3\x1a\x02\x4e\xe0\x63\x75\xcc\xe8\x8c\xe2\x48\x6b\x2b\x4e\x2c\x60\x2b\x36\x90\x9e\xbf\x84\x2b\xcd\x3f\xd5\x4d\x3e\x5d\x34\xd9\x74\x3a\xbf\xaf\x96\xfb\x58\x6d\x6d\x0c\xd2\xc6\x03\xfc\xfa\x88\xf7\xc7\x68\x9d\x2f\x3e\x17\xd3\xbc\x6e\x66\xf3\xdb\xac\xa8\xf6\x61\xf9\x49\x27\x7a\x07\x57\x1f\xe2\x0b\x0e\x5b\xb7\xea\x51\xab\xf8\xe2\x68\x22\xec\x38\xd8\xc4\xcd\x5f\xb7\x32\x84\xe3\x67\xd1\xea\x3f\xa3\x7a\x2b\x31\x1c\x55\xc8\x8a\x7e\x05\x00\x00\xff\xff\x30\x3f\x63\x4d\xd9\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0xbf, 0xa0, 0x4b, 0x49, 0x6d, 0x88, 0xe7, 0x32, 0x9e, 0xe6, 0xa2, 0xaa, 0x6d, 0xbd, 0xa8, 0x2, 0xb8, 0xe7, 0x4a, 0x8e, 0xcb, 0xa8, 0xa, 0x46, 0xea, 0xe0, 0x70, 0x6f, 0x65, 0x2d, 0xc8}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x71\x4f\xdb\x3e\x10\xfd\xdf\x9f\xe2\x7e\x26\x42\x54\x3f\xb9\x01\xc4\x90\x28\x74\x52\x45\x33\xad\x9a\x68\xab\xb5\x6c\x4c\x88\x45\xae\x73\x5d\x2d\x5c\x3b\x8a\xaf\x05\x54\x65\x9f\x7d\x72\x97\xa0\x14\x18\x7f\xc5\x77\xf7\x9e\xfd\xde\xb3\xb3\xf7\x5f\x3c\xd3\x36\x9e\x49\xbf\x60\xcc\x23\x81\x70\x80\x45\x81\x8f\x9a\xea\x32\xd7\x39\xce\xa5\x36\x75\x6d\xdd\xca\x7a\x24\xc6\xe6\x2b\xab\x48\x3b\x0b\xbf\x90\xd2\xa5\x7c\x4c\x73\x97\xf9\x83\x16\x6c\x18\xc0\xc3\x42\x1b\x84\x02\x65\x06\xda\x7a\x92\x56\x61\x4a\x4f\x39\x42\xc0\x9c\x43\xe6\x18\x00\x80\x9e\x03\xdc\xde\x02\x8f\x36\x3b\xa0\x92\x43\xb7\x1b\xba\x47\x25\x87\xbb\x3b\xd8\xdf\xaf\x50\x81\x1c\x86\xbf\xe1\xe7\xed\xa1\x38\xbb\xfb\x3f\x0a\xe3\x73\xa0\x05\xda\xed\x86\x00\xa8\x16\x0e\x2a\x64\xd5\x2a\x90\x56\xc5\xdf\xf9\x5c\x33\x80\xcc\x59\x84\x0b\x88\x91\x54\x8c\xf7\x5e\x91\x89\x6b\xf5\xed\xa5\xcc\x59\xc9\xd8\x1e\x5c\x7b\x84\xc1\x55\x7f\xb2\x3e\x06\x72\xc1\x21\x2c\x91\x64\x26\x49\xb2\xe9\xe8\x4b\x32\xec\xf2\xe8\x40\xad\x0a\x03\x42\x78\x6d\xd0\x12\x88\x1b\x18\x5f\x4f\x41\x7c\x06\x7e\x23\xe4\x83\x17\xa8\x8e\x45\x4d\x12\xe4\xee\xd1\x0a\x22\x23\x3c\x2a\x67\x33\xdf\x81\xd3\xc3\x43\x0e\x0b\xa2\xbc\x13\xc7\x47\xa7\x67\xed\xe3\x0f\x27\xed\xea\x1b\x1b\x49\xe8\x29\x96\xb9\x8e\xb7\xcc\x16\x7f\x11\x77\xb5\x6f\x15\xf7\x0b\x25\xef\x48\xe8\x40\xb4\xd5\xcf\x81\xbf\x7f\x74\xa0\x89\xc0\x8b\xa3\x23\x1e\x32\x19\x8e\xfa\x49\x3a\x18\x07\xe3\x4d\x05\x60\x9c\x92\x46\xe8\x7c\x7d\xd2\xe2\x6c\x30\x9c\x4c\x7b\xc3\xcb\x24\x1d\xf4\x5f\x01\xeb\x3b\x16\x3a\x6b\x22\xa7\x3f\xc6\xc9\xbf\xb1\xe1\x3d\xb4\x38\xeb\x7d\x9f\xa4\x93\xe4\xeb\xb7\xc1\x65\x32\x49\xfb\xa3\xab\xde\x60\xf8\x8a\xe3\xb1\x58\x6b\x85\x3e\xce\xdc\x52\xea\x10\x19\x63\xde\xad\x0a\x85\x3b\x77\x7d\xbf\x9a\xa1\x41\x6a\xa3\x5d\xc3\x1e\xd0\x42\x7b\x50\xd2\x82\x5b\x63\x51\xe8\x0c\xe1\xaa\x77\x93\x8e\x47\xfd\x09\x63\x4a\x12\x7c\x7c\x93\xbb\xf5\xbc\xdd\xe1\xe2\x22\x19\x7d\x7a\xce\x26\xda\x54\xab\x72\x27\x89\x68\xd3\xa8\xca\x17\xd6\x1b\xc3\x50\x97\x6f\x7a\x8d\x36\x6f\x74\x4b\x56\x6b\xed\x46\x9b\x7a\xd9\x11\x55\x2c\xd5\x93\x0e\xff\xcd\xee\x01\xbc\x55\xb2\x20\x9a\xf9\x27\x4f\xb8\x54\x64\x20\x93\xb8\x74\x56\x14\x68\x9c\xcc\x1a\x7d\xb4\x72\x66\x10\x2a\xdb\x8d\x81\x27\x59\xd0\x73\xff\x4f\x00\x00\x00\xff\xff\xe2\x16\xc0\xf8\x46\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xec, 0x80, 0x36, 0x7f, 0x8, 0xd8, 0x7a, 0x91, 0xb0, 0xad, 0xcd, 0x62, 0x3f, 0x7c, 0xa6, 0x14, 0x0, 0xb1, 0x9d, 0x9a, 0xb5, 0xed, 0x23, 0x6, 0x0, 0x35, 0x5a, 0x6f, 0x45, 0x56, 0xc4}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x61\x73\x1a\x37\x10\xfd\xae\x5f\xb1\x3d\x33\xa9\x99\x46\x77\xb1\x9b\x66\x26\x4e\xe8\x94\x1a\xd2\x32\x71\xc0\x13\x70\x9b\x8e\xc7\x65\x84\xb4\x70\x1a\x84\x74\x23\xed\x41\x3c\x1e\xfa\xdb\x3b\x3a\xee\x08\x26\x89\x3f\xf9\xa4\xf7\xde\xb2\xbb\x7a\xbb\x3e\xf9\x21\x9b\x69\x9b\xcd\x44\xc8\x19\x0b\x48\xc0\x1d\xa0\xf7\xf8\x59\x53\x73\x2c\x74\x81\x73\xa1\x4d\x73\xb6\xae\xb4\x01\x89\xb1\x79\x69\x25\x69\x67\x61\x81\x34\x5d\x89\xcf\xd3\xc2\xa9\x70\xda\x86\x07\x06\xb0\xc9\xb5\x41\xf0\x28\x14\x68\x1b\x48\x58\x89\x53\xba\x2f\x10\x22\xe7\x0d\x28\xc7\x00\x00\xf4\x1c\xe0\xf6\x16\x92\xd6\xc3\x23\xd2\x36\x81\x4e\x27\xde\x9e\x6d\x13\xb8\xbb\x83\x67\xcf\x6a\x56\x14\x47\xf0\x3f\xf8\xf7\xf6\x05\x7f\x7d\xf7\x53\x2b\xc2\x6f\x80\x72\xb4\x55\x40\x00\x94\xb9\x83\x9a\xf9\xa6\xbe\xf3\x48\xa5\xdf\x11\xe6\x9a\x01\x28\x67\x11\xde\x42\x86\x24\x33\x5c\x06\x49\x26\x6b\xd2\x4f\x57\xa2\x60\x5b\xc6\x4e\xe0\x26\x20\x0c\x3e\xf4\xc6\xeb\x73\x20\x17\x4b\x84\x15\x92\x50\x82\x04\x9b\x8c\xde\xf7\x87\x9d\xa4\x75\x2a\x4b\x6f\x80\xf3\xa0\x0d\x5a\x02\xfe\x09\xae\x6f\x26\xc0\xff\x84\xe4\x13\x17\x9b\xc0\x51\x9e\xf3\x46\xc4\xc9\x2d\xd1\x72\x22\xc3\x03\x4a\x67\x55\xb8\x80\x57\x2f\x5e\x24\x90\x13\x15\x17\x59\x76\xf6\xea\x75\x7a\xfe\xcb\xcb\xb4\xfe\x9b\x19\x41\x18\x28\x13\x85\xce\x2a\x65\x3b\x39\xea\x77\x1d\xb7\xee\xf7\x51\x26\x4f\xa4\x70\x01\xad\x2a\xff\x04\x92\xa7\x7f\x3a\xca\x78\xd4\x65\xad\xb3\x24\xf6\x64\x38\xea\xf5\xa7\x83\xeb\x58\xf8\x61\x06\x60\x9c\x14\x86\xeb\x62\xfd\xb2\x9d\xb0\xc1\x70\x3c\xe9\x0e\x2f\xfb\xd3\x41\xef\x2b\x62\xf3\xc8\x5c\xab\x43\xe6\xe4\x9f\xeb\xfe\xf7\xb9\xd1\x10\xed\x84\x75\xff\x1e\x4f\xc7\xfd\x8f\x7f\x0d\x2e\xfb\xe3\x69\x6f\xf4\xa1\x3b\x18\x7e\xa5\x09\xe8\xd7\x5a\x62\xc8\x94\x5b\x09\x1d\x5b\xc6\x82\x2b\xbd\xc4\x47\x4f\xbd\x2c\x67\x68\x90\x52\xb4\x6b\x38\x01\xca\x75\x00\x29\x2c\xb8\x35\x7a\xaf\x15\xc2\x87\xee\xa7\xe9\xf5\xa8\x37\x66\x4c\x0a\x82\x5f\xbf\xa9\xad\x4a\xae\x22\xbc\x7d\xdb\x1f\xbd\xdb\xb7\xa6\xf5\x50\x7f\x6d\x1f\x35\xa2\xf5\x70\x70\xda\x1e\x55\x7e\x00\xc6\xf3\x96\x35\x09\x74\x5a\x0f\xcd\xe7\x05\xaf\x4b\xad\x6d\x1a\x87\xe1\xb1\x2a\x69\x6f\x59\xcc\x84\x05\x2b\x0a\x10\x46\x8b\x00\x75\xb6\x1c\x97\x21\xad\xbf\x9b\xbb\x63\x9a\x24\xb3\xa7\x49\x32\xcd\xdd\x8e\x16\xc8\x15\x87\xc1\x58\xb8\x0f\x84\xab\xc8\xf3\x18\x90\x78\x5c\x0f\xa8\x18\x3b\x65\x00\x27\x30\x19\xf5\x46\x17\x71\x26\x03\x42\xc8\x5d\x69\x14\xcc\x10\x8c\x73\x4b\x54\x20\x08\x70\x8d\xfe\x1e\x48\xaf\xb0\x09\x0a\x81\x84\xa7\x00\x65\xf1\xbc\x8a\xb0\xc9\xb5\xcc\x41\x07\xd8\xe4\x82\x60\x83\xa0\x1c\x68\x0b\xdd\xab\x73\x38\xdd\x63\x33\x11\x50\x81\xb3\x50\x18\xa1\x2d\xec\x72\x52\xbb\x00\xc2\x2a\x58\xa1\xb0\x14\x67\x77\x16\xb7\x8e\x27\x31\x33\x18\x8f\x2b\x17\xa8\x61\x83\xd2\x81\xbc\x0b\xed\xe7\x30\x2b\x09\x34\xfd\x18\x2a\xbd\x75\x04\xd2\xa0\xf0\x90\xbb\x4d\x14\x19\x27\x54\x5d\xd2\xdc\xbb\xd5\x97\xc4\x63\x7f\x36\x9a\x72\x57\x12\xe4\x62\xad\xed\xa2\x0a\x40\x0e\x64\x19\xc8\xad\x74\xc0\xa8\xdb\x11\x35\x05\x34\x73\x06\xf0\x84\x2d\xf7\xd6\x7a\x9a\xf6\x5d\x42\x33\x0d\x15\x83\x01\xcc\x8d\x58\x84\xce\x69\xb5\xfd\x12\xeb\x14\x72\x5d\x1c\xf8\x34\xd9\x01\x2b\xf1\x99\x47\x63\x1d\x78\xae\x81\x2a\x8d\x11\x33\x34\xa1\xd1\x5d\x75\x7f\xef\x5f\x8d\xb7\xcf\x85\x29\x72\x91\xee\x7e\x38\xd5\x2e\x3b\x18\xf0\x23\xcf\xd7\xb1\x0a\xa7\xb8\xb6\x73\x2f\xb8\x74\x96\x84\xb6\xe8\xb9\x5e\x89\x05\x76\x5a\x0f\x71\xc2\xfb\xef\xc7\xd3\xfe\xe5\xc7\x69\xf7\xf2\x72\x74\x33\x9c\x6c\x53\xb5\xf4\x29\x4a\x9f\xee\xe0\x5e\xff\x5d\xf7\xe6\x6a\x32\xfd\xd8\xff\x63\x30\x1a\x6e\xeb\xdb\xa3\xb5\xb0\x8d\x9d\xc8\x0a\x51\x06\xbc\xf8\x39\x3d\x8b\x86\x9d\x95\xda\xa8\xf4\xac\x4e\x42\x1a\x57\x2a\x5e\x78\xb7\xd6\x0a\x7d\x47\x6c\x42\x03\x58\xcd\x67\xda\x72\xa5\x7d\x27\x73\x05\x65\xd2\xea\xf8\xef\xf1\x00\x96\xce\xce\x77\x78\x6c\x79\xc4\x2d\x52\xaa\x1a\xc6\xbe\x28\x5f\xda\x68\xf0\x8e\x72\x72\x89\xbe\xe9\x24\xd2\xc6\xf9\x25\x2f\x4c\xb9\xd0\xb6\x23\xad\xae\x01\x8f\x0b\x1d\x08\x3d\x8f\xbd\xee\x90\x2f\xf1\x18\x88\x16\xe3\x31\x36\xed\x1f\x61\xd2\x1d\x0c\x27\xfb\x57\xaa\x06\xd6\xd9\xb9\x5e\x74\x8e\xed\xb2\xbb\x4e\xef\xc5\xca\x7c\xc9\xf3\x5b\xc4\xe8\xab\x86\xd5\x8e\xde\xd9\x4d\xff\x97\xad\x11\x7b\x19\x57\x4f\xe5\xa9\xdb\xdf\xee\xb6\x09\x6b\xb3\x66\x47\x08\xff\x88\xc7\xfe\x0f\x00\x00\xff\xff\x45\xd3\xa7\xae\x5b\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0xde, 0xe6, 0xf6, 0x78, 0xd3, 0xf3, 0x74, 0xf6, 0xa1, 0x93, 0xe3, 0x9d, 0x3a, 0x4c, 0x50, 0xc4, 0x82, 0x9b, 0x6e, 0x3b, 0x2d, 0x29, 0x12, 0x3, 0xa2, 0xfd, 0x96, 0xd, 0x97, 0xdd, 0x55}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
